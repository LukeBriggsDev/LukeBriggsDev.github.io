[{"categories":["Project Release","Software Development"],"content":"A web extension that hides the elements of web pages that are best off hidden. Many sites are designed to suck time away from you by showing you things that are interesting enough to keep you scrolling but offers no value. This extension strips away all these comments, recommendations and promotions leaving you with just the content you have specifically asked to receive. ","date":"2021-08-15","objectID":"/calmer-internet/:0:0","tags":null,"title":"Calmer Internet","uri":"/calmer-internet/"},{"categories":["Project Release","Software Development"],"content":"Youtube elements: Home links Explore links Trending link (mobile) Comments Redirect home page to subscriptions Watch next section Live Chat ","date":"2021-08-15","objectID":"/calmer-internet/:1:0","tags":null,"title":"Calmer Internet","uri":"/calmer-internet/"},{"categories":["Project Release","Software Development"],"content":"Twitter elements: Trending bar Explore link ‘Who to Follow’ bar Topics bar ","date":"2021-08-15","objectID":"/calmer-internet/:2:0","tags":null,"title":"Calmer Internet","uri":"/calmer-internet/"},{"categories":["Project Release","Software Development"],"content":"Instagram elements: Explore links Explore people links Comments below posts in feed Comments in posts Github Link ","date":"2021-08-15","objectID":"/calmer-internet/:3:0","tags":null,"title":"Calmer Internet","uri":"/calmer-internet/"},{"categories":["Project Release"],"content":"Harvard referencing style as recommended by Newcastle University","date":"2021-07-10","objectID":"/full-release-newcastle-bst/","tags":null,"title":"Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University","uri":"/full-release-newcastle-bst/"},{"categories":["Project Release"],"content":"A couple of months ago I released a blog post about LateX. At the bottom of the post I made quick reference to a BibTeX style I had created for the referencing used by Newcastle University. The style had a few bugs and was quite hard to find it but it was left dormant while I made some other software and focused on work. I am now pleased to say that I have spent some work polishing it up, fixing some issues, and giving it a proper release. It’s even on CTAN!. If you are a student and notice any issues, please report them on GitHub Release Notes ","date":"2021-07-10","objectID":"/full-release-newcastle-bst/:0:0","tags":null,"title":"Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University","uri":"/full-release-newcastle-bst/"},{"categories":["Project Release"],"content":"newcastle-bst: Harvard referencing style as recommended by Newcastle University This package provides a BibTeX style to format reference lists in the Harvard at Newcastle style recommended by Newcastle University. It should be used alongside natbib for citations. ","date":"2021-07-10","objectID":"/full-release-newcastle-bst/:1:0","tags":null,"title":"Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University","uri":"/full-release-newcastle-bst/"},{"categories":["Project Release"],"content":"Installation The required style file is available from GitHub and CTAN. You can use the style by copying it into your working directory containing your .tex file. You can also add it to your bst directory in your tex path to use it without having to copy it over each time. ","date":"2021-07-10","objectID":"/full-release-newcastle-bst/:1:1","tags":null,"title":"Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University","uri":"/full-release-newcastle-bst/"},{"categories":["Project Release"],"content":"Using the style To use the style include this in your preamble: \\usepackage{natbib} \\usepackage[UKenglish]{isodate} \\bibliographystyle{newcastle} Also remember to specify your .bib file at the end of the document: \\bibliography{file} The easiest way to create .bib files for this style is through exporting entries from a reference manager such as Mendeley. However, some parts are not available through this (such as titleaddon for computer programs). If you notice any discrepancies between generated references and the recommended styles then please raise this on GitHub ","date":"2021-07-10","objectID":"/full-release-newcastle-bst/:1:2","tags":null,"title":"Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University","uri":"/full-release-newcastle-bst/"},{"categories":["Project Release"],"content":"License Copyright 2021 Luke Briggs This work consists of the documented newcastle.bst file. The text files contained in this work may be distributed and/or modified under the conditions of the LATEX Project Public License (LPPL), either version 1.3c of this license or (at your option) any later version. This work has had no input from Newcastle University and is done entirely in order to help other students create bibliography quicker. This work is ‘maintained’ (as per LPPL maintenance status) by Luke Briggs. ","date":"2021-07-10","objectID":"/full-release-newcastle-bst/:1:3","tags":null,"title":"Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University","uri":"/full-release-newcastle-bst/"},{"categories":["Project Release","Software Development"],"content":"My biggest project yet","date":"2021-05-31","objectID":"/inspection-and-dissection-pepys/","tags":null,"title":"Inspection and Dissection: Pepys - A Straightforward Markdown Editor","uri":"/inspection-and-dissection-pepys/"},{"categories":["Project Release","Software Development"],"content":" The product page is available here Brief Description Pepys is a GUI journaling application built using Python bindings for the Qt framework. It is available as an installer for Windows and a Flatpak on Linux. Background I started journaling around February last year, it was probably the most prescient thing I have ever done. It wasn’t long before we all went into self-imposed isolation and journaling provided a good way to express my thoughts. My first posts were made in one big Word document. Journals need to be as future-proof as possible, and I thought at the time that since entire governments are probably reliant on MS Word that it won’t be going away any time soon. It wasn’t a good experience though. Having to type the date each time was tiresome, and I thought it would be a formatting mess should I use an Operating System without MS Word (something which would later happen when I spent several months using Linux). I next moved on to Notion. An excellent productivity application that can be used to do all sorts from notes to spreadsheets to databases. It’s template, tagging and calendar features made it a great prospect for writing my journal in. The entries were made in Markdown so would be viewable on any computer for as long as we still used ASCII and Unicode, seems pretty future proof. The trouble was, it made journal writing a chore. To write an entry I’d have to open up this electron application that took an age to open and slowly click through web links, waiting for pages to load, before I could get to writing entries. I wanted a native application that would allow me to write journal entries in markdown, with a date-based file chooser. I found no application that fitted all this criteria that worked on Linux and Windows, they all seemed Mac only (I am envious of the great ecosystem Apple cultivates among its development community). So I took it upon myself to write my own. A Rocky Start The first idea for a Journal application first came to me in June 2020 but it would take nearly a year before I would find the time and the courage to actually start it. My only experience with a GUI application that wasn’t made in a dedicated game engine was Dice-Jack which was a version of blackjack that used Dice instead of cards and was made over a few days for an assignment as part of my Sixth Form Computing course. I knew I couldn’t use dotNet since I wanted it to be able to run on Linux as well as Windows. My next thought was Java, since that was the language I was learning at University at the time and seemed to fit all my requirements. I managed to get a very early text editor working in Java. At that point, the idea was to have all the styling done in real time as you typed. For example, if I typed a # then I would set the font size you type in to that of a title. I was running into issues that were perfectly fixable but I was never truly comfortable in Java. I will absolutely use Java in the future but it just didn’t seem right with this project. With Java I had the choice between the ancient swing and JavaFX. I have never got to grasps with the whole split GUI framework where some bits are in code and some bits are in XML files. All the GUI frameworks are going this way so I will have to get my head around it eventually but this was not the project for this. A Walk in the Dark After bouncing of Java frameworks I had to go with what I know, Python. Python was the first language I learned and I’ve been using it for coming up 4 years now. The big players in the Python GUI game is Gtk, Qt, wxWidgets, and Tkinter. Tkinter and wxWidgets are the more simple of the four with the majority of applications being built in either Gtk or Qt. In the end I settled with Qt because it seemed to have better look and feel across different systems, and Gtk seemed to want me to use build systems that I was unfamiliar with. I first broke ground with the first git commit being pushed at 20:29 BST on April 1st. This was the first commit to the","date":"2021-05-31","objectID":"/inspection-and-dissection-pepys/:0:0","tags":null,"title":"Inspection and Dissection: Pepys - A Straightforward Markdown Editor","uri":"/inspection-and-dissection-pepys/"},{"categories":["Project Release","Software Development"],"content":"Syntax Highlighting An early version of the edit pane My primary focus was in getting markdown source highlighting in the text window. Things like bold, italic, and strike-through came rather quickly but became incredibly slow with large amounts of text. My initial solution to the syntax highlighting was a naive one. I would be performing regex searches and applying text character formatting across the document on each key press. The approach was okay on small documents, but the larger the document the more text would be searched through and it would become impossible to type. The first breakthrough came when I discovered a Qt widget called QSyntaxHighlighter which provided methods that would allow text to be broken up into 'blocks'. I put all my regular expressions into a QSyntaxHighlighter and used its blocking mechanism to allow for typing to not be slowed down on large documents. ","date":"2021-05-31","objectID":"/inspection-and-dissection-pepys/:1:0","tags":null,"title":"Inspection and Dissection: Pepys - A Straightforward Markdown Editor","uri":"/inspection-and-dissection-pepys/"},{"categories":["Project Release","Software Development"],"content":"HTML Preview An early version of the view pane Alot of the early work went into refining my markdown regular expressions, making sure they formatted the correct parts and matched the output reasonably. It wasn't long before I had to turn my attention to the HTML preview. The preview pane was initially just a QTextBrowser that supported a limited subset of HTML. When the preview button was clicked the markdown would be converted to html using [mistune](https://mistune.readthedocs.io/en/latest/). I had used mistune previously on the [first iteration of this website](/inspection-and-dissection-this-site) so a lot of that could be copied and pasted from my work there. The fact that only a subset of HTML was supported soon became an issue and I had to switch the preview to a full on web engine (the reason why the application is so large). The web engine was such a double edged sword. Without it: previews wouldn’t match exports, math equations wouldn’t be supported, many markdown elements couldn’t be rendered properly (tables, inline html). But with it, the application swells in size to over 100MB download and even larger when fully installed. I wish I could resolve this alas I am too tired and too unskilled to be able to implement a solution. ","date":"2021-05-31","objectID":"/inspection-and-dissection-pepys/:2:0","tags":null,"title":"Inspection and Dissection: Pepys - A Straightforward Markdown Editor","uri":"/inspection-and-dissection-pepys/"},{"categories":["Project Release","Software Development"],"content":"The Killer Feature It was around this time that I went into exploring pandoc. I was amazed by its power and I will undoubtedly utilise it in many future projects. Pandoc is a program written in haskell that uses its own flavour of markdown to provide a huge amount of outputs for document conversion. I knew I had to implement this in some way to provide some way of providing a wide range of export option. Then I will have truly realised my need of having entries been in a future proof format, why have 1 future proof format when you can have every format under the Sun? ","date":"2021-05-31","objectID":"/inspection-and-dissection-pepys/:3:0","tags":null,"title":"Inspection and Dissection: Pepys - A Straightforward Markdown Editor","uri":"/inspection-and-dissection-pepys/"},{"categories":["Project Release","Software Development"],"content":"Calendar File Selector I knew that my main method of interacting with files should be through a calendar. Qt provides a reasonably good calendar widget that saved alot of time. The way I keep track of the files in a user’s journal is by having a very rigid folder structure which Pepys gets pointed to. The journal directory has a structure of YYYY\\MM\\DD\\YYYY-MM-DD\\YYYY-MM-DD.md This makes it very easy to search for all the entries by date. ","date":"2021-05-31","objectID":"/inspection-and-dissection-pepys/:4:0","tags":null,"title":"Inspection and Dissection: Pepys - A Straightforward Markdown Editor","uri":"/inspection-and-dissection-pepys/"},{"categories":["Project Release","Software Development"],"content":"Release A comparison of different logos I went through I have went into my woes over releasing software here but it is safe to say that this is an are where I learned an awful lot. In the end Pepys was released on Linux via flatpak and on Windows via an NSIS installer available to download on GitHub. There was no Mac release because I do not own a Mac no have sufficient experience with Macs to be comfortable with creating installers and sufficiently testing them for correctness. A Retrospective This whole process has been the longest I have ever spent on a project, it was probably the largest project I have ever made, and there were alot of firsts. It was the first application I made that wasn’t a game, it was the first proper GUI application I have made, and it was the first time I had to make installers by hand. The process was arduous at times and I felt like giving up at some points. I sit here now after releasing it and I think “if I’d only done this” or “it would be so much better if…” but I can’t think like that. If I had spent as long as possible on each feature till it was perfect then the software would never be released. I have learned that software development is an iterative process in 2 ways. The first way is in relation to an individual piece of software. You develop the software over time, slowly improving and adding until a finished product stumbles over the finish line. The second way is at a macroscopic level. Each huge project your begin, each journey you embark on, brings a new iteration on what went before. The next GUI project I make will be better. The next installer I make will be better. And this excites me. I suppose it has taken me until the end of my first year of University to understand what learning is really about. Learning isn’t about passing tests, although schools may tell you otherwise. Learning isn’t even about knowing stuff, that is just a by-product. Learning is about being better, about knowing you will be better, and about being excited about that. I am excited about what I will create next, how I will iterate on what I have learned, and how I can surprise myself. Special Thanks All of this took an awful lot of effort so I would like to give special thanks to the following people and projects for there valuable insights. Apostrophe An excellent markdown editor that shows how to make a properly good writing experience and led me down the Pandoc path. Also inspired some of the regex used. Humboldt University Optical Metrology Group Without whom I’d still be wrestling with compilers in Flatpak Lucy Marsden (Github) Who provided a second set of eyes and motivated me to actually get stuff done. Jan Grulich For showing how to implement Adwaita colours in Qt ","date":"2021-05-31","objectID":"/inspection-and-dissection-pepys/:5:0","tags":null,"title":"Inspection and Dissection: Pepys - A Straightforward Markdown Editor","uri":"/inspection-and-dissection-pepys/"},{"categories":["Project Release","Software Development"],"content":"My biggest project yet","date":"2021-05-31","objectID":"/pepys/","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":["Project Release","Software Development"],"content":" “It is rightly made for those who love to document their daily life events” - FOSSBytes Pepys is a journaling application that utilises markdown for writing and storing the journal entries Features Markdown Highlighting Inbuilt HTML Preview Markdown Shortcuts Date Oriented Dark Theme Future Proof Downloads Source Code Features ","date":"2021-05-31","objectID":"/pepys/:0:0","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":["Project Release","Software Development"],"content":"Markdown Highlighting Pepys provides highlighting for key Markdown syntax in a clean and focus-driven design. Bold is bold, code is clear from text, and tags and urls don’t clutter your view. ","date":"2021-05-31","objectID":"/pepys/:1:0","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":["Project Release","Software Development"],"content":"Inbuilt HTML Preview With a click of a button your markdown is rendered with links all clickable, images viewable, and even iframes are interactable. ","date":"2021-05-31","objectID":"/pepys/:2:0","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":["Project Release","Software Development"],"content":"Markdown Shortcuts Pepys features tools to add tables and images quickly and easily. No more fiddling with alignment or hassles with relative directories. ","date":"2021-05-31","objectID":"/pepys/:3:0","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":["Project Release","Software Development"],"content":"Date Oriented Pepys is for making journal writing simple. Organising your entries into dates is automatic. There is no file selector, instead you pick a date and write the entry for that date. Clicking a date with an existing entry will show that entry. You also have the ability to favourite specific dates and add tags. ","date":"2021-05-31","objectID":"/pepys/:4:0","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":["Project Release","Software Development"],"content":"Dark Theme Whether you write in day or night, Pepys will make sure that it is as comfortable as possible ","date":"2021-05-31","objectID":"/pepys/:5:0","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":["Project Release","Software Development"],"content":"Future Proof Pepys stores all your entries as plain text files in a YYYY/MM folder structure with a YYYY-MM-DD.md name format. This means that all your entries themselves will be viewable forever in any text editor that will come along. Pepys also uses pandoc syntax, with support for pandoc conversions to other formats. This means that all your entries can be converted completely to HTML, PDF, LaTeX, Microsoft Word, EPUB, and more! Downloads Linux Windows Source Code The source code is available on Github Featured in FossBytes - https://fossbytes.com/document-activity-pepys-journal-app-linux/ ConnectWWW.com - https://connectwww.com/pepys-markdown-journal-application/62941/ ","date":"2021-05-31","objectID":"/pepys/:6:0","tags":null,"title":"Introducing Pepys: A straightforward markdown journal","uri":"/pepys/"},{"categories":[],"content":"How German Laser Beams Fixed My App","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"There is a very peculiar thing I have found in software development, it is incredibly difficult to actually get software on other people’s machines. Even compiled languages can have difficulty. ","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:0:0","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"Context I am elbow deep in a very large personal project at the moment (all will be revealed soon) that has so far taken a month. The project is getting to a stage now where deployment methods have to be evaluated. From the beginning I wanted the project to be fully cross platform across Windows, Linux, Mac with a singular codebase. Because of these specific requirements, I went with the Qt GUI framework, it is cross platform, runs natively on each platform, and has bindings for Python (my preferred language). Because nothing is ever easy, there are actually two different python bindings for Qt. There is PySide which was created by the Qt Company themselves. It has a less restrictive license, but seems to have less of a community around it due to it being the newer of the two bindings. The other binding is called PyQt and came first, even being called python3-qt in the fedora package manager. When it comes down to coding, there is pretty much no difference between them since they are all just pythonic fronts for the same C++ back-end. For the whole project up until recently I was using PySide since it is the same in every way except for a better license. ","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:1:0","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"Python Deployment Python, as it is shipped as CPython, does not (by default) compile to machine code. You’ll notice a parenthetical and a subordinate clause in the previous sentence, that’s how windy this road goes. There are systems that will turn your python code into binary executables, I was using PyInstaller to get the job done for me. I’d run it on Linux, Windows, MacOS and all my code would be packaged in to binary form; there was the issue of non-python dependencies I had but I could find ways around that. So there I was with all my binaries in a row and feeling confident about how I’m going to deploy my application. ","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:2:0","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"Linux Binary Woes My current main machine runs Fedora Linux, this is a distribution that is kept reasonably up to date and, at the time of writing, has a new desktop environment and newer kernel than other non-Arch distros. All of this meant that when I tried to run my Linux compiled program on Ubuntu (A major distro I want to support), I get thrown an error that Ubuntu doesn’t have the correct version of glibc (the dynamically linked C libraries). Sticking with the standard glibc versions that come with each distro, GNU/Linux is backwards compatible but not forwards compatible. That is to say that a program compiled on an older distro will run on a newer distro but not vice-versa. The solution to this seems straightforward doesn’t it? Compile the program on an older version. So I loaded up an Ubuntu LTS VM, compile the program, works like a charm. I try to run that same executable on my main Fedora machine and I get an error message: Settings schema 'org.gnome.settings-daemon.plugins.xsettings' does not contain a key named 'antialiasing' The program does not run. This is without doubt a bug in Gnome 40. But it is a bug that happens 100% of the time, it may get fixed, it may not. My application is either incompatible with anything other than my own machine, or compatible with everything except my own machine. Of course I could have two separate binaries, but that would be a bit of a hassle to maintain. In comes what I thought would be my saviour, Flatpak. ","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:3:0","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"Build Systems Linux has 3 main methods of deploying applications. Shipping binaries, making per distribution packages, and containers (of which flatpak is one). Binaries are, as we’ve seen, version dependent, packages are distribution dependent, and containers run across all machines but have extra bulk since they package there own dependencies rather than relying on system libraries. Throughout my exploration of deployment options, I have made all three. I have documented my results of binaries, and I also went on to make an RPM package (the packaging system that Fedora uses). Name: Pepys Version: 0.3.0 Release: 8%{?dist} Summary: A straightforward markdown journal License: GPLv3 URL: https://www.lukebriggs.dev/pepys Source0: pepys.tar.gz Requires: python3, python3-wheel, python3-pip, pandoc, enchant, wkhtmltopdf, python3-qt5, python3-qt5-webengine, python3-regex, python3-num2words, python3-pypandoc, python3-enchant, python3-setproctitle, texlive-mdwtools BuildRequires: python3-pip %description %build MAIN_DIR=%{buildroot}/usr/share/pepys APP_DIR=%{buildroot}/usr/local/share/applications mkdir -p ${MAIN_DIR}/temp mkdir -p ${APP_DIR} tar -xzvf %{SOURCE0} -C ${MAIN_DIR}/temp if test -f ${MAIN_DIR}/temp/src/resources/base/config.json; then rm ${MAIN_DIR}/temp/src/resources/base/config.json fi if test -f ${MAIN_DIR}/temp/src/resources/base/wordlist.txt; then rm ${MAIN_DIR}/temp/src/resources/base/wordlist.txt; fi cp -r ${MAIN_DIR}/temp/* ${MAIN_DIR} rm -rf ${MAIN_DIR}/temp printf \"[Desktop Entry]\\n \\ Type=Application\\n \\ Name=Pepys\\n \\ Categories=Office;\\n \\ X-GNOME-FullName=Pepys\\n \\ Comment=A straightforward markdown journal\\n \\ Icon=%s/src/main/resources/base/icons/appicons/icon.svg\\n \\ NoDisplay=false\\n \\ Exec= python3 %s/src/main/python/main.py\\n \\ Path=\\n \\ Terminal=false\\n \\ X-GNOME-UsesNotifications=false\\n \\ StartupWMClass=Pepys\" \"/usr/share/pepys\" \"/usr/share/pepys\" \u003e $APP_DIR/Pepys.desktop pip3 install PyPDF4 %files /* %post chmod -R 777 /usr/share/pepys #%license add-license-file-here #%doc add-docs-here %changelog * Sat May 15 2021 Luke Briggs \u003clukebriggs02@gmail.com\u003e - NOTICE: The above is a script used for testing, it is mostly functional but don’t use it as a guide for how to do things properly The above is a script you feed into rpmbuild and it will generate a .rpm file which Fedora users can use to install your software. You can see that all it really is is some metadata listing app information, dependencies (these dependencies are ones that are inside the fedora packaging system), and a shell script to say what gets installed and how. Because all the dependencies are listed, and are all from the the distros package manager, the file size of an rpm only consists of the files that you supply. In my case it was some python source files and some vector icons, totalling 1.2MB. Of course the full size of the app still needs to be downloaded but the other 150MB or so come in the form of system libraries that other apps can also use. This is the classic Linux method of software deployment, it is lean, and ensures compatibility with a particular distro. The problem comes when looking at other distributions. Some distributions also use RPM (CentOS, RHEL, OpenSUSE) but have different packages, and so need special cases in the file. Other distributions use a different package management system, Debian and derivatives use .deb files for instance. ","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:3:1","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"Flatpak Flatpak and it’s rival Snap aim to solve the dependency hell by shipping everything together in one big package. You avoid incompatibility at the cost of redundancy. The cover image of this post is my flatpak spec file that gets fed into flatpak-builder. And you may notice that it works in a similar way to a distribution’s own package manager. We have metadata along with base dependencies app-id:dev.lukebriggs.pepysruntime:org.kde.Platformruntime-version:'5.15'sdk:org.kde.Sdkadd-extensions:org.freedesktop.Sdk.Extension.texlive:directory:texlivesubdirectories:trueautodelete:trueversion:'20.08'command:runner.sh Because everything is in a sandbox, we have to declare what parts of the host system we have to use finish-args:- --share=ipc- --socket=x11- --socket=wayland- --socket=pulseaudio- --device=dri- --filesystem=home- --share=network- --env=PATH=/usr/bin:/app/bin:/app/texlive/bin:/app/texlive/bin/x86_64-linux:/app/texlive/bin/aarch64-linux And then comes the rest of our dependencies which have to be files we supply, along with the build script we use to actually do what we want with the files. The Trouble with Python, Qt and Flatpak All was going swimmingly until I had to get my Qt app in flatpak. 2 of my app dependencies are installed by effectively copying the prebuild binaries into the flatpak sandbox. - name:pandocbuildsystem:simplebuild-commands:- ls- install -D bin/pandoc /app/bin/pandocsources:- type:archiveurl:https://github.com/jgm/pandoc/releases/download/2.13/pandoc-2.13-linux-amd64.tar.gzsha256:7404aa88a6eb9fbb99d9803b80170a3a546f51959230cc529c66a2ce6b950d4c- name:wkhtmltopdfbuildsystem:simplebuild-commands:- cp -r local/* /app/- ls libsources:- type:archiveurl:https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox-0.12.6-1.centos8.x86_64.rpmsha256:5cc267d54fe3f144729f31432a165e028b689583c53cfee0a01d52644ab280d9 One of my dependencies is actually built and compiled within the flatpak container. (Given no buildsystem option on archives with makefiles in them, flatpak will automatically compile and install them) - name: enchant sources: - type: archive url: https://github.com/AbiWord/enchant/releases/download/v2.2.15/enchant-2.2.15.tar.gz sha256: 3b0f2215578115f28e2a6aa549b35128600394304bd79d6f28b0d3b3d6f46c03 So we are back to the dilemma of using source files or prebuilt binaries, you’ll see later that the solution is a mix of both. One option is just shipping a compiled version of my program in a flatpak. The issue is that flatpak’s glibc is once again older than my main machine so all flatpak builds would have to be done in an Ubuntu VM, not ideal. Next up comes building from source in the flatpak. My plan for the process was this: Get python and resource files in the flatpak pip install all dependencies Sounds simple enough, but flatpak didn’t like me communicating with the internet while installing (I tried share=network on individual modules and it didn’t work) So, each python library had to be down as it’s own python module with a link to the tar balls on pypi. Flatpak has a tool for such an occasion called flatpak-pip-generator so the line in the flatpak yml - python3-requirements.json is a pointer to a file actually containing all pip dependencies { \"name\": \"python3-requirements\", \"buildsystem\": \"simple\", \"build-commands\": [], \"modules\": [ { \"name\": \"python3-regex\", \"buildsystem\": \"simple\", \"build-commands\": [ \"pip3 install --verbose --exists-action=i --no-index --find-links=\\\"file://${PWD}\\\" --prefix=${FLATPAK_DEST} \\\"regex\\\" --no-build-isolation\" ], \"sources\": [ { \"type\": \"file\", \"url\": \"https://files.pythonhosted.org/packages/38/3f/4c42a98c9ad7d08c16e7d23b2194a0e4f3b2914662da8bc88986e4e6de1f/regex-2021.4.4.tar.gz\", \"sha256\": \"52ba3d3f9b942c49d7e4bc105bb28551c44065f139a65062ab7912bef10c9afb\" } ] }, { \"name\": \"python3-num2words\", \"buildsystem\": \"simple\", \"build-commands\": [ \"pip3 install --verbose --exists-action=i --no-index --find-links=\\\"file://${PWD}\\\" --prefix=${FLATPAK_","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:3:2","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"Lasers to the rescue At this stage, I didn’t actually know what python wheels were, I just assumed everything had to be built from source. I was desperate for answers after 3 days of debugging and staring at config files. I did something I very rarely do, I used the GitHub search function. To my amazement I found a solution. The Optical Metrology Group in the Physics department of Humboldt University Berlin created a Linux application for locking onto spectroscopy lines. Guess what, they made a flatpak! I looked at there yaml, and I knew then and there that they had found a solution. # we used to build pyqt on our own here, but this build caused trouble with the pyqtgraph widget being transparent on some systems.# Therefore, we just use the x86_64 wheel here...- name:pyqt-x86_64buildsystem:simplesources:- type:fileurl:https://files.pythonhosted.org/packages/4c/bb/7fce18fbe0275d7a3e069a306d8f4662c77eda30ec6780634fd4a7ee50ce/PyQt5-5.15.1-5.15.1-cp35.cp36.cp37.cp38.cp39-abi3-manylinux2014_x86_64.whlsha256:b1ea7e82004dc7b311d1e29df2f276461016e2d180e10c73805ace4376125ed9- type:fileurl:https://files.pythonhosted.org/packages/31/24/f887203677955ba4d5d4efe9176ac7ed2bf84efce8c243ab91e63183ad9e/PyQt5_sip-12.8.1-cp37-cp37m-manylinux1_x86_64.whlsha256:a1b8ef013086e224b8e86c93f880f776d01b59195bdfa2a8e0b23f0480678fecbuild-commands:- pip3 install PyQt*.whl --target=/app/lib/python3.7/site-packages They had obviously also faced similar Qt-based problems. Their YAML led to me finding out about python wheels, how I could get PyQt in a flatpak, and how I could tell pip the right directory for a python installation (I had no idea what --target would do before this). Thanks to some German physicists, my next project is back on track. Beady eyed people may notice some information in some of the config files I’ve posted that hint to what it could be. I did try and use PySide using the same wheel method but I got into some strange cyclical versioning thing since it required PySide an Shiboken2 to be installed at the same time. All that means is that my application will be open source out of a legal obligation, as well as an civil one. SIDE: kerberos is also a requirement for PyQt to work in a flatpak, I have no idea why but it may have something to do with certain networking modules. ","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:3:3","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"Further Reading Here are some useful sources of information I turned to while interacting with packaging systems on Linux https://www.loganasherjones.com/2018/05/using-flatpak-with-python/ An excellent and succinct guide that covers making non-qt python apps work in a flatpak https://docs.flatpak.org/en/latest/getting-started.html Information on what a flatpak is and what its parts consist of. https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html A good reference for what commands can be used in flatpak YAML https://github.com/flathub/io.github.hermitdemschoenenleben.linien/blob/8d89b1c7193602f0696f134e92ac1eba39986303/io.github.hermitdemschoenenleben.linien.yml#L18 The Humboldt University Berlin YAML https://opensource.com/article/18/9/how-build-rpm-packages A straightforward guide on how to make RPM packages ","date":"2021-05-22","objectID":"/flatpak-instructions-not-included/:4:0","tags":null,"title":"Flatpak: Instructions Not Included","uri":"/flatpak-instructions-not-included/"},{"categories":[],"content":"About Me","date":"2021-05-03","objectID":"/about/","tags":null,"title":"About","uri":"/about/"},{"categories":[],"content":"About I’m Luke Briggs: a Computer Science student from the UK studying at Newcastle University. About Site This is a site where I will share what I think might be helpful to other people in similar places in life. Most of the stuff here will be related to side projects, my academic work, and will be a reference to which I will point to on occasion. The full story of how this site was created can be found here. PGP public Key ID - 0x37B9B28811BBE231 PGP public key asc - public.asc ","date":"2021-05-03","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":["Project Release","Computing"],"content":"The sites, they are-a changin'","date":"2021-05-03","objectID":"/where-hugo-i-go/","tags":null,"title":"Where Hugo I Go","uri":"/where-hugo-i-go/"},{"categories":["Project Release","Computing"],"content":"As you are probably aware, I have redecorated. I said in a previous post that my reason for making my own site in the first place was as a central hub to point people to all the things that I do. Despite the fact that from the outside it looks like I haven’t done a whole lot since, behind the scenes I have my biggest project yet in development (check out my GitHub if you want a sneak preview of that). It was while working on my project that I realised that I should have a site that requires my to ssh into a VPS and pull a git repository every time I want to add a post. ","date":"2021-05-03","objectID":"/where-hugo-i-go/:0:0","tags":null,"title":"Where Hugo I Go","uri":"/where-hugo-i-go/"},{"categories":["Project Release","Computing"],"content":"Technology Behind the scenes, the site is hosted on GitHub Pages. The site is generated using a static site generator called Hugo with a slightly tweaked version of the LoveIt. With a static site I can remove server costs completely, have a better looking site, and make it easier to add new posts. Because each post is now a document rather than a database field, you can also stick index.md at the end of any post to get the raw markdown for that post. You are also able to view the source for the site at my GitHub ","date":"2021-05-03","objectID":"/where-hugo-i-go/:1:0","tags":null,"title":"Where Hugo I Go","uri":"/where-hugo-i-go/"},{"categories":["Project Release","Computing"],"content":"New Logo Along with the revamped site, I have created a new logo to go with it; it is probably the best looking thing I have ever drawn. The logo takes inspiration from the IBM PCJr with a few more rounded corners, thinner bezels, and a more minimalist feel. It was made in Inkscape with the basic shapes and the font is Roboto Mono. ","date":"2021-05-03","objectID":"/where-hugo-i-go/:2:0","tags":null,"title":"Where Hugo I Go","uri":"/where-hugo-i-go/"},{"categories":["Project Release","Game Development"],"content":"For the past 5 days I have done what I have failed to do many times before, complete the process of making a game.","date":"2021-03-05","objectID":"/inspection-and-dissection-type-or-die/","tags":null,"title":"Inspection and Dissection: Type or Die","uri":"/inspection-and-dissection-type-or-die/"},{"categories":["Project Release","Game Development"],"content":" Itch.io Link For the past 5 days I have done what I have failed to do many times before, complete the process of making a game. The game was for the NUCATS Game Jam. NUCATS is the Newcastle University Computing and Technology Society. It was made in Unity (with great help from Brackeys), and it was really the first reasonably sized game I’ve made. The only other thing I’ve ever made in Unity was Ping which, as the name suggests, was a pong clone. Type or Die is a top-down zombie shooter where it is not about how good your aim is, but how fast you can type. Waves of zombies come at you in all directions, with the direction they come from determining what key to press to shoot at them (e.g a zombie coming from the top right would be shot at using the ‘p’ key). The game jam has come in a time between some pretty busy weeks so I have surprised myself by actually getting a finished game out. I even contemplated not taking part at all after the first day because I felt I just wouldn’t be able to do it. I started off (as optimistic idiots often do) full of goals with zero plans. Every step of the way I was decreasing scope to match my skill and enthusiasm, and its where those paths crossed that the game was made. I knew that the most complex thing I could make in the time with limited skill was a 2d, single-screen game. Guns are an easy way to make the mundane exciting, so the game became a shooter, and wanting to have the computer do all the work for you meant that it became a wave shooter for replayability. Every waking moment from Monday to Thursday was spent either watching Suits or making this game, and the sheer intensity of such an endeavour in the middle of some pretty hectic University team projects made me realise one thing, I will probably not make another game for a very long time. If you have a gander at my projects page you will see that all of them are game, so you may think that I really enjoy game-making. But in retrospect I think I only made games as an outlet for programming rather than an outlet for artistic ideas. Creation is a painful process, so you have to see the purpose in it. As much as I am proud of what I achieved with each of the games I made, I can’t see them as providing a service. My perspective on games has completely changed in the past year, I place a huge value on the incredible narrative experiences offered by the likes of ‘God of War’ or ‘The Beginners Guide’, these are games made by people with something to say and the skill to say it. There is certainly a place for arcade shooters, but if I don’t feel passionate about the things I create then I will never see them as worth the time I put into them. Type or Die marks the end of the 4-year-long adventure that started this whole blog off, I suppose it is fitting that it should end with another top down arcade shooter. The game is pretty fun, the zombie death animations are my favourite part (also an original theme made by my musically inept hand). More projects lie on the horizon, and the times they are a changin'. ","date":"2021-03-05","objectID":"/inspection-and-dissection-type-or-die/:0:0","tags":null,"title":"Inspection and Dissection: Type or Die","uri":"/inspection-and-dissection-type-or-die/"},{"categories":["Computing"],"content":"I had a bit of time today and I wanted to do something so here we are. Thanks to the incredible FeedGen python library, you can now point your RSS reader to here and get updates on when I write a new post. ","date":"2021-02-18","objectID":"/you-can-now-follow-me-on-rss/:0:0","tags":null,"title":"You Can Now Follow Me on RSS!","uri":"/you-can-now-follow-me-on-rss/"},{"categories":["Computing","Personal History"],"content":"Preface: I should state that this is not an evangelical sermon, Linux isn’t for everyone but it is for me. This is merely a detailing of why I have chosen to switch Operating System I have, over the course of the past year, consumed pretty much every interpretation and adaptation of Sherlock Holmes out there, from the original works to tangentially linked shows such as the excellent House MD; one thing I have come to understand is that you can only deduce correctly if your initial assumptions are correct. Logic is useless if its underlying axioms are unstable. So we turn to my current assumption when I use computers “Everything must be done in Windows”. I have used Windows all my life, all the software I need is on Windows, and all other operating systems are either anaemic in their UX and feature set or are incapable of running on my hardware. It just stands to reason, or does it? Lets look at that first point, ‘I have used Windows all my life’. That is not a very good reason, and the weakest of all. It is indeed true but it shouldn’t have any bearing on choice of Operating System, it is an unquestioned ideology rather than any valid argument. The second axiom, ‘all the software I need is on windows’, was probably true for quite a long time. For instance, if I wanted to play any windows games I would have been bang out of luck in days gone by, but tools such as Lutris and the strides made in WINE have made that side of things perfectly capable for my needs. Needless to say Mac is straying further away at this point with their move to ARM so the assumption still holds true for them. Outside of gaming, all the apps I need are actually available on Linux. My academic work in Computer Science lends itself perfectly to Linux. All the IDEs I use (the JetBrains suite) are available and the terminal is actually more conducive to my studies compared to the limited Unix-like aliases in the Windows Powershell. The only notable exception on Linux is the lack of the Microsoft Office Suite, but I was quite staggered when I realised that I don’t actually have any need for it. My long form writing is now done in LaTeX (see my reasons for that here), and I don’t use Excel or PowerPoint. Should the need ever arise, there is the native LibreOffice suite, and the cross platform Google Docs. And if compatibility is a necessity then Microsoft also now offers a web app version of the suite. The second point links to the third, that other operating systems have terrible UX. The king of UX is obviously MacOS, but that obviously doesn’t support my hardware or the ability to run the occasional windows game. I had always perceived Linux as having terrible UX because I always just viewed through the lens of someone who has used Windows their whole life. I always just assumed (once again question your assumptions) that how a Linux distro shipped was how it was. I thought I would have to be stuck with the bland, Ubuntu default GNOME desktop and icons with their washed out colours and pre-iOS 6 style realism. I was completely wrong about this and now we are going to look at where Linux, my new Operating System, is actually better for my needs. The Linux way of thinking Linux is about what Computers were built to do, and it is about the things that us Computer people love. GNU/Linux is a whole software ecosystem that is far greater than what Windows could ever hope for and only rivaled by what Apple has cultivated on its platforms. Unlike Apple, however, GNU/Linux also offers the user complete freedom in every aspect, and there are levels to this. Yes there are demigods that are compiling their own kernels but because there is such a community driven approach, other people have performed every possible layer of abstraction. Over the decades other people have been putting rungs at all levels of the ladder for other people to step on. Because Linux is built for the community by the community, it doesn’t fight me. If I wanted to change the interface on windows,","date":"2021-02-07","objectID":"/goodbye-windows-i-hardly-gnu-ya/:0:0","tags":null,"title":"Goodbye Windows, I Hardly GNU ya","uri":"/goodbye-windows-i-hardly-gnu-ya/"},{"categories":["Computing","Personal History"],"content":"Why Manjaro? I chose Manjaro, at first by design and then retroactively I realised that I would have had to go with something like it anyway. I wanted a distribution that didn’t come with the usual GNOME look, something that either looked excellent at first glance or had extensive customisation capabilities, and something that was pretty light on what it came with. I ended up narrowing it down to Manjaro and Elementary OS. In the end I chose Manjaro between the two because Elementary seemed slightly far behind in its update cycle compared to the Ubuntu it is based off and its never fun to start off with something knowing there is a major version incredibly close. It turned out in the end that Manjaro was really my best choice between the two anyway thanks to its easy switching between Kernels. I currently need to be running the latest experimental kernel for my touch pad to work. ","date":"2021-02-07","objectID":"/goodbye-windows-i-hardly-gnu-ya/:1:0","tags":null,"title":"Goodbye Windows, I Hardly GNU ya","uri":"/goodbye-windows-i-hardly-gnu-ya/"},{"categories":["Project Release"],"content":"Look at me with a fancy website. We’re about to get meta as we discuss how this site you’re exploring right now came to be. Why have a website? I want something to point to when someone asks ‘so what have you done?’. I also need it for when I ask myself the same thing. Sometimes I wonder how much I have actually done in my spare time, and a site like this helps me to remember that I haven’t wasted all of my spare time on Minecraft. Why make your own website? Here in Computer Science land: men are real men, women are real women, and small furry creatures from Alpha Centauri are real small furry creatures from Alpha Centauri; thanks to these huge revelations in the field of existentialism we take it upon ourselves to walk the road already taken. The real reason is I ought to have side-projects, more than I used to. I have more time, not just because of COVID but also because Computer Science is now the only academic subject I have to pay attention to, whereas most of my time in Sixth Form was spent on Maths and Further Maths. It made reasonable sense for the first project to be a platform for my other projects and this is that platform. Where did you start? I knew I wanted to make a website with a Flask back end for 2 reasons: I wanted a back-end that could enable things like logging in and writing blog posts all within the site. I vehemently hate JavaScript and would prefer to do as much with python as possible. In fact this whole site doesn’t have any JavaScript. You can inspect element and see that everything front end is done through CSS and HTML; this is certain to change but I will hold out for as long as I can. For the uninitiated, websites have 2 parts: A front end and a back end. In a simple form, the front end is everything you see (HTML, CSS, JS) and the backend is everything you don’t (Databases, Form requests, etc). Flask is a python framework that allows the said language to be used to serve all your requests. I had used Flask in the past whilst following the Harvard CS50x course back in 2019 to make a fake stocks app (💎👐). This time round, to re-familiarise myself I followed this excellent tutorial. After you are let loose on your own (especially in web dev) I found you have to have goals and a purpose to what you are doing otherwise it’ll never happened. I persevered through the trial-and-error process that is CSS I used a couple of sites for reference when I was making the design for the sight. These were the sights of: my new friend George Wood, the blog of Casey Liss, the blog of Marco Arment, and Hypercritical (No prizes for guessing which podcast I listen to). What extra things have you done? I’m honoured at your presumption that I go above and beyond in the call of duty. The main thing I have done is make all my posts in markdown. Yes, all my posts are entirely written in markdown which makes me able to write nicely structured documents quickly. The raw text of the markdown is stored as a regular text field in the sqlite database but at the stage when the backend grabs the field from the database, jinja parses it as html using the python module mistune. To spice the formatting up even further, since I will be probably be using code snippets, I added the syntax highlighter pygments. In fact here is the code for the highlight renderer being rendered in it: import mistune from pygments import highlight from pygments.lexers import get_lexer_by_name from pygments.formatters import html class HighlightRenderer(mistune.Renderer): def block_code(self, code, lang=None): if lang: lexer = get_lexer_by_name(lang, stripall=True) formatter = html.HtmlFormatter(style='monokai', noclasses=True) return highlight(code, lexer, formatter) return '\u003cpre\u003e\u003ccode\u003e' + mistune.escape(code) + '\u003c/code\u003e\u003c/pre\u003e' It goes without saying that this website will continue to be updated as I change my mind on a few things and wish to add more functionality. On my list of todos are: A switch between light mode and dark mode A way for people to fol","date":"2021-02-03","objectID":"/inspection-and-dissection-this-site/:0:0","tags":null,"title":"Inspection \u0026 Dissection: This Site!","uri":"/inspection-and-dissection-this-site/"},{"categories":["Computing","Tutorial"],"content":"As part of my degree I will have to write many words into many documents and submit them all as part of assignments. There was a time when we were young, stupid and thought that the peak of document formatting was WordArt, a drop shadow, and rainbow II. We would stick borders on our .pub files and feel superior if our PowerPoints had a dissolve transition. As we age past primary school we begin to conform to the world’s sensibilities that Comic Sans is not an adequate typeface and having every colour on the spectrum is a way to actually guarantee some of your text will be unreadable. Since we are forced to conform, we might as well do it to perfection, and you can only go so far in a tool that still thinks that word processors need a background ‘water droplet’ texture fill. What is this LaTeX and Why is it Not Pronounced Like That? If you want a tool that focuses on the nicest looking documents without caving into the design requirements of 7 year olds, you have to go back to a time before texture fills. Actually you have to go back to a time before computers could even show pictures. Nice looking documents (i.e had legible fonts) had to be obtained using specialised typesetters that cost as much as a house, either that or you’d use a literal printing press – this was the time in which TeX was created. LaTeX is built on TeX and is its more approachable step-son. LaTeX uses a mark-up language to design its document with the idea being that you focus on the content while the engine works out the best formatting. Isn’t This a Bit of a Faff? It depends on your personality. If you are happy with documents that are only adequate, then continue in your mediocrity. But for those of us who seek perfection and see neuroplasticity as a fundamental attribute, LaTeX offers a sterling reward for your efforts. How Good Does it Look? In the days when people weren’t made of pixels I spent the time making my own word template. It had wonderful serif headings; all the styles used Word’s tools so it did as much of the heavy lifting as possible; and all the font sizes were made just right. The results from Word are as follows: It looks okay. It looks far better than what some people create in Word. Even creating something okay looking feels like a hack though. Having nice paragraph spacing underneath headings required my to individually change all the line spacing options by hand. Anyone who has ever tried to implement code into a word document also knows that it will require you to sacrifice your firstborn. Now, for a LaTeX document: No time spent messing with templates, no changing font sizes, and it probably took me less time to make a document that looks even better. The best thing about LaTeX is that because everything is done programmatically, it can have an integration that is mind boggling. For instance, if you want to insert a segment of a python script in your document you dont actually need to copy and paste bits into your .tex file. You can just tell it where the script is, give it the line numbers and it will display and format it all for you. Where Do I Begin? This is for those of a Windows disposition First install a distribution of LaTeX called MiKTeX. MiKTeX has everything you need and will make the whole experience as easy as possible. Our code editor is called TeXworks, so open that up and lets write some LaTeX. LaTeX follows a syntax of \\command[option]{parameter} and we start a document off by selecting the type of document we want to create, and then starting and ending said document. There are a number of document classes but article is the one recommended for most documents. % Start of Document (Comments are denoted by a percentage at the start of the line) \\documentclass{article} \\begin{document} I'm so pretty \\end{document} And we get: Currently it looks like a note left by a serial killer with access to a typewriter so lets stick our name on it. The title, date, and author of your document all have dedicated tags in LaTe","date":"2021-01-06","objectID":"/the-laypersons-guide-to-latex/:0:0","tags":null,"title":"The Layperson’s Guide to LaTeX","uri":"/the-laypersons-guide-to-latex/"},{"categories":["Game Development","Project Release"],"content":"As part of a course we had to make a game in 2 days that involved random dice and be made as a Windows forms application with Visual Basic. So we had to make a game in something that was the furthest you could get from a game engine with a language I had never used before. But hey, Rogue was made in 1980 and the graphics had to be ASCII so it could be worse. The rest of the class generally stuck to the brief with 3 dice that you rolled and you got points for each dot. As you can see, its rather simple. Theres 4 picture boxes, 4 labels, 2 buttons and a listbox. Dice are rolled, the dots are added up and the score is added to the listbox. After 5 rolls the game ends and the player is given their total score. But to know how I added further features we need to look at how this prototype was made. Behind the prototype Dim Die1, Die2, Die3 As Integer Dim DicePoints As Integer Dim random As Random Dim RollCount As Integer = 0 So we have our variables declared in the convoluted VB way. Die1, Die2, and Die3 and the scores for the corresponding dice. DicePoints is the total of those 3 scores and rollcount keeps track of how many times the dice were rolled. Random is just an object we use to generate random numbers Private Sub tmrTimer_Tick(sender As Object, e As EventArgs) Handles tmrTimer.Tick 'Increments the load bar every tick random = New Random prbLoad.Increment(4) If prbLoad.Value = 100 Then ... Else 'Sets dice to random number when the timer ticks before the load is full Die1 = random.Next(1, 7) Die2 = random.Next(1, 7) Die3 = random.Next(1, 7) MatchImage(Die1, pbxDie1) MatchImage(Die2, pbxDie2) MatchImage(Die3, pbxDie3) End If On the board is a timer (inventfully called tmrTimer), it tick every 0.1s. Each tick it adds a bit onto the load bar at the bottom and randomizes the images on the dice. MatchImage is my own subroutine but all it does is take an integer and applies the correct face for it to whichever picture box I pass it. Once the bar gets to 100, the fun begins. If prbLoad.Value = 100 Then 'Adds the necessary points on the random dice when the load bar 'reaches 100 tmrTimer.Stop() prbLoad.Value = 0 RollCount += 1 DicePoints = Die1 + Die2 + Die3 We stop the timer ticking, we empty the load bar and we increment our roll counter before adding up all the spots on the dice, pretty simple. 'Adds Score to list lstScore.Items.Add(\"Roll \" \u0026 RollCount \u0026 \": \" \u0026 DicePoints) GameScore += DicePoints DicePoints = 0 Almost done, we add our points to the listbox with some formatting. Add the points to the total score for the game and then set it back to 0. If RollCount \u003e= 5 Then MsgBox(\"Your game score was \" \u0026 GameScore,, \"Game Over\") tmrTimer.Stop() btnStart.Enabled = False btnReset.Enabled = True End If Then we check whether they have reached the magic 5 rolls, if so we tell them their score and let them reset the game There is also some initialisation code that assigns images and there are event handlers that make the buttons work but this is the main logic. If you would like to see how that stuff works, you can find it at the github repo The Evolution The following won’t include too many code snippets since it is slightly more extensive (the rushed deadline also means it resembles a tin of Heinz spaghetti in a tumble dryer but we’ll keep that between us) Lets break this down. First we have a background that was shamelessly made in powerpoint. The rules, scores, and title are all labels. The bar on the right is made up of the same button and listbox items as before but with its properties edited to change colour, font and border style. The Rules have been changed to the following: The goal is to get as close to 21 points without going over There is a Player and a Dealer Each contestant has 2 dice The player goes first Each dice spot is worth 2 points If either the player or dealer goes over 21, they lose the game After the first roll, if the player has not gone bust, they can choose to ‘stand’ or ‘hit’ If they ‘hit’, the dice are ro","date":"2019-09-24","objectID":"/inspection-and-dissection-dice-jack/:0:0","tags":null,"title":"Inspection \u0026 Dissection: Dice-Jack","uri":"/inspection-and-dissection-dice-jack/"},{"categories":["Personal History","University"],"content":"We are currently in a scholarly purgatory. The time between July and September where you are attached to no institution, have no motivation and spend months fretting over how your past self will affect your future self (neither of which do anything for your current self) At 11 am I received my AS results via e-mail (how modern) and received AAB + Distinction. I am happy with this. It’s literally the second-best results I could have achieved at this point, but there is still an unsettling feeling around me. Something is gnawing away at me that prevents me from enjoying this now. During the summer months there isn’t a clear track to follow. No daily lessons, no scheduled assignments. Any events just seem to be smeared across what could possibly be discerned to be a date on close inspection. Nothing tangible appears to be happening in terms of progress for long term goals and as such there is no certainty. The longer the time between terms, the more in flux my future appears to be. I could always fall back on the ‘everything is fine’ mantra but then it feels as if I’m not striving towards what I want, or that I’m setting myself up for future regret about not putting in the effort where it needed to be. My mind runs through permutations of events, “someone probably got 3 As, they’re the ones who are going to receive your university offer” I feel myself fretting. I shouldn’t fret, but I do. I know people who failed they’re exams and they have to repeat a year of their life, they would kill to be in my situation. There are also people who seem like demigods to me who always get perfect scores along with having elaborate and incredible side projects. To some my worries will seem preposterous, to others I will seem I don’t know how lucky I am. Perhaps I’m both these things and perhaps I’m neither. But I’m not in their situation, I’m in my situation and can only act within the context of it. I want to achieve the best possible results I can, and I didn’t. I wasn’t far off; in fact, I was damn close but it doesn’t matter the distance. Out of the 216 combinations, I have satisfied 215, and the person inside me that wanted that last one remains dissatisfied. Will 1 mark affect whether I get an offer from my preferred university? Probably not. Probably not. Probably is the most terrifying word in the English language. There are no certainties in life, everything can be prefixed with the word probably. Yet we feel the need to stick it before only a few things, I presume this is to deliberately remind us of the very large improbability of the task we about to undertake and then what is the point of even specifying a chance in the first place? Perhaps a wandering mind is a good sign. I’m not struggling to finance my education through a side job or agonizing over planning to resist a year, I have a supportive family and am grateful to my past self for not screwing everything up terrible. So. Is everything fine? Probably. ","date":"2019-08-17","objectID":"/probably/:0:0","tags":null,"title":"Probably","uri":"/probably/"},{"categories":["Software Development","Making a Mobile App"],"content":" “Real programmers set the universal constants at the start such that the \u003euniverse evolves to contain the disk with the data they want .” xkcd 378 I wanted to add a gallery for users to be able to scroll through a variety of images so I did a quick google search about how I was going to go about it and I found react-native-image-view. In 6 lines of code and an array of Imgur links you can have a decent and working image gallery, job sorted! Right? In truth, it unsettled me. Was this cheating? Should I have created my own gallery? This package was better than anything I could come up with and something I wasn’t prepared to spend time on but I still felt like a part of the app was no longer mine. These sorts of ideas are things I have seen keep cropping up across everything I have done. I see other people’s enemy movement packages in Unity and magic code on StackOverflow that does everything you need, but are these a step to far? Are you losing what it means to actuallly create something? I’ve had all these questions and I think I will always question myself about the balance between hard coding everything from scratch and using magic boxes that do the gruntwork for you, but for now I have decided it’s about scope. It is not within the scope of this project to make an image gallery, it is just a small feature in an app that is for doing something else. The amount of time it would take to create something like this is time that could be spent doing something else that is specific to this app and does require the time spent on it. The way I intend to go about my projects is to learn what I need out of it and the crucial elements of it. If I’m making a game in Unity I would feel uncomfortable using someone else’s movement package, movement is such a core aspect of a game’s feel that I think I should have control over its nuance. Equally, I am ok with using an image viewer package as it means I can spend more time on bigger features and I will write my own image viewer if this one is no longer fit for purpose. This is a pet project and so it is really only my own motivation that is going to get it finished. The more time I spend on a time consuming feature, the less likely it is that the project will get finished. What I want out of this app is to come out the other side of it with something that is complete and to achieve this I need to pick and choose my battles. ","date":"2019-03-09","objectID":"/making-a-mobile-app-chapter-5/:0:0","tags":null,"title":"Making a Mobile App – Chapter 5: Go Your Own Way","uri":"/making-a-mobile-app-chapter-5/"},{"categories":["Software Development","Making a Mobile App"],"content":" “A common mistake that people make when trying to design something completely foolproof is to underestimate the ingenuity of complete fools.” Douglas Adams As this app will be for a business, it has to serve some purposes. First it has to present the company as a professional entity and also fit with its branding to provide not only a consistent experience but to also strengthen that companies place in your head, making them more likely to go to them rather than anyone else. Next it has to serve a point, it’s all well and good having some fancy spiel about company ethos and dedication to the craft but you want the user to have a reason to not only to install your app but to also keep using it. Finally, it has to be straightforward to use and foolproof. Well, nothing is foolproof proof. Well, nothing is foolproof. Branding The company colours were red, dark grey and white. It therefore makes sense for the app to only use the colours red dark grey and white, seems simple enough. Eww, a red pastel background with black text and mismatch white buttons and icons. It looks like a tomato soup can just exploded in the microwave. It’s all about complimentary colours and keeping things clean. The main colour of any app or website shouldn’t be something outrageous or garish, you want to present professionalism and minimalism. It’s good to have an accent colour that pops and has your brand stand out but if you end up with too much it is both nauseating and ugly. Ahh Much better. Character is nice but flamboyance is very easily annoying Purpose Like I say, your app needs a purpose otherwise what’s the point? As you can see the app act doesn’t revolutionise e-commerce but what it does do is act as a hub for everything involved with this company. You can click a button and google maps opens up with the locations for shops and restaurants already plugged in and ready to plan a route. You can call to book a table for a restaurant and there are galleries of menus and images to see what products and dishes are on offer (As a side note if you are making a ReactJS app in Expo then react-native-image-view is a godsend, it is a bit fiddly to get working but it means you can keep using Expo without having to delve into Android files and java SDKs). Foolproofness and Expandability To make your app accessible you have to ensure it is something easy to navigate and intuitive to use. Since this is my first mobile app I felt it was more of a case of making sure it doesn’t look out of place compared to the modern selection of mobile apps that supermarkets and resteraunts have on offer. It uses clear icons and a navigation bar at the bottom which is the current style. I wanted the user to not be confused upon opening the app but feel comfortable in using it and having a smooth experience. One of the brilliant things about React Native is the modules are not only easy to use but also offer a great deal of wiggle room to do what you want. For example, creating new screens is as easy as adding a function to that screens javascript add sticking a call to it in a main navigator script; this allows the room to expand quite quickly once you’ve got a baseline set giving scalability without what some projects have which is a feeling of trying to balance on one leg while trying to solve a rubik’s cube. ","date":"2018-12-10","objectID":"/making-a-mobile-app-chapter-4/:0:0","tags":null,"title":"Making a Mobile App – Chapter 4: Fast and Flash","uri":"/making-a-mobile-app-chapter-4/"},{"categories":["Software Development","Making a Mobile App"],"content":" “He attacked everything in life with a mix of extraordinary genius and naive \u003eincompetence, and it was often difficult to tell which was which.” Douglas Adams Setting up your React/Expo app is fairly straightforward but does require using the command line and some basic knowledge. You can find further detail here but I’ll summarise it now. Firstly you will need to download and install Node.js This is quite self explanatory as it has an actual wizard thus not requiring any command line interaction. Node is necessary for almost anything running local javascript. Next you’ll need to open the command line (found on windows by typing ‘cmd’ into the start menu) and run this command: npm install expo-cli --global You will then be asked to create an Expo account. Next you want no navigate to the directory where you want to store your app, this is done in windows by typing ‘cd’ followed by the directory. For example : cd C:\\Users\\\u003cYour Username\u003e\\Documents\\app Then run the commands: expo init my-new-project cd my-new-project expo start ‘expo start’ will be the command you run in the directory whenever you want to run your Expo app. I would also recommend starting with the ‘tabs’ template as it places some very useful files and means you don’t need to set up your own navigation bars. After you have ran the start command your browser will open up with a QR code. Scan the QR code in the Expo app (Google Play and iOS) and behold your first expo app. If you have experience in ReactJS, you can dive into the files with your text editor of choice (I prefer VS Code) and follow the instructions both in the app and consulting the documentation. If you don’t have experience, I would recommend using the Codeacademy course on ReactJS and Javascript. Also remember Google is your best friend, if you don’t know something don’t be afraid to google it. ","date":"2018-12-10","objectID":"/making-a-mobile-app-chapter-3/:0:0","tags":null,"title":"Making a Mobile App – Chapter 3: The Setup","uri":"/making-a-mobile-app-chapter-3/"},{"categories":["Software Development","Making a Mobile App"],"content":" “Don’t Panic.” Douglas Adams Finding the right tool for the job might be the most important thing I’ve learned \u003ein my short time in the world of development. The classic conversation \u003eeveryone who wants to get into development goes something like this: New Guy: “What programming language is best.” Pro: “There isn’t one.” New Guy: “Ok. Well what programming language should I use for X.” Pro: “It depends.” New Guy: “Fine. Well what should I use if I want to use X for Y.” Pro: “Whatever you are comfortable with.” New Guy: “What do you mean comfortable. I’ve never programmed before, anyway its not as if a language is some sort of sofa. Hey! Where are you going! you can’t just leave me here!” Google: “Hello.” New Guy: “What.” Google: “I’m your new best friend.” There are so many use cases and things you might want to develop that almost every instance of someone’s development is bespoke to what they want. This is something that you have to have experiences before you understand it which makes it more useful for a new developer to learn while doing rather than learning then doing. I had to find the right tools for what I wanted. My requirements for this app were based off of the time constraints I had, the lack of experience I had and the needs I felt the app had: Needed to be easy to port to different platforms. Had to be easy to integrate design and programming elements together. Needed to be able to make a professional and modern look. 4.Didn’t require low level access I settled on React Native with the Expo toolchain. I felt React was by far the best option I had. The only other options were using C# to make a Xamarin.Forms app which felt a bit like using a jackhammer to do teeth surgery or learning to use Java and Objective-C/Swift to do native development and use a completely different codebase, not only would I have to learn two languages and systems at once but also would need to fork out an initial cost of $99 for an apple developer account and develop on an Mac which I neither have nor want. I’m using Expo because it means the app will be fully cross platform and I don’t need to interact with any of the awkward SDK’s and system specific stuff. Expo also provides a neat app that you run on your Android or iOS which connects to a local server with the app files and allows you to run your app within their app, no compiling, no apple developer account, no Mac. This made testing incredibly easy. Expo also handles keystoring for Android and all that fancy stuff. ","date":"2018-12-09","objectID":"/making-a-mobile-app-chapter-2/:0:0","tags":null,"title":"Making a Mobile App – Chapter 2: A Bad Worker Blames His Tools","uri":"/making-a-mobile-app-chapter-2/"},{"categories":["Software Development","Making a Mobile App"],"content":" “I may not have gone where I intended to go, but I think I have ended up where I needed to be.” Douglas Adams Self-learning is often like trying to solve a maze, you follow the first path you see as far as you can. You reach a dead end. Then use what you learned in that path to give you an idea of where you could go next. I’ve been trying to find a new small project for a while now. I lacked the enthusiasm to spend time making games as I generally find it is something you need to take a running jump at with a fresh idea and be able to maintain that flair through the tidal wave of texture drawing, physics calculations and gameplay design. At some point I will go back to game development but I wanted something new. It was around this time that the opportunity came up to develop an app that may or may not be used for a local business. It had the vague deadline that let me experiment but gave me the pressure to finish it, it let me design something that was professional and would have to be used practically and it was something I’d never done before on a platform I had never developed for. ","date":"2018-12-09","objectID":"/making-a-mobile-app-chapter-1/:0:0","tags":null,"title":"Making a Mobile App – Chapter 1: A Few False Starts","uri":"/making-a-mobile-app-chapter-1/"},{"categories":["Personal History"],"content":" “It can be very dangerous to see things from somebody else’s point of view without the proper training.” Douglas Adams As I have said before, my first outreach into programming began with a GCSE Computer Science course which was cancelled after 7 months for various reasons. Those 7 months were possibly the best way to get a strong foundation of how programming languages work and the general structure in which they follow. The lessons consisted of us being taught a feature (how to do ‘if’ statements, how to call functions, how to cycle through array, etc) and then being given a series of tasks that we had to create a program to complete. The first and simplest of these tasks was Bob’s Change: \"\"\"Problem: Bob would like to buy some sweets, which cost 50p. Bob has some money but, unfortunately, Bob is only 3 and has no concept of money yet. Bob’s solution to this is to just hand over the whole of his change and hope the shopkeeper will sort it out for him. The function bobs_change takes in a number representing how much money Bob has handed over (in pence). It should print the amount of change owed if he has enough, or “Sorry Bob, you don’t have enough” if he is short.\"\"\" The program would then consist of if statements returning an answer after comparing the money Bob has to the price of a product. For those starting out programming, tests of these kind are a rewarding and fun way of practicing and reinforcing skills that you have learned. When learning a programming language I would strongly suggest using these sorts of tests after learning something new to ensure you both remember that skill better and to also give you a sense of progression as a new programming language can be hard to remember if it goes unused. The rest of the tasks we went through in that course can be downloaded here. And an entire assortment of more advanced tasks in many different languages can be found at codewars.com. Really learning a skill and then practicing it is all you need to further your knowledge of programming. Once you have a grasp of basic features, you can then start to make more advanced programs using numerous packages and modules that give you the tools to create graphics and deeper features. This was how I learned to program. It broke the stages up so I wasn’t daunted by the fact I only knew what for loops were and there was so much more in the language, I only focused on the task and I found with every task I got closer to an understanding where I could begin to realise what could be done and put me on good footing for future projects. ","date":"2018-06-27","objectID":"/where-i-began/:0:0","tags":null,"title":"Where I Began","uri":"/where-i-began/"},{"categories":["Project Release","Game Development"],"content":" “Human beings, who are almost unique in having the ability to learn from the \u003e experience of others, are also remarkable for their apparent disinclination to do so.” Douglas Adams Available at my project page Why Such a Simple Game? Because I wouldn’t have made a game otherwise. You need to affirm any skills in the most basic of games. Even if it kills you making a game so boring, at least you’ve made a game and proved that you can do it. It is an important lesson to learn that you will lose interest in a project and you will have to force yourself to carry on through the mid-development slog. To get around this you have to break a project into stages and set small goals. For instance, while making pong you may set yourself the goal of making a paddle that moves with keyboard inputs and can collide with things, next you might set the goal of making a ball that can bounce off of walls, next a working scoring system and so on. Another important thing to remember is you are almost definitely doing this as a hobby so don’t spend hours forcing yourself to do something you don’t want to do. Sometimes you do have to face it but it is almost always better leaving it and waiting until the next day to finish it when you have a clear head and can be bothered to continue. Burnout can often strike. Where did you start? First I only had the idea of making a game in unity, that’s it, so I watched a series by the excellent YouTube channel Brackeys that put me on the first step to knowing what I would have to do to make a game. I then decided on pong due to the reasons answered in the previous question. If I got stuck, I consulted the Incredible Unity Documentation, Google or follow a guide by Awesome Inc. Whilst the guide was necessary for some parts, specifically the ball bouncing, I made sure I did as much as I could with only the Unity documentation and Google searches as I often found on previous years of false starts I would just copy code and not learn anything whereas figuring out these things yourself means you are much more engaged and likely to remember it. How do you think the game turned out? As my first serious game, I am pleased. The game could be made more fun with more sporadic ball movements and a single player A.I. The paddle also glitches out slightly if you keep hitting into walls but it was meant to be nothing more than proving to myself that I can make a game in Unity. It has taught me the necessary skills and I have learned from the experience enough to move onto a slightly bigger project (not much bigger). Game development is a game in itself, you start off with a tutorial then make your way up increasingly difficult stages, you wouldn’t jump into a level 50 area when your only level 5 and you wouldn’t go straight to the glowing sea in fallout 4 when all you’ve got is a is vault jumpsuit and a baseball bat. ","date":"2018-06-23","objectID":"/inspection-and-dissection-ping/:0:0","tags":null,"title":"Inspection \u0026 Dissection: Ping! – My First Game in Unity","uri":"/inspection-and-dissection-ping/"},{"categories":["Game Development"],"content":"“It is a mistake to think you can solve any major problems just with potatoes.” - Douglas Adams","date":"2018-06-23","objectID":"/a-game-of-two-halves/","tags":null,"title":"A Game of Two Halves","uri":"/a-game-of-two-halves/"},{"categories":["Game Development"],"content":" “It is a mistake to think you can solve any major problems just with potatoes.” -Douglas Adams The first videogame I ever played was Crash Bandicoot for the PlayStation One. I spent many an hour running my little orange friend across precarious ledges and away from Raiders of the Lost Ark levels of boulderage. As is usually the case with videogames during your early childhood, I imagine I didn’t get anywhere near as far as I think. I will never know though as not long into my tenure in videogames I suffered my first casualty. My PS1 and all its saves froze in a pixellated mess on my screen and in the words of John Cleese, “ceased to be”. As I played more advanced and thought-provoking games I wondered what it would take to make my own and after numerous false starts I finally made my first game (sort of). The game , Fallen Stars, was made using [Construct 2] (https://www.scirra.com/). Construct is the piece of software that makes making games so easy you can create your first game within a day, rather than programming scripts and dealing with forces you utilise an incredibly powerful ‘drag and drop’ interface with the ability to create some pretty professional looking software. I recommend watching 3kliksphilip’s Game Making Journey for an almost videogame origin story as well an explanation of what these types of tools can do. I would thoroughly recommend those who don’t know where to begin to give these prototyping software ago as it is by far the way to get the quickest turnaround of a videogame from concept to executable. Following my escapades in construct my game making took back seat as I switched to learning more programming languages past the rudimentary python skills gained at age 14 in school and final exams loomed in summer 2018. I furthered my knowledge of python and used websites such as Codeacademy to pickup the basics of JavaScript and C#; this is very useful in showing you what all different types of languages there are and the uses of them. I would like to stress at this moment I only have a basic knowledge of these thee languages. Instantiation is as advanced as it gets at the moment, just wanted to reassure anyone wanting to learn to program that you don’t need to be an expert at all these to get a grasp of what programming is like or in order to get a good base for game development. Fast-forward to now, summer 2018, and I have time for game development again and I wanted it to more closely link to my programming and software work. I chose Unity as my editor of choice for three reasons. It allows me to use the C# skills I had already put the effort in learning. It seems a lot more accessible than other engines as the structure seems more straightforward and you can get almost all features for free. It is versatile. You can make both 2D and 3D games for pretty much all platforms. It is with Unity that I went on to make my next game Ping. ","date":"2018-06-23","objectID":"/a-game-of-two-halves/:0:0","tags":null,"title":"A Game of Two Halves","uri":"/a-game-of-two-halves/"},{"categories":["Personal History"],"content":" “The Guide says there is an art to flying”, said Ford, “or rather a knack. The knack lies in learning how to throw yourself at the ground and miss.” -Douglas Adams I always had a desire to look under the hood of the video games and software I spent so much time on growing up but I was greeted with a rainbow of semi-colons and syntax before immediately closing the lid of my laptop and retiring back to being merely an end-user. It took until a computer science course at age 14 in my school before I was finally able to understand just the basics of what I could do with a keyboard. The language was python and the atmosphere wasn’t me alone in a bedroom at a monitor scratching my head in fury, it was a class effort. None of us understood what was going on and it made it all the more accessible. In my current exploration of programming languages I see far too many people telling those learning to code of how you ‘must’ do this and I watch videos of monotonous commentators who half explain some concepts that fly over newcomers heads. I feel the steep learning curve that programming has is a mighty feat without an actual teacher or a series of quality YouTube videos that only come around once in a blue moon. This blog will be a documentation of my journey from having basic grasps of a few programming languages through a higher education computer science course and my video-game creating antics on the side. It will detail my learning experiences and may help anyone else wanting to learn what the pathway is like. ","date":"2018-06-23","objectID":"/the-first-line-of-code/:0:0","tags":null,"title":"The First Line of Code","uri":"/the-first-line-of-code/"},{"categories":null,"content":"Here is a list of all my projects that are available on the internet newcastle-bst ","date":"0001-01-01","objectID":"/projects/:0:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Release Date: 10th May 2021 This is a BibTeX style to be used in conjunction with the LaTeX documents I produce at University. The purpose of the style is to more closely follow Newcastle University’s referencing guidelines. CTAN GitHub Pepys ","date":"0001-01-01","objectID":"/projects/:0:1","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Release Date: 30th May 2021 “It is rightly made for those who love to document their daily life events” - FOSSBytes Pepys is a journaling application that utilises markdown for writing and storing the journal entries. It supports a variety of export formats. The biggest project I had released at the time one of my biggest learning experiences. Windows Linux Source Code Type or Die ","date":"0001-01-01","objectID":"/projects/:0:2","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Release Date: 5th March 2021 Made in 5 days for the Newcastle University Computing and Technology Society (NUCATS) Game Jam, in which it received 3rd place. It is a top-down zombie wave shooter where it’s not your aim that matters but how fast you can type. Type or Die by lukebriggs Dice-Jack ","date":"0001-01-01","objectID":"/projects/:0:3","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Release Date: 23rd September 2019 Made in 2 days as a mini-project for a course. Used as a way to get to grips with windows forms and learn some Visual Basic .NET. Just so happens to also be the first game of mine with a computer controlled player. Source Code Ping! ","date":"0001-01-01","objectID":"/projects/:0:4","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Release Date: 23rd June 2018 A remake of the classic Pong game. This was the first game I programed in Unity and as a result is pretty simple and isn’t very fleshed out but a vital learning experience in how to make a video-game as well as the the nuances and functions of the Unity Editor. Fallen Stars ","date":"0001-01-01","objectID":"/projects/:0:5","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Release Date: 16th April 2017 This was my first attempt at a video-game and was done well before any other projects. It was made in Construct 2 so no actual programming was involved but it was the first time I had designed a game from scratch and was a vital learning experience. It was also a game I did very little of the art for and relied heavily on opengameart.org which is a great source of assets for those who are more focused on programming than art. The game itself is an asteroids clone with a cartoon atmosphere and explosion animations that I was far too proud of at the time. It even has a (barely) working high score system. ","date":"0001-01-01","objectID":"/projects/:0:6","tags":null,"title":"Projects","uri":"/projects/"}]