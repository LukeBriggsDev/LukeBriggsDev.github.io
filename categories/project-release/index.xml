<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Project Release - Category - Luke Briggs</title>
        <link>https://www.lukebriggs.dev/categories/project-release/</link>
        <description>Project Release - Category - Luke Briggs</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@lukebriggs.dev (Luke Briggs)</managingEditor>
            <webMaster>contact@lukebriggs.dev (Luke Briggs)</webMaster><lastBuildDate>Sun, 15 Aug 2021 15:46:07 &#43;0100</lastBuildDate><atom:link href="https://www.lukebriggs.dev/categories/project-release/" rel="self" type="application/rss+xml" /><item>
    <title>Calmer Internet</title>
    <link>https://www.lukebriggs.dev/calmer-internet/</link>
    <pubDate>Sun, 15 Aug 2021 15:46:07 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/calmer-internet/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/calmer-internet/banner.svg" referrerpolicy="no-referrer">
            </div>
<p>A web extension that hides the elements of web pages that are best off hidden.
Many sites are designed to suck time away from you by showing you things that are interesting enough to keep you scrolling but offers no value.</p>
<p>This extension strips away all these comments, recommendations and promotions leaving you with just the content you have specifically asked to receive.</p>
<h2 id="youtube-elements">Youtube elements:</h2>
<ul>
<li>Home links</li>
<li>Explore links</li>
<li>Trending link (mobile)</li>
<li>Comments</li>
<li>Redirect home page to subscriptions</li>
<li>Watch next section</li>
<li>Live Chat</li>
</ul>
<h2 id="twitter-elements">Twitter elements:</h2>
<ul>
<li>Trending bar</li>
<li>Explore link</li>
<li>&lsquo;Who to Follow&rsquo; bar</li>
<li>Topics bar</li>
</ul>
<h2 id="instagram-elements">Instagram elements:</h2>
<ul>
<li>Explore links</li>
<li>Explore people links</li>
<li>Comments below posts in feed</li>
<li>Comments in posts</li>
</ul>
<p><a href="https://github.com/LukeBriggsDev/calmer-interne"></a>
<a href="https://chrome.google.com/webstore/detail/calmer-internet/eafehkefjngkemmnfplgddemgpcjlldb"></a>
<a href="https://addons.mozilla.org/firefox/addon/calmer-internet/"></a></p>
]]></description>
</item><item>
    <title>Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University</title>
    <link>https://www.lukebriggs.dev/full-release-newcastle-bst/</link>
    <pubDate>Sat, 10 Jul 2021 10:33:04 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/full-release-newcastle-bst/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/full-release-newcastle-bst/bibtex.png" referrerpolicy="no-referrer">
            </div><p>A couple of months ago I released <a href="/the-laypersons-guide-to-latex" rel="">a blog post about LateX</a>.
At the bottom of the post I made quick reference to a BibTeX style I had created for the referencing used by Newcastle University.
The style had a few bugs and was quite hard to find it but it was left dormant while I made some other software and focused on work.</p>
<p>I am now pleased to say that I have spent some work polishing it up, fixing some issues, and giving it a proper release.
It&rsquo;s even on <a href="https://ctan.org/pkg/newcastle-bst" target="_blank" rel="noopener noreffer">CTAN!</a>.
If you are a student and notice any issues, please report them on <a href="https://github.com/LukeBriggsDev/Newcastle-BibTeX/issues" target="_blank" rel="noopener noreffer">GitHub</a></p>
<h1 id="release-notes">Release Notes</h1>
<h2 id="newcastle-bst-harvard-referencing-style-as-recommended-by-newcastle-university">newcastle-bst: Harvard referencing style as recommended by Newcastle University</h2>
<p>This package provides a <a href="https://ctan.org/pkg/BibTeX" target="_blank" rel="noopener noreffer">BibTeX</a> style to format reference lists in the <a href="https://libguides.ncl.ac.uk/managing/harvard" target="_blank" rel="noopener noreffer">Harvard at Newcastle</a> style recommended by Newcastle University. It should be used alongside <a href="https://ctan.org/pkg/natbib" target="_blank" rel="noopener noreffer">natbib</a> for citations.</p>
<h3 id="installation">Installation</h3>
<p>The required style file is available from <a href="https://github.com/LukeBriggsDev/Newcastle-BibTeX" target="_blank" rel="noopener noreffer">GitHub</a> and <a href="https://ctan.org/pkg/newcastle-bst" target="_blank" rel="noopener noreffer">CTAN</a>. You can use the style by copying it into your working directory containing your <code>.tex</code> file. You can also add it to your bst directory in your tex path to use it without having to copy it over each time.</p>
<h3 id="using-the-style">Using the style</h3>
<p>To use the style include this in your preamble:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex"><span class="k">\usepackage</span><span class="nb">{</span>natbib<span class="nb">}</span>
<span class="k">\usepackage</span><span class="na">[UKenglish]</span><span class="nb">{</span>isodate<span class="nb">}</span>
<span class="k">\bibliographystyle</span><span class="nb">{</span>newcastle<span class="nb">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Also remember to specify your <code>.bib</code> file at the end of the document:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex"><span class="k">\bibliography</span><span class="nb">{</span>file<span class="nb">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The easiest way to create .bib files for this style is through exporting entries from a reference manager such as <a href="https://www.mendeley.com/" target="_blank" rel="noopener noreffer">Mendeley</a>.
However, some parts are not available through this (such as titleaddon for computer programs).
If you notice any discrepancies between generated references and the recommended styles then please raise this on <a href="https://github.com/LukeBriggsDev/Newcastle-BibTeX/issues" target="_blank" rel="noopener noreffer">GitHub</a></p>
<h3 id="license">License</h3>
<p>Copyright 2021 Luke Briggs
This work consists of the documented <code>newcastle.bst</code> file.</p>
<p>The text files contained in this work may be distributed and/or modified under the conditions of the LATEX Project Public License (LPPL), either version 1.3c of this license or (at your option) any later version.</p>
<p>This work has had no input from Newcastle University and is done entirely in order to help other students create bibliography quicker.</p>
<p>This work is ‘maintained’ (as per LPPL maintenance status) by Luke Briggs.</p>
]]></description>
</item><item>
    <title>Inspection and Dissection: Pepys - A Straightforward Markdown Editor</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-pepys/</link>
    <pubDate>Mon, 31 May 2021 16:47:38 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-pepys/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/inspection-and-dissection-pepys/BookLogoLargeWhite.svg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>The product page is available <a href="/pepys" rel="">here</a></p>
</blockquote>
<h1 id="brief-description">Brief Description</h1>
<p>Pepys is a GUI journaling application built using Python bindings for the Qt framework.
It is available as an installer for Windows and a Flatpak on Linux.</p>
<h1 id="background">Background</h1>
<p>I started journaling around February last year, it was probably the most prescient thing I have ever done.
It wasn&rsquo;t long before we all went into self-imposed isolation and journaling provided a good way to express my thoughts.</p>
<p>My first posts were made in one big Word document.
Journals need to be as future-proof as possible, and I thought at the time that since entire governments are probably reliant on MS Word that it won&rsquo;t be going away any time soon.
It wasn&rsquo;t a good experience though.
Having to type the date each time was tiresome, and I thought it would be a formatting mess should I use an Operating System without MS Word (something which would later happen when I spent several months using Linux).</p>
<p>I next moved on to <a href="https://notion.so" target="_blank" rel="noopener noreffer">Notion</a>.
An excellent productivity application that can be used to do all sorts from notes to spreadsheets to databases.
It&rsquo;s template, tagging and calendar features made it a great prospect for writing my journal in.
The entries were made in Markdown so would be viewable on any computer for as long as we still used ASCII and Unicode, seems pretty future proof.
The trouble was, it made journal writing a chore.
To write an entry I&rsquo;d have to open up this electron application that took an <em>age</em> to open and slowly click through web links, waiting for pages to load, before I could get to writing entries.
I wanted a native application that would allow me to write journal entries in markdown, with a date-based file chooser.
I found no application that fitted all this criteria that worked on Linux and Windows, they all seemed Mac only (I am envious of the great ecosystem Apple cultivates among its development community).
So I took it upon myself to write my own.</p>
<h1 id="a-rocky-start">A Rocky Start</h1>
<p>The first idea for a Journal application first came to me in June 2020 but it would take nearly a year before I would find the time and the courage to actually start it.</p>
<p>My only experience with a GUI application that wasn&rsquo;t made in a dedicated game engine was <a href="/inspection-and-dissection-dice-jack" rel="">Dice-Jack</a> which was a version of blackjack that used Dice instead of cards and was made over a few days for an assignment as part of my Sixth Form Computing course.
I knew I couldn&rsquo;t use dotNet since I wanted it to be able to run on Linux as well as Windows.
My next thought was Java, since that was the language I was learning at University at the time and seemed to fit all my requirements.</p>
<p>I managed to get a very early text editor working in Java.
At that point, the idea was to have all the styling done in real time as you typed.
For example, if I typed a <code>#</code> then I would set the font size you type in to that of a title.</p>
<p>I was running into issues that were perfectly fixable but I was never truly comfortable in Java.
I will absolutely use Java in the future but it just didn&rsquo;t seem right with this project.
With Java I had the choice between the ancient swing and JavaFX.
I have never got to grasps with the whole split GUI framework where some bits are in code and some bits are in XML files.
All the GUI frameworks are going this way so I will have to get my head around it eventually but this was not the project for this.</p>
<h1 id="a-walk-in-the-dark">A Walk in the Dark</h1>
<p>After bouncing of Java frameworks I had to go with what I know, Python.
Python was the first language I learned and I&rsquo;ve been using it for coming up 4 years now.
The big players in the Python GUI game is Gtk, Qt, wxWidgets, and Tkinter.
Tkinter and wxWidgets are the more simple of the four with the majority of applications being built in either Gtk or Qt.
In the end I settled with Qt because it seemed to have better look and feel across different systems, and Gtk seemed to want me to use build systems that I was unfamiliar with.
I first broke ground with the first <a href="https://github.com/LukeBriggsDev/Pepys/commit/66f42549e53db7a43224d317be2191b2000e0d94" target="_blank" rel="noopener noreffer">git commit</a> being pushed at 20:29 BST on April 1st.
This was the first commit to the repo that would become the final release, this came at the end of several weeks of the aforementioned bouncing around.</p>
<h2 id="syntax-highlighting">Syntax Highlighting</h2>
<figure>

<figcaption>An early version of the edit pane</figcaption>
</figure>
My primary focus was in getting markdown source highlighting in the text window.
Things like bold, italic, and strike-through came rather quickly but became incredibly slow with large amounts of text.
My initial solution to the syntax highlighting was a naive one.
I would be performing regex searches and applying text character formatting across the document on each key press.
The approach was okay on small documents, but the larger the document the more text would be searched through and it would become impossible to type.
The first breakthrough came when I discovered a Qt widget called QSyntaxHighlighter which provided methods that would allow text to be broken up into 'blocks'.
I put all my regular expressions into a QSyntaxHighlighter and used its blocking mechanism to allow for typing to not be slowed down on large documents.
<h2 id="html-preview">HTML Preview</h2>
<figure>

<figcaption>An early version of the view pane</figcaption>
</figure>
Alot of the early work went into refining my markdown regular expressions, making sure they formatted the correct parts and matched the output reasonably.
It wasn't long before I had to turn my attention to the HTML preview.
The preview pane was initially just a QTextBrowser that supported a limited subset of HTML.
When the preview button was clicked the markdown would be converted to html using [mistune](https://mistune.readthedocs.io/en/latest/).
I had used mistune previously on the [first iteration of this website](/inspection-and-dissection-this-site) so a lot of that could be copied and pasted from my work there.
<p>The fact that only a subset of HTML was supported soon became an issue and I had to switch the preview to a full on web engine (the reason why the application is so large).
The web engine was such a double edged sword.
Without it: previews wouldn&rsquo;t match exports, math equations wouldn&rsquo;t be supported, many markdown elements couldn&rsquo;t be rendered properly (tables, inline html).
But with it, the application swells in size to over 100MB download and even larger when fully installed.
I wish I could resolve this alas I am too tired and too unskilled to be able to implement a solution.</p>
<h2 id="the-killer-feature">The Killer Feature</h2>
<p>It was around this time that I went into exploring <a href="https://pandoc.org/" target="_blank" rel="noopener noreffer">pandoc</a>.
I was amazed by its power and I will undoubtedly utilise it in many future projects.
Pandoc is a program written in haskell that uses its own flavour of markdown to provide a <em>huge</em> amount of outputs for document conversion.
I knew I had to implement this in some way to provide some way of providing a wide range of export option.
Then I will have truly realised my need of having entries been in a future proof format, why have 1 future proof format when you can have every format under the Sun?</p>
<h2 id="calendar-file-selector">Calendar File Selector</h2>
<p>I knew that my main method of interacting with files should be through a calendar.
Qt provides a reasonably good calendar widget that saved alot of time.
The way I keep track of the files in a user&rsquo;s journal is by having a very rigid folder structure which Pepys gets pointed to.
The journal directory has a structure of <code>YYYY\MM\DD\YYYY-MM-DD\YYYY-MM-DD.md</code> This makes it very easy to search for all the entries by date.</p>
<h2 id="release">Release</h2>
<figure>
<table>
<tr>
<th>

</th>
<th>

</th>
<th>

</th>
</tr>
</table>
<figcaption>A comparison of different logos I went through</figcaption>
</figure>
<p>I have went into my woes over releasing software <a href="/flatpak-instructions-not-included" rel="">here</a> but it is safe to say that this is an are where I learned an awful lot.
In the end Pepys was released on Linux via flatpak and on Windows via an NSIS installer <a href="https://github.com/LukeBriggsDev/Pepys/releases/" target="_blank" rel="noopener noreffer">available to download on GitHub</a>.
There was no Mac release because I do not own a Mac no have sufficient experience with Macs to be comfortable with creating installers and sufficiently testing them for correctness.</p>
<h1 id="a-retrospective">A Retrospective</h1>
<p>This whole process has been the longest I have ever spent on a project, it was probably the largest project I have ever made, and there were alot of firsts.
It was the first application I made that wasn&rsquo;t a game, it was the first proper GUI application I have made, and it was the first time I had to make installers by hand.
The process was arduous at times and I felt like giving up at some points.</p>
<p>I sit here now after releasing it and I think &ldquo;if I&rsquo;d only done this&rdquo; or &ldquo;it would be so much better if&hellip;&rdquo; but I can&rsquo;t think like that.
If I had spent as long as possible on each feature till it was perfect then the software would never be released.
I have learned that software development is an iterative process in 2 ways.
The first way is in relation to an individual piece of software.
You develop the software over time, slowly improving and adding until a finished product stumbles over the finish line.
The second way is at a macroscopic level.
Each huge project your begin, each journey you embark on, brings a new iteration on what went before.
The next GUI project I make <em>will</em> be better.
The next installer I make <em>will</em> be better.
And this excites me.</p>
<p>I suppose it has taken me until the end of my first year of University to understand what learning is really about.
Learning isn&rsquo;t about passing tests, although schools may tell you otherwise.
Learning isn&rsquo;t even about knowing stuff, that is just a by-product.
Learning is about being better, about knowing you <em>will</em> be better, and about being excited about that.
I am excited about what I will create next, how I will iterate on what I have learned, and how I can surprise myself.</p>
<h1 id="special-thanks">Special Thanks</h1>
<p>All of this took an awful lot of effort so I would like to give special thanks to the following people and projects for there valuable insights.</p>
<dl>
<dt><a href="https://gitlab.gnome.org/World/apostrophe" target="_blank" rel="noopener noreffer">Apostrophe</a></dt>
<dd>An excellent markdown editor that shows how to make a properly good writing experience and led me down the Pandoc path. Also inspired some of the regex used.</dd>
<dt><a href="https://github.com/hermitdemschoenenleben/linien" target="_blank" rel="noopener noreffer">Humboldt University Optical Metrology Group</a></dt>
<dd>Without whom I&rsquo;d still be wrestling with compilers in Flatpak</dd>
<dt><a href="https://akaru.me/" target="_blank" rel="noopener noreffer">Lucy Marsden</a> (<a href="https://github.com/noneuclideanmotion" target="_blank" rel="noopener noreffer">Github</a>)</dt>
<dd>Who provided a second set of eyes and motivated me to actually get stuff done.</dd>
<dt><a href="https://github.com/FedoraQt/adwaita-qt" target="_blank" rel="noopener noreffer">Jan Grulich</a></dt>
<dd>For showing how to implement Adwaita colours in Qt</dd>
</dl>
]]></description>
</item><item>
    <title>Introducing Pepys: A straightforward markdown journal</title>
    <link>https://www.lukebriggs.dev/pepys/</link>
    <pubDate>Mon, 31 May 2021 16:47:38 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/pepys/</guid>
    <description><![CDATA[<p></p>
<blockquote>
<p>&ldquo;It is rightly made for those who love to document their daily life events&rdquo;
<br> <a href="https://fossbytes.com/document-activity-pepys-journal-app-linux" target="_blank" rel="noopener noreffer">- FOSSBytes</a></p>
</blockquote>
<p>Pepys is a journaling application that utilises markdown for writing and storing the journal entries</p>
<ul>
<li><a href="#features" rel="">Features</a>
<ul>
<li><a href="#markdown-highlighting" rel="">Markdown Highlighting</a></li>
<li><a href="#inbuilt-html-preview" rel="">Inbuilt HTML Preview</a></li>
<li><a href="#markdown-shortcuts" rel="">Markdown Shortcuts</a></li>
<li><a href="#date-oriented" rel="">Date Oriented</a></li>
<li><a href="#dark-theme" rel="">Dark Theme</a></li>
<li><a href="#future-proof" rel="">Future Proof</a></li>
</ul>
</li>
<li><a href="#downloads" rel="">Downloads</a></li>
<li><a href="#source-code" rel="">Source Code</a></li>
</ul>
<h1 id="features">Features</h1>
<h2 id="markdown-highlighting">Markdown Highlighting</h2>

<p>Pepys provides highlighting for key Markdown syntax in a clean and focus-driven design. Bold is bold, code is clear from text, and tags and urls don&rsquo;t clutter your view.</p>
<h2 id="inbuilt-html-preview">Inbuilt HTML Preview</h2>
<p></p>
<p>With a click of a button your markdown is rendered with links all clickable, images viewable, and even iframes are interactable.</p>
<h2 id="markdown-shortcuts">Markdown Shortcuts</h2>
<p></p>
<p>Pepys features tools to add tables and images quickly and easily. No more fiddling with alignment or hassles with relative directories.</p>
<h2 id="date-oriented">Date Oriented</h2>
<p></p>
<p>Pepys is for making journal writing simple. Organising your entries into dates is automatic. There is no file selector, instead you pick a date and write the entry for that date. Clicking a date with an existing entry will show that entry.</p>
<p>You also have the ability to favourite specific dates and add tags.</p>
<h2 id="dark-theme">Dark Theme</h2>
<p></p>
<p>Whether you write in day or night, Pepys will make sure that it is as comfortable as possible</p>
<h2 id="future-proof">Future Proof</h2>
<p></p>
<p>Pepys stores all your entries as plain text files in a YYYY/MM folder structure with a YYYY-MM-DD.md name format. This means that all your entries themselves will be viewable forever in any text editor that will come along.</p>
<p>Pepys also uses pandoc syntax, with support for pandoc conversions to other formats. This means that all your entries can be converted completely to HTML, PDF, LaTeX, Microsoft Word, EPUB, and more!</p>
<h1 id="downloads">Downloads</h1>
<p><a href="https://flathub.org/apps/details/dev.lukebriggs.pepys" target="_blank" rel="noopener noreffer">Linux</a></p>
<p><a href="https://github.com/LukeBriggsDev/Pepys/releases" target="_blank" rel="noopener noreffer">Windows</a></p>
<h1 id="source-code">Source Code</h1>
<p>The source code is available on <a href="https://github.com/LukeBriggsDev/Pepys" target="_blank" rel="noopener noreffer">Github</a></p>
<h1 id="featured-in">Featured in</h1>
<p>FossBytes - <a href="https://fossbytes.com/document-activity-pepys-journal-app-linux/">https://fossbytes.com/document-activity-pepys-journal-app-linux/</a>
ConnectWWW.com - <a href="https://connectwww.com/pepys-markdown-journal-application/62941/">https://connectwww.com/pepys-markdown-journal-application/62941/</a></p>
]]></description>
</item><item>
    <title>Where Hugo I Go</title>
    <link>https://www.lukebriggs.dev/where-hugo-i-go/</link>
    <pubDate>Mon, 03 May 2021 20:06:07 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/where-hugo-i-go/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/where-hugo-i-go/banner.png" referrerpolicy="no-referrer">
            </div><p>As you are probably aware, I have redecorated. I said in a <a href="/inspection-and-dissection-this-site" rel="">previous post</a> that my reason for making my own site in the first place was as a central hub to point people to all the things that I do. Despite the fact that from the outside it looks like I haven&rsquo;t done a whole lot since, behind the scenes I have my biggest project yet in development (check out my <a href="https://github.com/lukebriggsdev" target="_blank" rel="noopener noreffer">GitHub</a> if you want a sneak preview of that). It was while working on my project that I realised that I should have a site that requires my to ssh into a VPS and pull a git repository every time I want to add a post.</p>
<h2 id="technology">Technology</h2>
<p>Behind the scenes, the site is hosted on GitHub Pages. The site is generated using a static site generator called <a href="https://gohugo.io/" target="_blank" rel="noopener noreffer">Hugo</a> with a <em>slightly</em> tweaked version of the <a href="https://themes.gohugo.io/loveit/" target="_blank" rel="noopener noreffer">LoveIt</a>.</p>
<p>With a static site I can remove server costs completely, have a better looking site, and make it easier to add new posts.</p>
<p>Because each post is now a document rather than a database field, you can also stick <code>index.md</code> at the end of any post to get the raw markdown for that post. You are also able to view the source for the site at <a href="https://github.com/lukebriggsdev/lukebriggsdev.github.io" target="_blank" rel="noopener noreffer">my GitHub</a></p>
<h2 id="new-logo">New Logo</h2>
<p></p>
<p>Along with the revamped site, I have created a new logo to go with it; it is probably the best looking thing I have ever drawn. The logo takes inspiration from the IBM PCJr with a few more rounded corners, thinner bezels, and a more minimalist feel.</p>
<p>It was made in <a href="https://inkscape.org" target="_blank" rel="noopener noreffer">Inkscape</a> with the basic shapes and the font is Roboto Mono.</p>
]]></description>
</item><item>
    <title>Inspection and Dissection: Type or Die</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-type-or-die/</link>
    <pubDate>Fri, 05 Mar 2021 12:11:40 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-type-or-die/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/21/cover.png" referrerpolicy="no-referrer">
            </div><blockquote>
<p><a href="https://lukebriggs.itch.io/type-or-die" target="_blank" rel="noopener noreffer">Itch.io Link</a></p>
</blockquote>
<p>For the past 5 days I have done what I have failed to do many times before,
complete the process of making a game.</p>
<p>The game was for the NUCATS Game Jam. NUCATS is the Newcastle University Computing
and Technology Society. It was made in Unity (with great help from <a href="https://www.youtube.com/channel/UCYbK_tjZ2OrIZFBvU6CCMiA" target="_blank" rel="noopener noreffer">Brackeys</a>),
and it was really the first reasonably sized game I&rsquo;ve made. The only other thing I&rsquo;ve ever made in Unity was <a href="/8" rel="">Ping</a>
which, as the name suggests, was a pong clone.</p>
<p>Type or Die is a top-down zombie shooter where it is not about how good
your aim is, but how fast you can type. Waves of zombies come at you in all directions, with the direction
they come from determining what key to press to shoot at them (e.g a zombie coming from the top right would be shot at
using the &lsquo;p&rsquo; key).</p>
<p></p>
<p>The game jam has come in a time between some pretty busy weeks so I have surprised myself by actually getting a
finished game out. I even contemplated not taking part at all after the first day because I felt I just wouldn&rsquo;t be able to do it.
I started off (as optimistic idiots often do) full of goals with zero plans. Every step of the way I was decreasing scope
to match my skill and enthusiasm, and its where those paths crossed that the game was made. I knew that the most complex
thing I could make in the time with limited skill was a 2d, single-screen game. Guns are an easy way to make the mundane exciting,
so the game became a shooter, and wanting to have the computer do all the work for you meant that it became a wave shooter for
replayability.</p>
<p>Every waking moment from Monday to Thursday was spent either watching <a href="https://www.imdb.com/title/tt1632701/?ref_=fn_al_tt_1" target="_blank" rel="noopener noreffer">Suits</a>
or making this game, and the sheer intensity of such an endeavour in the middle of some pretty hectic University team projects
made me realise one thing, I will probably not make another game for a very long time. If you have a gander at my <a href="/projects" rel="">projects</a> page
you will see that all of them are game, so you may think that I really enjoy game-making. But in retrospect I think I only made games as
an outlet for programming rather than an outlet for artistic ideas. Creation is a painful process, so you have to see the purpose in it.
As much as I am proud of what I achieved with each of the games I made, I can&rsquo;t see them as providing a service.</p>
<p>My perspective on games has completely changed in the past year, I place a huge value on the incredible narrative experiences offered by the likes of &lsquo;God of War&rsquo; or
&lsquo;The Beginners Guide&rsquo;, these are games made by people with something to say and the skill to say it. There is certainly a place for arcade
shooters, but if I don&rsquo;t feel passionate about the things I create then I will never see them as worth the time I put into them.</p>
<p>Type or Die marks the end of the 4-year-long adventure that started this whole blog off, I suppose it is fitting that it should end with another
top down arcade shooter. The game is pretty fun, the zombie death animations are my favourite part (also an original theme made by my musically inept hand).</p>
<p>More projects lie on the horizon, and the times they are a changin'.</p>
]]></description>
</item><item>
    <title>Inspection &amp; Dissection: This Site!</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-this-site/</link>
    <pubDate>Wed, 03 Feb 2021 16:39:25 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-this-site/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/12/index.png" referrerpolicy="no-referrer">
            </div><p>Look at me with a fancy website. We&rsquo;re about to get meta as we discuss how this site you&rsquo;re exploring right now came to be.</p>
<h1 id="why-have-a-website">Why have a website?</h1>
<p>I want something to point to when someone asks &lsquo;so what have you done?&rsquo;. I also need it for when I ask myself the same thing. Sometimes I wonder how much I have actually done in my spare time, and a site like this helps me to remember that I haven&rsquo;t wasted <em>all</em> of my spare time on Minecraft.</p>
<h1 id="why-make-your-own-website">Why make your own website?</h1>
<p>Here in Computer Science land: men are real men, women are real women, and small furry creatures from Alpha Centauri are real small furry creatures from Alpha Centauri; thanks to these huge revelations in the field of existentialism we take it upon ourselves to walk the road already taken.</p>
<p>The real reason is I ought to have side-projects, more than I used to. I have more time, not just because of COVID but also because Computer Science is now the only academic subject I have to pay attention to, whereas most of my time in Sixth Form was spent on Maths and Further Maths. It made reasonable sense for the first project to be a platform for my other projects and this is that platform.</p>
<h1 id="where-did-you-start">Where did you start?</h1>
<p>I knew I wanted to make a website with a Flask back end for 2 reasons:</p>
<ol>
<li>
<p>I wanted a back-end that could enable things like logging in and writing blog posts all within the site.</p>
</li>
<li>
<p>I vehemently hate JavaScript and would prefer to do as much with python as possible. In fact this whole site doesn&rsquo;t have any JavaScript. You can inspect element and see that everything front end is done through CSS and HTML; this is certain to change but I will hold out for as long as I can.</p>
</li>
</ol>
<p>For the uninitiated, websites have 2 parts: A front end and a back end. In a simple form, the front end is everything you see (HTML, CSS, JS) and the backend is everything you don&rsquo;t (Databases, Form requests, etc). Flask is a python framework that allows the said language to be used to serve all your requests.</p>
<p>I had used Flask in the past whilst following the <a href="https://cs50.harvard.edu/x/2021/" target="_blank" rel="noopener noreffer">Harvard CS50x</a> course back in 2019 to make a fake stocks app (💎👐). This time round, to re-familiarise myself I followed <a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/" target="_blank" rel="noopener noreffer">this excellent tutorial</a>.</p>
<p>After you are let loose on your own (especially in web dev) I found you have to have goals and a purpose to what you are doing otherwise it&rsquo;ll never happened. I persevered through the trial-and-error process that is CSS</p>
<p>I used a couple of sites for reference when I was making the design for the sight. These were the sights of: my new friend <a href="https://gwood.dev" target="_blank" rel="noopener noreffer">George Wood</a>, the blog of <a href="https://www.caseyliss.com/" target="_blank" rel="noopener noreffer">Casey Liss</a>, the blog of <a href="https://marco.org" target="_blank" rel="noopener noreffer">Marco Arment</a>, and <a href="https://hypercritical.co" target="_blank" rel="noopener noreffer">Hypercritical</a> (No prizes for guessing which podcast I listen to).</p>
<h1 id="what-extra-things-have-you-done">What extra things have you done?</h1>
<p>I&rsquo;m honoured at your presumption that I go above and beyond in the call of duty. The main thing I have done is make all my posts in markdown. Yes, all my posts are entirely written in markdown which makes me able to write nicely structured documents quickly. The raw text of the markdown is stored as a regular text field in the sqlite database but at the stage when the backend grabs the field from the database, jinja parses it as html using the python module <a href="https://mistune.readthedocs.io/en/latest/intro.html" target="_blank" rel="noopener noreffer">mistune</a>. To spice the formatting up even further, since I will be probably be using code snippets, I added the syntax highlighter <a href="https://pygments.org/" target="_blank" rel="noopener noreffer">pygments</a>. In fact here is the code for the highlight renderer being rendered in it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">mistune</span>
<span class="kn">from</span> <span class="nn">pygments</span> <span class="kn">import</span> <span class="n">highlight</span>
<span class="kn">from</span> <span class="nn">pygments.lexers</span> <span class="kn">import</span> <span class="n">get_lexer_by_name</span>
<span class="kn">from</span> <span class="nn">pygments.formatters</span> <span class="kn">import</span> <span class="n">html</span>


<span class="k">class</span> <span class="nc">HighlightRenderer</span><span class="p">(</span><span class="n">mistune</span><span class="o">.</span><span class="n">Renderer</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">block_code</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">lang</span><span class="p">:</span>
            <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">lang</span><span class="p">,</span> <span class="n">stripall</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">formatter</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">HtmlFormatter</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="s1">&#39;monokai&#39;</span><span class="p">,</span> <span class="n">noclasses</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span>
        <span class="k">return</span> <span class="s1">&#39;&lt;pre&gt;&lt;code&gt;&#39;</span> <span class="o">+</span> <span class="n">mistune</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&lt;/code&gt;&lt;/pre&gt;&#39;</span>

</code></pre></td></tr></table>
</div>
</div><p>It goes without saying that this website will continue to be updated as I change my mind on a few things and wish to add more functionality. On my list of todos are:</p>
<ul>
<li>A switch between light mode and dark mode</li>
<li>A way for people to follow the blog (maybe through RSS)</li>
<li>A way to better list out blog posts (currently all are listed on one page which will probably become cumbersome when they grow in number)</li>
</ul>
<p>In the meantime I hope you come back and see if I can offer you any informative content.</p>
]]></description>
</item><item>
    <title>Inspection &amp; Dissection: Dice-Jack</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-dice-jack/</link>
    <pubDate>Tue, 24 Sep 2019 21:06:18 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-dice-jack/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/10/dicejack1.png" referrerpolicy="no-referrer">
            </div><p>As part of a course we had to make a game in 2 days that involved random dice and be made as a Windows forms application with Visual Basic. So we had to make a game in something that was the furthest you could get from a game engine with a language I had never used before. But hey, <a href="https://en.wikipedia.org/wiki/Rogue_%28video_game%29" target="_blank" rel="noopener noreffer">Rogue</a> was made in 1980 and the graphics had to be ASCII so it could be worse.</p>
<p>The rest of the class generally stuck to the brief with 3 dice that you rolled and you got points for each dot.</p>
<p></p>
<p>As you can see, its rather simple. Theres 4 picture boxes, 4 labels, 2 buttons and a listbox. Dice are rolled, the dots are added up and the score is added to the listbox. After 5 rolls the game ends and the player is given their total score. But to know how I added further features we need to look at how this prototype was made.</p>
<h1 id="behind-the-prototype">Behind the prototype</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vbnet" data-lang="vbnet">
<span class="k">Dim</span> <span class="n">Die1</span><span class="p">,</span> <span class="n">Die2</span><span class="p">,</span> <span class="n">Die3</span> <span class="ow">As</span> <span class="kt">Integer</span>
<span class="k">Dim</span> <span class="n">DicePoints</span> <span class="ow">As</span> <span class="kt">Integer</span>
<span class="k">Dim</span> <span class="n">random</span> <span class="ow">As</span> <span class="n">Random</span>
<span class="k">Dim</span> <span class="n">RollCount</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="n">0</span>
</code></pre></td></tr></table>
</div>
</div><p>So we have our variables declared in the convoluted VB way. Die1, Die2, and Die3 and the scores for the corresponding dice. DicePoints is the total of those 3 scores and rollcount keeps track of how many times the dice were rolled. Random is just an object we use to generate random numbers</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vbnet" data-lang="vbnet"><span class="k">Private</span> <span class="k">Sub</span> <span class="nf">tmrTimer_Tick</span><span class="p">(</span><span class="n">sender</span> <span class="ow">As</span> <span class="kt">Object</span><span class="p">,</span> <span class="n">e</span> <span class="ow">As</span> <span class="n">EventArgs</span><span class="p">)</span> <span class="k">Handles</span> <span class="n">tmrTimer</span><span class="p">.</span><span class="n">Tick</span>
        <span class="c">&#39;Increments the load bar every tick
</span><span class="c"></span>        <span class="n">random</span> <span class="o">=</span> <span class="k">New</span> <span class="n">Random</span>
        <span class="n">prbLoad</span><span class="p">.</span><span class="n">Increment</span><span class="p">(</span><span class="n">4</span><span class="p">)</span>
        <span class="k">If</span> <span class="n">prbLoad</span><span class="p">.</span><span class="n">Value</span> <span class="o">=</span> <span class="n">100</span> <span class="k">Then</span>
        <span class="p">...</span>
        <span class="k">Else</span>
            <span class="c">&#39;Sets dice to random number when the timer ticks before the load is full
</span><span class="c"></span>            <span class="n">Die1</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">1</span><span class="p">,</span> <span class="n">7</span><span class="p">)</span>
            <span class="n">Die2</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">1</span><span class="p">,</span> <span class="n">7</span><span class="p">)</span>
            <span class="n">Die3</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">1</span><span class="p">,</span> <span class="n">7</span><span class="p">)</span>
 
            <span class="n">MatchImage</span><span class="p">(</span><span class="n">Die1</span><span class="p">,</span> <span class="n">pbxDie1</span><span class="p">)</span>
            <span class="n">MatchImage</span><span class="p">(</span><span class="n">Die2</span><span class="p">,</span> <span class="n">pbxDie2</span><span class="p">)</span>
            <span class="n">MatchImage</span><span class="p">(</span><span class="n">Die3</span><span class="p">,</span> <span class="n">pbxDie3</span><span class="p">)</span>
 
        <span class="k">End</span> <span class="k">If</span>
</code></pre></td></tr></table>
</div>
</div><p>On the board is a timer (inventfully called tmrTimer), it tick every 0.1s. Each tick it adds a bit onto the load bar at the bottom and randomizes the images on the dice. MatchImage is my own subroutine but all it does is take an integer and applies the correct face for it to whichever picture box I pass it.</p>
<p>Once the bar gets to 100, the fun begins.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vbnet" data-lang="vbnet"><span class="k">If</span> <span class="n">prbLoad</span><span class="p">.</span><span class="n">Value</span> <span class="o">=</span> <span class="n">100</span> <span class="k">Then</span>
            <span class="c">&#39;Adds the necessary points on the random dice when the load bar 
</span><span class="c"></span>            <span class="c">&#39;reaches 100
</span><span class="c"></span>            <span class="n">tmrTimer</span><span class="p">.</span><span class="n">Stop</span><span class="p">()</span>
            <span class="n">prbLoad</span><span class="p">.</span><span class="n">Value</span> <span class="o">=</span> <span class="n">0</span>
            <span class="n">RollCount</span> <span class="o">+=</span> <span class="n">1</span>
            <span class="n">DicePoints</span> <span class="o">=</span> <span class="n">Die1</span> <span class="o">+</span> <span class="n">Die2</span> <span class="o">+</span> <span class="n">Die3</span> 
</code></pre></td></tr></table>
</div>
</div><p>We stop the timer ticking, we empty the load bar and we increment our roll counter before adding up all the spots on the dice, pretty simple.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vbnet" data-lang="vbnet"><span class="c">&#39;Adds Score to list
</span><span class="c"></span><span class="n">lstScore</span><span class="p">.</span><span class="n">Items</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&#34;Roll &#34;</span> <span class="o">&amp;</span> <span class="n">RollCount</span> <span class="o">&amp;</span> <span class="s">&#34;: &#34;</span> <span class="o">&amp;</span> <span class="n">DicePoints</span><span class="p">)</span>
<span class="n">GameScore</span> <span class="o">+=</span> <span class="n">DicePoints</span>
<span class="n">DicePoints</span> <span class="o">=</span> <span class="n">0</span>
</code></pre></td></tr></table>
</div>
</div><p>Almost done, we add our points to the listbox with some formatting. Add the points to the total score for the game and then set it back to 0.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vbnet" data-lang="vbnet"><span class="k">If</span> <span class="n">RollCount</span> <span class="o">&gt;=</span> <span class="n">5</span> <span class="k">Then</span>
    <span class="n">MsgBox</span><span class="p">(</span><span class="s">&#34;Your game score was &#34;</span> <span class="o">&amp;</span> <span class="n">GameScore</span><span class="p">,,</span> <span class="s">&#34;Game Over&#34;</span><span class="p">)</span>
    <span class="n">tmrTimer</span><span class="p">.</span><span class="n">Stop</span><span class="p">()</span>
    <span class="n">btnStart</span><span class="p">.</span><span class="n">Enabled</span> <span class="o">=</span> <span class="k">False</span>
    <span class="n">btnReset</span><span class="p">.</span><span class="n">Enabled</span> <span class="o">=</span> <span class="k">True</span>
 
<span class="k">End</span> <span class="k">If</span>
</code></pre></td></tr></table>
</div>
</div><p>Then we check whether they have reached the magic 5 rolls, if so we tell them their score and let them reset the game</p>
<p>There is also some initialisation code that assigns images and there are event handlers that make the buttons work but this is the main logic. If you would like to see how that stuff works, you can find it at the <a href="https://github.com/LukeBriggsDev/Dice-Alpha" target="_blank" rel="noopener noreffer">github repo</a></p>
<h1 id="the-evolution">The Evolution</h1>
<p>The following won’t include too many code snippets since it is slightly more extensive (the rushed deadline also means it resembles a tin of Heinz spaghetti in a tumble dryer but we’ll keep that between us)</p>
<p></p>
<p>Lets break this down.</p>
<p>First we have a background that was shamelessly made in powerpoint.</p>
<p></p>
<p>The rules, scores, and title are all labels. The bar on the right is made up of the same button and listbox items as before but with its properties edited to change colour, font and border style.</p>
<p><strong>The Rules have been changed to the following:</strong></p>
<ul>
<li>The goal is to get as close to 21 points without going over</li>
<li>There is a Player and a Dealer</li>
<li>Each contestant has 2 dice</li>
<li>The player goes first</li>
<li>Each dice spot is worth 2 points</li>
<li>If either the player or dealer goes over 21, they lose the game</li>
<li>After the first roll, if the player has not gone bust, they can choose to ‘stand’ or ‘hit’</li>
<li>If they ‘hit’, the dice are rolled again and the player can choose to add the points of either die or the total of both dice</li>
<li>The player must add a score after hitting, even if it means they will go ‘bust’</li>
<li>In the event of a tie, the game goes to the dealer</li>
</ul>
<p>The rules are based on those by <a href="http://www.chessandpoker.com/dice_blackjack.html" target="_blank" rel="noopener noreffer">James Yates</a></p>
<p>Instead of a big chunk of code I’m going to show you the process of a turn through our good old friend the flow chart. They can be intimidating but I’ve tried to make it in a way that is easy to follow and you should be ale to get a grasp of what the code is doing behind the scenes.</p>
<p></p>
<p>There you go, who needs a hundred lines of bolognese when you can have pastel shapes?</p>
<p>Those who played the game may also notice this is the first time I’ve included a computer-controlled opponent, ‘The Dealer’. The dealer is like the player but has the advantages of being able to go second and win in the result of a draw. The dealer’s choice code is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vbnet" data-lang="vbnet"><span class="k">If</span> <span class="n">DealerCanChoose1</span> <span class="ow">And</span> <span class="k">Not</span> <span class="p">(</span><span class="n">DealerCanChoose2</span> <span class="ow">Or</span> <span class="n">DealerCanChooseBoth</span><span class="p">)</span> <span class="k">Then</span>
    <span class="n">DealerScore</span> <span class="o">+=</span> <span class="n">Die1</span> <span class="o">*</span> <span class="n">2</span>
 
<span class="k">ElseIf</span> <span class="n">DealerCanChoose2</span> <span class="ow">And</span> <span class="k">Not</span> <span class="p">(</span><span class="n">DealerCanChoose1</span> <span class="ow">Or</span> <span class="n">DealerCanChooseBoth</span><span class="p">)</span> <span class="k">Then</span>
    <span class="n">DealerScore</span> <span class="o">+=</span> <span class="n">Die2</span> <span class="o">*</span> <span class="n">2</span>
 
<span class="k">ElseIf</span> <span class="n">DealerCanChooseBoth</span> <span class="k">Then</span>
    <span class="n">DealerScore</span> <span class="o">+=</span> <span class="p">(</span><span class="n">Die1</span> <span class="o">+</span> <span class="n">Die2</span><span class="p">)</span> <span class="o">*</span> <span class="n">2</span>
 
<span class="k">ElseIf</span> <span class="n">DealerCanChoose1</span> <span class="ow">And</span> <span class="n">DealerCanChoose2</span> <span class="k">Then</span>
    <span class="k">If</span> <span class="n">Die1</span> <span class="o">&gt;</span> <span class="n">Die2</span> <span class="k">Then</span>
        <span class="n">DealerScore</span> <span class="o">+=</span> <span class="n">Die1</span> <span class="o">*</span> <span class="n">2</span>
    <span class="k">Else</span>
        <span class="n">DealerScore</span> <span class="o">+=</span> <span class="n">Die2</span> <span class="o">*</span> <span class="n">2</span>
    <span class="k">End</span> <span class="k">If</span>
<span class="k">End</span> <span class="k">If</span>
 
<span class="k">If</span> <span class="k">Not</span> <span class="p">(</span><span class="n">DealerCanChoose1</span> <span class="ow">Or</span> <span class="n">DealerCanChoose2</span> <span class="ow">Or</span> <span class="n">DealerCanChooseBoth</span><span class="p">)</span> <span class="k">Then</span>
    <span class="c">&#39;Dealer goes bust if no options are available
</span><span class="c"></span>    <span class="k">If</span> <span class="n">Die1</span> <span class="o">&lt;</span> <span class="n">Die2</span> <span class="k">Then</span>
        <span class="n">DealerScore</span> <span class="o">+=</span> <span class="n">Die1</span> <span class="o">*</span> <span class="n">2</span>
    <span class="k">Else</span>
        <span class="n">DealerScore</span> <span class="o">+=</span> <span class="n">Die2</span> <span class="o">*</span> <span class="n">2</span>
    <span class="k">End</span> <span class="k">If</span>
    <span class="n">DealerStand</span><span class="p">()</span>
    <span class="n">tmrDealer</span><span class="p">.</span><span class="n">Stop</span><span class="p">()</span>
 
<span class="k">ElseIf</span> <span class="n">DealerScore</span> <span class="o">&gt;</span> <span class="n">GameScore</span> <span class="k">Then</span>
    <span class="c">&#39;Dealer stands if their score is more than the player&#39;s
</span><span class="c"></span>    <span class="n">DealerStand</span><span class="p">()</span>
<span class="k">Else</span>
    <span class="n">DealerRoll</span><span class="p">()</span>
<span class="k">End</span> <span class="k">If</span>
</code></pre></td></tr></table>
</div>
</div><p>Before this code I run checks that see which options are available after a dealer rolls (these are the DealerCanChoose variables). Here there is a series of conditionals that look at the options and picks the best one for the dealer.</p>
<p>If there is only one option available, then the dealer will pick that one. If there is more than one option available then the dealer will pick whichever will get them the highest score that turn. If there are no options available then the dealer is bust and they will stand. The dealer will also stand if they have a score higher than that of the player. The dealer will continue to roll as long as they are lower than the player and their current score is under 17.</p>
<p>And thats the game! The quickest project I’ve ever done and although its rough around the edges the gameplay is solid and I got to grips with windows form’s implementation of an event-driven program. You can find the full source code <a href="https://github.com/LukeBriggsDev/Dice-Jack" target="_blank" rel="noopener noreffer">here</a></p>
]]></description>
</item><item>
    <title>Inspection &amp; Dissection: Ping! – My First Game in Unity</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-ping/</link>
    <pubDate>Sat, 23 Jun 2018 17:52:33 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-ping/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/3/unity.jpg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>“Human beings, who are almost unique in having the ability to learn from the &gt; experience of others, are also remarkable for their apparent disinclination to
do so.”</p>
<p>Douglas Adams</p>
</blockquote>
<p>Available at my <a href="/projects" rel="">project</a> page</p>
<p><strong>Why Such a Simple Game?</strong></p>
<p>Because I wouldn’t have made a game otherwise. You need to affirm any skills in the most basic of games. Even if it kills you making a game so boring, at least you’ve made a game and proved that you can do it. It is an important lesson to learn that you will lose interest in a project and you will have to force yourself to carry on through the mid-development slog. To get around this you have to break a project into stages and set small goals. For instance, while making pong you may set yourself the goal of making a paddle that moves with keyboard inputs and can collide with things, next you might set the goal of making a ball that can bounce off of walls, next a working scoring system and so on. Another important thing to remember is you are almost definitely doing this as a hobby so don’t spend hours forcing yourself to do something you don’t want to do. Sometimes you do have to face it but it is almost always better leaving it and waiting until the next day to finish it when you have a clear head and can be bothered to continue. Burnout can often strike.</p>
<p><strong>Where did you start?</strong></p>
<p>First I only had the idea of making a game in unity, that’s it, so I watched a series by the excellent YouTube channel <a href="https://www.youtube.com/watch?v=j48LtUkZRjU&amp;list=PLPV2KyIb3jR53Jce9hP7G5xC4O9AgnOuL" target="_blank" rel="noopener noreffer">Brackeys</a> that put me on the first step to knowing what I would have to do to make a game. I then decided on pong due to the reasons answered in the previous question. If I got stuck, I consulted the Incredible <a href="https://docs.unity3d.com/Manual/index.html" target="_blank" rel="noopener noreffer">Unity Documentation</a>,  Google or follow a guide by <a href="https://www.awesomeincu.com/tutorials/unity-pong/" target="_blank" rel="noopener noreffer">Awesome Inc</a>. Whilst the guide was necessary for some parts, specifically the ball bouncing, I made sure I did as much as I could with only the Unity documentation and Google searches as I often found on previous years of false starts I would just copy code and not learn anything whereas figuring out these things yourself means you are much more engaged and likely to remember it.</p>
<p><strong>How do you think the game turned out?</strong></p>
<p>As my first serious game, I am pleased. The game could be made more fun with more sporadic ball movements and a single player A.I. The paddle also glitches out slightly if you keep hitting into walls but it was meant to be nothing more than proving to myself that I can make a game in Unity. It has taught me the necessary skills and I have learned from the experience enough to move onto a slightly bigger project (not much bigger). Game development is a game in itself, you start off with a tutorial then make your way up increasingly difficult stages,  you wouldn’t jump into a level 50 area when your only level 5 and you wouldn’t go straight to the glowing sea in fallout 4 when all you’ve got is a is vault jumpsuit and a baseball bat.</p>
]]></description>
</item></channel>
</rss>
