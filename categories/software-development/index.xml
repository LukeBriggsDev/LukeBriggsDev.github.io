<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Software Development - Category - Luke Briggs</title>
        <link>https://www.lukebriggs.dev/categories/software-development/</link>
        <description>Software Development - Category - Luke Briggs</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@lukebriggs.dev (Luke Briggs)</managingEditor>
            <webMaster>contact@lukebriggs.dev (Luke Briggs)</webMaster><lastBuildDate>Wed, 18 Aug 2021 15:18:16 &#43;0100</lastBuildDate><atom:link href="https://www.lukebriggs.dev/categories/software-development/" rel="self" type="application/rss+xml" /><item>
    <title>Inspection and Dissection: Calmer Internet - My First Web Extension</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-calmer-internet/</link>
    <pubDate>Wed, 18 Aug 2021 15:18:16 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-calmer-internet/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/calmer-internet/banner_1920x960.png" referrerpolicy="no-referrer">
            </div><blockquote>
<p>The product page is available <a href="/calmer-internet" rel="">here</a></p>
</blockquote>
<h1 id="brief-description">Brief Description</h1>
<p><em>Calmer Internet</em> is a web extension for Chrome, Firefox, and Edge that makes the internet a less infuriating place to be.
It removes comments, recommended content and various trending pages from Twitter, YouTube, and Instagram to try and relieve that doom-scrolling.</p>
<h1 id="rationale">Rationale</h1>
<p>Since I finished stage 1 of University in June, I had a considerable amount of time off.
A lot of that time was spent in a state of not quite working and not quite relaxing.
I was stuck in a cycle of following the YouTube sidebar of bland content before going to Twitter and scrolling down the trending hashtags and comments, getting annoyed at every step.</p>
<p>Many social media platforms just throw various things at you in an attempt to just keep scrolling and clicking and engaging, before you know it you&rsquo;ve spent an hour of your life on a soul-sucking site.</p>
<p>I didn&rsquo;t want to quit these sites entirely.
There are truly incredible and insightful people on there like <a href="https://www.youtube.com/user/enyay" target="_blank" rel="noopener noreffer">Tom Scott</a>, <a href="https://www.youtube.com/c/Exurb1a" target="_blank" rel="noopener noreffer">exurb1a</a>, and <a href="https://www.youtube.com/channel/UCE1jXbVAGJQEORz9nZqb5bQ" target="_blank" rel="noopener noreffer">Ahoy</a>.
Twitter is also good as a micro-blog feed for people I want to follow in the tech sector.
The conclusion I came to is that I need to take control of what I see.
I should only be consuming things I have actively sought out, because those are the things that I enjoy the most.
It also means that I can&rsquo;t just keep scrolling and watching forever, I will run out of content because I only see what I have subscribed to.
There is no &lsquo;one more click&rsquo;</p>
<p>My initial solution was to have everything go to an RSS reader but most social media platforms don&rsquo;t play nicely with rss feeds and feed readers don&rsquo;t really play nicely with conveying threads, retweets and video content.
As a result, I turned to editing the sites themselves to provide a more focused experience.</p>
<h1 id="how-its-made">How it&rsquo;s made</h1>
<p>This extension didn&rsquo;t start out as an extension. It started out as a set of rules for my ad-blocker.
I&rsquo;d use the eyedropper tool to select the <em>Trending</em> bar on Twitter just so I wouldn&rsquo;t be tempted to click it.
I did similar things with the trending tab on YouTube.
It then got to a point where I wanted to do more like remove the recommended sidebar and the video-wall end screens, so I decided I needed a web extension.</p>
<p>I have never made a web extension before, but I do have some experience in HTML and JavaScript so it wasn&rsquo;t too troublesome to get used to.
Most of what my extension does takes place in a &lsquo;content script&rsquo;.
This is a javascript file that just loaded alongside the current page at load time.
The file then looks at the current URL and checks the page for any elements I&rsquo;ve told it to remove.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// Adding Twitter elements to a list of elements to remove
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span> <span class="o">===</span> <span class="s2">&#34;twitter.com&#34;</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span> <span class="o">===</span> <span class="s2">&#34;mobile.twitter.com&#34;</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterTrendingBar&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;trendingBar&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;div[aria-label=&#39;Timeline: Trending now&#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterExploreLinks&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;exploreLinks&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;a[href=&#39;https://www.lukebriggs.dev/explore&#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterWhoToFollow&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;miscStyling&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">&#34;css-1dbjc4n r-1867qdf r-1phboty r-rs99b7 r-1ifxtd0 r-1bro5k0 r-1udh08x&#34;</span><span class="p">)</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;whoToFollow&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;aside[aria-label=&#39;Who to follow&#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterTopics&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;topics&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;div[aria-label=&#39;Timeline: &#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The script then attaches a listener that causes new checks every time the webpage is updated</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="kd">function</span> <span class="nx">observeBodyRemove</span><span class="p">(){</span>
        <span class="c1">// Select the node that will be observed for mutations
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">targetNode</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">);</span>

        <span class="c1">// Options for the observer (which mutations to observe)
</span><span class="c1"></span>        <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">attributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">childList</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">subtree</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>

        <span class="c1">// Callback function to execute when mutations are observed
</span><span class="c1"></span>        <span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mutationsList</span><span class="p">,</span> <span class="nx">observer</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">elementsToRemove</span> <span class="o">=</span> <span class="nx">getElementsToRemove</span><span class="p">();</span>
            <span class="k">for</span><span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">elementsToRemove</span><span class="p">){</span>
                <span class="k">for</span> <span class="p">(</span><span class="nx">element</span> <span class="k">of</span> <span class="nx">elementsToRemove</span><span class="p">[</span><span class="nx">key</span><span class="p">]){</span>
                    <span class="k">try</span> <span class="p">{</span>
                        <span class="nx">element</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
                    <span class="p">}</span>
                    <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">};</span>

        <span class="c1">// Create an observer instance linked to the callback function
</span><span class="c1"></span>        <span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>

        <span class="c1">// Start observing the target node for configured mutations
</span><span class="c1"></span>        <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">targetNode</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The only other JavaScript in the extension is in a &lsquo;background script&rsquo;.
Whereas &lsquo;content scripts&rsquo; are loaded alongside a webpage, background scripts are persistent and always run whenever the extension is loaded.
This means they are useful for doing things before a page is loaded.
One feature of the extension is you can redirect any links to YouTube.com to youtube.com/feed/subscriptions, so you aren&rsquo;t bombarded by useless recommendations.
I initially had the redirect in a content script but that required the whole page to be loaded before redirecting away from it.</p>
<p>My current solution uses the WebRequest API to intercept a page request and load a new one instead.
This is also done be setting up a listener, such as this one:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// YouTube
</span><span class="c1"></span>    <span class="nx">chrome</span><span class="p">.</span><span class="nx">webRequest</span><span class="p">.</span><span class="nx">onBeforeRequest</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span>
        <span class="kd">function</span> <span class="p">(</span><span class="nx">details</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;YTHomeRedirect&#34;</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span><span class="nx">redirectUrl</span><span class="o">:</span> <span class="s2">&#34;https://youtube.com/feed/subscriptions&#34;</span><span class="p">};</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">urls</span><span class="o">:</span> <span class="p">[</span>
                <span class="s2">&#34;*://*.youtube.com/&#34;</span>
            <span class="p">],</span>
            <span class="nx">types</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;main_frame&#34;</span><span class="p">,</span> <span class="s2">&#34;sub_frame&#34;</span><span class="p">,</span> <span class="s2">&#34;stylesheet&#34;</span><span class="p">,</span> <span class="s2">&#34;script&#34;</span><span class="p">,</span> <span class="s2">&#34;image&#34;</span><span class="p">,</span> <span class="s2">&#34;object&#34;</span><span class="p">,</span> <span class="s2">&#34;xmlhttprequest&#34;</span><span class="p">,</span> <span class="s2">&#34;other&#34;</span><span class="p">]</span>
        <span class="p">},</span>
        <span class="p">[</span><span class="s2">&#34;blocking&#34;</span><span class="p">]</span>
    <span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>Finally, all that was left was to create a manifest.
I have great experience with manifests since <a href="https://github.com/LukeBriggsDev/Pepys" target="_blank" rel="noopener noreffer">Pepys recently received builds for rpm, .deb, and PKGBUILD</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;manifest_version&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Calmer Internet&#34;</span><span class="p">,</span>
  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.1.0&#34;</span><span class="p">,</span>
  <span class="nt">&#34;browser_specific_settings&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;gecko&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;calmerinternet@lukebriggs.dev&#34;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nt">&#34;browser_action&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;default_icon&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;16&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/16.png&#34;</span><span class="p">,</span>
      <span class="nt">&#34;24&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/24.png&#34;</span><span class="p">,</span>
      <span class="nt">&#34;32&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/32.png&#34;</span>
    <span class="p">},</span>
    <span class="nt">&#34;default_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Calmer Internet&#34;</span>
  <span class="p">},</span>
  <span class="nt">&#34;icons&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;48&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/48.png&#34;</span><span class="p">,</span>
    <span class="nt">&#34;96&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/96.png&#34;</span>
  <span class="p">},</span>
  <span class="nt">&#34;content_scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="nt">&#34;matches&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">&#34;*://*.youtube.com/*&#34;</span><span class="p">,</span>
      <span class="s2">&#34;*://*.twitter.com/*&#34;</span><span class="p">,</span> <span class="s2">&#34;*://twitter.com/*&#34;</span><span class="p">,</span>
      <span class="s2">&#34;*://*.instagram.com/*&#34;</span>
    <span class="p">],</span>
    <span class="nt">&#34;js&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;calmer.js&#34;</span><span class="p">]</span>
  <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;scripts&#34;</span><span class="p">:[</span><span class="s2">&#34;background.js&#34;</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&#34;*://*.youtube.com/*&#34;</span><span class="p">,</span>
    <span class="s2">&#34;*://*.twitter.com/*&#34;</span><span class="p">,</span> <span class="s2">&#34;*://twitter.com/*&#34;</span><span class="p">,</span>
    <span class="s2">&#34;*://*.instagram.com/*&#34;</span><span class="p">,</span>
    <span class="s2">&#34;storage&#34;</span><span class="p">,</span>
    <span class="s2">&#34;webRequest&#34;</span><span class="p">,</span>
    <span class="s2">&#34;webRequestBlocking&#34;</span>
  <span class="p">],</span>
  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Provides a calmer internet experience. Removes comments and various recommendation elements from Twitter, YouTube, Instagram.&#34;</span><span class="p">,</span>
  <span class="nt">&#34;options_ui&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;options.html&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="deployment">Deployment</h1>
<p>The extension is available on the Chrome Web Store, the Firefox Add-on Store, and the Microsoft Store.
WebExtensions are now pretty cross-compatible, so I use the exact same code-base across all browsers.
It would even support Safari as of Big Sur, but I do not have a Mac to upload it, nor do I want to fork out the $99 price of an Apple Developer account.</p>
<p>As ever, the project is also available in full on my <a href="https://github.com/LukeBriggsDev/calmer-internet" target="_blank" rel="noopener noreffer">GitHub</a></p>
]]></description>
</item><item>
    <title>Calmer Internet</title>
    <link>https://www.lukebriggs.dev/calmer-internet/</link>
    <pubDate>Sun, 15 Aug 2021 15:46:07 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/calmer-internet/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/calmer-internet/banner.svg" referrerpolicy="no-referrer">
            </div>
<p>A web extension that hides the elements of web pages that are best off hidden.
Many sites are designed to suck time away from you by showing you things that are interesting enough to keep you scrolling but offers no value.</p>
<p>This extension strips away all these comments, recommendations and promotions leaving you with just the content you have specifically asked to receive.</p>
<figure style="margin-bottom: 24px">

<figcaption style="margin-top: -10px">Youtube without comments or recommendation sidebar</figcaption>
</figure>
<figure style="margin-bottom: 24px">

<figcaption style="margin-top: -10px">Twitter without trending, who to follow, or explore elements</figcaption>
</figure>
<figure style="margin-bottom: 24px">

<figcaption style="margin-top: -10px">Instagram without comments</figcaption>
</figure>
<h2 id="youtube-elements">Youtube elements:</h2>
<ul>
<li>Home links</li>
<li>Explore links</li>
<li>Trending link (mobile)</li>
<li>Comments</li>
<li>Redirect home page to subscriptions</li>
<li>Watch next section</li>
<li>Live Chat</li>
<li>End screen video wall</li>
</ul>
<h2 id="twitter-elements">Twitter elements:</h2>
<ul>
<li>Trending bar</li>
<li>Explore link</li>
<li>&lsquo;Who to Follow&rsquo; bar</li>
<li>Topics bar</li>
</ul>
<h2 id="instagram-elements">Instagram elements:</h2>
<ul>
<li>Explore links</li>
<li>Explore people links</li>
<li>Comments below posts in feed</li>
<li>Comments in posts</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/calmer-internet/eafehkefjngkemmnfplgddemgpcjlldb"></a></p>
<p><a href="https://addons.mozilla.org/firefox/addon/calmer-internet/"></a></p>
<p><a href='https://microsoftedge.microsoft.com/addons/detail/calmer-internet/fodnejjpkelloeegkfgejifhaifnpded'></a></p>
<p><a href="https://github.com/LukeBriggsDev/calmer-interne"></a></p>
]]></description>
</item><item>
    <title>Inspection and Dissection: Pepys - A Straightforward Markdown Editor</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-pepys/</link>
    <pubDate>Mon, 31 May 2021 16:47:38 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-pepys/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/inspection-and-dissection-pepys/BookLogoLargeWhite.svg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>The product page is available <a href="/pepys" rel="">here</a></p>
</blockquote>
<h1 id="brief-description">Brief Description</h1>
<p>Pepys is a GUI journaling application built using Python bindings for the Qt framework.
It is available as an installer for Windows and a Flatpak on Linux.</p>
<h1 id="background">Background</h1>
<p>I started journaling around February last year, it was probably the most prescient thing I have ever done.
It wasn&rsquo;t long before we all went into self-imposed isolation and journaling provided a good way to express my thoughts.</p>
<p>My first posts were made in one big Word document.
Journals need to be as future-proof as possible, and I thought at the time that since entire governments are probably reliant on MS Word that it won&rsquo;t be going away any time soon.
It wasn&rsquo;t a good experience though.
Having to type the date each time was tiresome, and I thought it would be a formatting mess should I use an Operating System without MS Word (something which would later happen when I spent several months using Linux).</p>
<p>I next moved on to <a href="https://notion.so" target="_blank" rel="noopener noreffer">Notion</a>.
An excellent productivity application that can be used to do all sorts from notes to spreadsheets to databases.
It&rsquo;s template, tagging and calendar features made it a great prospect for writing my journal in.
The entries were made in Markdown so would be viewable on any computer for as long as we still used ASCII and Unicode, seems pretty future proof.
The trouble was, it made journal writing a chore.
To write an entry I&rsquo;d have to open up this electron application that took an <em>age</em> to open and slowly click through web links, waiting for pages to load, before I could get to writing entries.
I wanted a native application that would allow me to write journal entries in markdown, with a date-based file chooser.
I found no application that fitted all this criteria that worked on Linux and Windows, they all seemed Mac only (I am envious of the great ecosystem Apple cultivates among its development community).
So I took it upon myself to write my own.</p>
<h1 id="a-rocky-start">A Rocky Start</h1>
<p>The first idea for a Journal application first came to me in June 2020 but it would take nearly a year before I would find the time and the courage to actually start it.</p>
<p>My only experience with a GUI application that wasn&rsquo;t made in a dedicated game engine was <a href="/inspection-and-dissection-dice-jack" rel="">Dice-Jack</a> which was a version of blackjack that used Dice instead of cards and was made over a few days for an assignment as part of my Sixth Form Computing course.
I knew I couldn&rsquo;t use dotNet since I wanted it to be able to run on Linux as well as Windows.
My next thought was Java, since that was the language I was learning at University at the time and seemed to fit all my requirements.</p>
<p>I managed to get a very early text editor working in Java.
At that point, the idea was to have all the styling done in real time as you typed.
For example, if I typed a <code>#</code> then I would set the font size you type in to that of a title.</p>
<p>I was running into issues that were perfectly fixable but I was never truly comfortable in Java.
I will absolutely use Java in the future but it just didn&rsquo;t seem right with this project.
With Java I had the choice between the ancient swing and JavaFX.
I have never got to grasps with the whole split GUI framework where some bits are in code and some bits are in XML files.
All the GUI frameworks are going this way so I will have to get my head around it eventually but this was not the project for this.</p>
<h1 id="a-walk-in-the-dark">A Walk in the Dark</h1>
<p>After bouncing of Java frameworks I had to go with what I know, Python.
Python was the first language I learned and I&rsquo;ve been using it for coming up 4 years now.
The big players in the Python GUI game is Gtk, Qt, wxWidgets, and Tkinter.
Tkinter and wxWidgets are the more simple of the four with the majority of applications being built in either Gtk or Qt.
In the end I settled with Qt because it seemed to have better look and feel across different systems, and Gtk seemed to want me to use build systems that I was unfamiliar with.
I first broke ground with the first <a href="https://github.com/LukeBriggsDev/Pepys/commit/66f42549e53db7a43224d317be2191b2000e0d94" target="_blank" rel="noopener noreffer">git commit</a> being pushed at 20:29 BST on April 1st.
This was the first commit to the repo that would become the final release, this came at the end of several weeks of the aforementioned bouncing around.</p>
<h2 id="syntax-highlighting">Syntax Highlighting</h2>
<figure>

<figcaption>An early version of the edit pane</figcaption>
</figure>
My primary focus was in getting markdown source highlighting in the text window.
Things like bold, italic, and strike-through came rather quickly but became incredibly slow with large amounts of text.
My initial solution to the syntax highlighting was a naive one.
I would be performing regex searches and applying text character formatting across the document on each key press.
The approach was okay on small documents, but the larger the document the more text would be searched through and it would become impossible to type.
The first breakthrough came when I discovered a Qt widget called QSyntaxHighlighter which provided methods that would allow text to be broken up into 'blocks'.
I put all my regular expressions into a QSyntaxHighlighter and used its blocking mechanism to allow for typing to not be slowed down on large documents.
<h2 id="html-preview">HTML Preview</h2>
<figure>

<figcaption>An early version of the view pane</figcaption>
</figure>
Alot of the early work went into refining my markdown regular expressions, making sure they formatted the correct parts and matched the output reasonably.
It wasn't long before I had to turn my attention to the HTML preview.
The preview pane was initially just a QTextBrowser that supported a limited subset of HTML.
When the preview button was clicked the markdown would be converted to html using [mistune](https://mistune.readthedocs.io/en/latest/).
I had used mistune previously on the [first iteration of this website](/inspection-and-dissection-this-site) so a lot of that could be copied and pasted from my work there.
<p>The fact that only a subset of HTML was supported soon became an issue and I had to switch the preview to a full on web engine (the reason why the application is so large).
The web engine was such a double edged sword.
Without it: previews wouldn&rsquo;t match exports, math equations wouldn&rsquo;t be supported, many markdown elements couldn&rsquo;t be rendered properly (tables, inline html).
But with it, the application swells in size to over 100MB download and even larger when fully installed.
I wish I could resolve this alas I am too tired and too unskilled to be able to implement a solution.</p>
<h2 id="the-killer-feature">The Killer Feature</h2>
<p>It was around this time that I went into exploring <a href="https://pandoc.org/" target="_blank" rel="noopener noreffer">pandoc</a>.
I was amazed by its power and I will undoubtedly utilise it in many future projects.
Pandoc is a program written in haskell that uses its own flavour of markdown to provide a <em>huge</em> amount of outputs for document conversion.
I knew I had to implement this in some way to provide some way of providing a wide range of export option.
Then I will have truly realised my need of having entries been in a future proof format, why have 1 future proof format when you can have every format under the Sun?</p>
<h2 id="calendar-file-selector">Calendar File Selector</h2>
<p>I knew that my main method of interacting with files should be through a calendar.
Qt provides a reasonably good calendar widget that saved alot of time.
The way I keep track of the files in a user&rsquo;s journal is by having a very rigid folder structure which Pepys gets pointed to.
The journal directory has a structure of <code>YYYY\MM\DD\YYYY-MM-DD\YYYY-MM-DD.md</code> This makes it very easy to search for all the entries by date.</p>
<h2 id="release">Release</h2>
<figure>
<table>
<tr>
<th>

</th>
<th>

</th>
<th>

</th>
</tr>
</table>
<figcaption>A comparison of different logos I went through</figcaption>
</figure>
<p>I have went into my woes over releasing software <a href="/flatpak-instructions-not-included" rel="">here</a> but it is safe to say that this is an are where I learned an awful lot.
In the end Pepys was released on Linux via flatpak and on Windows via an NSIS installer <a href="https://github.com/LukeBriggsDev/Pepys/releases/" target="_blank" rel="noopener noreffer">available to download on GitHub</a>.
There was no Mac release because I do not own a Mac no have sufficient experience with Macs to be comfortable with creating installers and sufficiently testing them for correctness.</p>
<h1 id="a-retrospective">A Retrospective</h1>
<p>This whole process has been the longest I have ever spent on a project, it was probably the largest project I have ever made, and there were alot of firsts.
It was the first application I made that wasn&rsquo;t a game, it was the first proper GUI application I have made, and it was the first time I had to make installers by hand.
The process was arduous at times and I felt like giving up at some points.</p>
<p>I sit here now after releasing it and I think &ldquo;if I&rsquo;d only done this&rdquo; or &ldquo;it would be so much better if&hellip;&rdquo; but I can&rsquo;t think like that.
If I had spent as long as possible on each feature till it was perfect then the software would never be released.
I have learned that software development is an iterative process in 2 ways.
The first way is in relation to an individual piece of software.
You develop the software over time, slowly improving and adding until a finished product stumbles over the finish line.
The second way is at a macroscopic level.
Each huge project your begin, each journey you embark on, brings a new iteration on what went before.
The next GUI project I make <em>will</em> be better.
The next installer I make <em>will</em> be better.
And this excites me.</p>
<p>I suppose it has taken me until the end of my first year of University to understand what learning is really about.
Learning isn&rsquo;t about passing tests, although schools may tell you otherwise.
Learning isn&rsquo;t even about knowing stuff, that is just a by-product.
Learning is about being better, about knowing you <em>will</em> be better, and about being excited about that.
I am excited about what I will create next, how I will iterate on what I have learned, and how I can surprise myself.</p>
<h1 id="special-thanks">Special Thanks</h1>
<p>All of this took an awful lot of effort so I would like to give special thanks to the following people and projects for there valuable insights.</p>
<dl>
<dt><a href="https://gitlab.gnome.org/World/apostrophe" target="_blank" rel="noopener noreffer">Apostrophe</a></dt>
<dd>An excellent markdown editor that shows how to make a properly good writing experience and led me down the Pandoc path. Also inspired some of the regex used.</dd>
<dt><a href="https://github.com/hermitdemschoenenleben/linien" target="_blank" rel="noopener noreffer">Humboldt University Optical Metrology Group</a></dt>
<dd>Without whom I&rsquo;d still be wrestling with compilers in Flatpak</dd>
<dt><a href="https://akaru.me/" target="_blank" rel="noopener noreffer">Lucy Marsden</a> (<a href="https://github.com/noneuclideanmotion" target="_blank" rel="noopener noreffer">Github</a>)</dt>
<dd>Who provided a second set of eyes and motivated me to actually get stuff done.</dd>
<dt><a href="https://github.com/FedoraQt/adwaita-qt" target="_blank" rel="noopener noreffer">Jan Grulich</a></dt>
<dd>For showing how to implement Adwaita colours in Qt</dd>
</dl>
]]></description>
</item><item>
    <title>Introducing Pepys: A straightforward markdown journal</title>
    <link>https://www.lukebriggs.dev/pepys/</link>
    <pubDate>Mon, 31 May 2021 16:47:38 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/pepys/</guid>
    <description><![CDATA[<p></p>
<blockquote>
<p>&ldquo;It is rightly made for those who love to document their daily life events&rdquo;
<br> <a href="https://fossbytes.com/document-activity-pepys-journal-app-linux" target="_blank" rel="noopener noreffer">- FOSSBytes</a></p>
</blockquote>
<p>Pepys is a journaling application that utilises markdown for writing and storing the journal entries</p>
<ul>
<li><a href="#features" rel="">Features</a>
<ul>
<li><a href="#markdown-highlighting" rel="">Markdown Highlighting</a></li>
<li><a href="#inbuilt-html-preview" rel="">Inbuilt HTML Preview</a></li>
<li><a href="#markdown-shortcuts" rel="">Markdown Shortcuts</a></li>
<li><a href="#date-oriented" rel="">Date Oriented</a></li>
<li><a href="#dark-theme" rel="">Dark Theme</a></li>
<li><a href="#future-proof" rel="">Future Proof</a></li>
</ul>
</li>
<li><a href="#installation" rel="">Installation</a>
<ul>
<li><a href="#windows" rel="">Windows</a>
<ul>
<li><a href="#installer--standalone" rel="">Installer &amp; Standalone</a></li>
<li><a href="#winget" rel="">Winget</a></li>
<li><a href="#aur" rel="">AUR</a></li>
<li><a href="#debianfedoraarch" rel="">Debian/Fedora/Arch</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#featured-in" rel="">Featured in</a></li>
</ul>
<h1 id="features">Features</h1>
<h2 id="markdown-highlighting">Markdown Highlighting</h2>

<p>Pepys provides highlighting for key Markdown syntax in a clean and focus-driven design. Bold is bold, code is clear from text, and tags and urls don&rsquo;t clutter your view.</p>
<h2 id="inbuilt-html-preview">Inbuilt HTML Preview</h2>
<p></p>
<p>With a click of a button your markdown is rendered with links all clickable, images viewable, and even iframes are interactable.</p>
<h2 id="markdown-shortcuts">Markdown Shortcuts</h2>
<p></p>
<p>Pepys features tools to add tables and images quickly and easily. No more fiddling with alignment or hassles with relative directories.</p>
<h2 id="date-oriented">Date Oriented</h2>
<p></p>
<p>Pepys is for making journal writing simple. Organising your entries into dates is automatic. There is no file selector, instead you pick a date and write the entry for that date. Clicking a date with an existing entry will show that entry.</p>
<p>You also have the ability to favourite specific dates and add tags.</p>
<h2 id="dark-theme">Dark Theme</h2>
<p></p>
<p>Whether you write in day or night, Pepys will make sure that it is as comfortable as possible</p>
<h2 id="future-proof">Future Proof</h2>
<p></p>
<p>Pepys stores all your entries as plain text files in a YYYY/MM folder structure with a YYYY-MM-DD.md name format. This means that all your entries themselves will be viewable forever in any text editor that will come along.</p>
<p>Pepys also uses pandoc syntax, with support for pandoc conversions to other formats. This means that all your entries can be converted completely to HTML, PDF, LaTeX, Microsoft Word, EPUB, and more!</p>
<h1 id="installation">Installation</h1>
<h2 id="windows">Windows</h2>
<h3 id="installer--standalone">Installer &amp; Standalone</h3>
<p>The installer and standalone zip files are available on the <a href="https://github.com/LukeBriggsDev/Pepys/releases" target="_blank" rel="noopener noreffer">releases page</a></p>
<h3 id="winget">Winget</h3>
<p>Pepys is available through winget:</p>
<p><code>winget install pepys</code></p>
<h2 id="linux">Linux</h2>
<h3 id="aur">AUR</h3>
<p>Pepys is available on the <a href="https://aur.archlinux.org/packages/pepys/" target="_blank" rel="noopener noreffer">Arch User Repository</a></p>
<p><code>yay -S pepys</code></p>
<h3 id="debianfedoraarch">Debian/Fedora/Arch</h3>
<p>Distribution specific packages are available on the <a href="https://github.com/LukeBriggsDev/Pepys/releases" target="_blank" rel="noopener noreffer">releases page</a></p>
<h1 id="featured-in">Featured in</h1>
<p>FossBytes - <a href="https://fossbytes.com/document-activity-pepys-journal-app-linux/">https://fossbytes.com/document-activity-pepys-journal-app-linux/</a></p>
<p>ConnectWWW.com - <a href="https://connectwww.com/pepys-markdown-journal-application/62941/">https://connectwww.com/pepys-markdown-journal-application/62941/</a></p>
]]></description>
</item><item>
    <title>Making a Mobile App – Chapter 5: Go Your Own Way</title>
    <link>https://www.lukebriggs.dev/making-a-mobile-app-chapter-5/</link>
    <pubDate>Sat, 09 Mar 2019 20:47:46 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/making-a-mobile-app-chapter-5/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/9/xkcd378.png" referrerpolicy="no-referrer">
            </div><blockquote>
<p>“Real programmers set the universal constants at the start such that the &gt;universe evolves to contain the disk with the data they want .”</p>
<p>xkcd 378</p>
</blockquote>
<p>I wanted to add a gallery for users to be able to scroll through a variety of images so I did a quick google search about how I was going to go about it and I found <a href="https://www.npmjs.com/package/react-native-image-view" target="_blank" rel="noopener noreffer">react-native-image-view</a>. In 6 lines of code and an array of Imgur links you can have a decent and working image gallery, job sorted! Right?</p>
<p></p>
<p>In truth, it unsettled me. Was this cheating? Should I have created my own gallery? This package was better than anything I could come up with and something I wasn’t prepared to spend time on but I still felt like a part of the app was no longer mine.</p>
<p>These sorts of ideas are things I have seen keep cropping up across everything I have done. I see other people’s enemy movement packages in Unity and magic code on StackOverflow that does everything you need, but are these a step to far? Are you losing what it means to actuallly create something? I’ve had all these questions and I think I will always question myself about the balance between hard coding everything from scratch and using magic boxes that do the gruntwork for you, but for now I have decided it’s about scope. It is not within the scope of this project to make an image gallery, it is just a small feature in an app that is for doing something else. The amount of time it would take to create something like this is time that could be spent doing something else that is specific to this app and does require the time spent on it.</p>
<p>The way I intend to go about my projects is to learn what I need out of it and the crucial elements of it. If I’m making a game in Unity I would feel uncomfortable using someone else’s movement package, movement is such a core aspect of a game’s feel that I think I should have control over its nuance. Equally, I am ok with using an image viewer package as it means I can spend more time on bigger features and I will write my own image viewer if this one is no longer fit for purpose. This is a pet project and so it is really only my own motivation that is going to get it finished. The more time I spend on a time consuming feature, the less likely it is that the project will get finished. What I want out of this app is to come out the other side of it with something that is complete and to achieve this I need to pick and choose my battles.</p>
]]></description>
</item><item>
    <title>Making a Mobile App – Chapter 4: Fast and Flash</title>
    <link>https://www.lukebriggs.dev/making-a-mobile-app-chapter-4/</link>
    <pubDate>Mon, 10 Dec 2018 21:57:21 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/making-a-mobile-app-chapter-4/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/8/desk.jpg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>“A common mistake that people make when trying to design something
completely foolproof is to underestimate the ingenuity of complete fools.”</p>
<p>Douglas Adams</p>
</blockquote>
<p>As this app will be for a business, it has to serve some purposes. First it has to present the company as a professional entity and also fit with its branding to provide not only a consistent experience but to also strengthen that companies place in your head, making them more likely to go to them rather than anyone else. Next it has to serve a point, it’s all well and good having some fancy spiel about company ethos and dedication to the craft but you want the user to have a reason to not only to install your app but to also keep using it. Finally, it has to be straightforward to use and foolproof. Well, nothing is foolproof proof. Well, nothing is foolproof.</p>
<h4 id="branding">Branding</h4>
<p>The company colours were red, dark grey and white. It therefore makes sense for the app to only use the colours red dark grey and white, seems simple enough.</p>
<p></p>
<p>Eww, a red pastel background with black text and mismatch white buttons and icons. It looks like a tomato soup can just exploded in the microwave. It’s all about complimentary colours and keeping things clean. The main colour of any app or website shouldn’t be something outrageous or garish, you want to present professionalism and minimalism. It’s good to have an accent colour that pops and has your brand stand out but if you end up with too much it is both nauseating and ugly.</p>
<p></p>
<p>Ahh Much better. Character is nice but flamboyance is very easily annoying</p>
<h4 id="purpose">Purpose</h4>
<p>Like I say, your app needs a purpose otherwise what’s the point?</p>
<p>
</p>
<p>As you can see the app act doesn’t revolutionise e-commerce but what it does do is act as a hub for everything involved with this company. You can click a button and google maps opens up with the locations for shops and restaurants already plugged in and ready to plan a route. You can call to book a table for a restaurant and there are galleries of menus and images to see what products and dishes are on offer (As a side note if you are making a ReactJS app in Expo then <a href="https://www.npmjs.com/package/react-native-image-view" target="_blank" rel="noopener noreffer">react-native-image-view</a> is a godsend, it is a bit fiddly to get working but it means you can keep using Expo without having to delve into Android files and java SDKs).</p>
<h4 id="foolproofness-and-expandability">Foolproofness and Expandability</h4>
<p>To make your app accessible you have to ensure it is something easy to navigate and intuitive to use. Since this is my first mobile app I felt it was more of a case of making sure it doesn’t look out of place compared to the modern selection of mobile apps that supermarkets and resteraunts have on offer. It uses clear icons and a navigation bar at the bottom which is the current style. I wanted the user to not be confused upon opening the app but feel comfortable in using it and having a smooth experience.</p>
<p>One of the brilliant things about React Native is the modules are not only easy to use but also offer a great deal of wiggle room to do what you want. For example, creating new screens is as easy as adding a function to that screens javascript add sticking a call to it in a main navigator script; this allows the room to expand quite quickly once you’ve got a baseline set giving scalability without what some projects have which is a feeling of trying to balance on one leg while trying to solve a rubik’s cube.</p>
]]></description>
</item><item>
    <title>Making a Mobile App – Chapter 3: The Setup</title>
    <link>https://www.lukebriggs.dev/making-a-mobile-app-chapter-3/</link>
    <pubDate>Mon, 10 Dec 2018 20:14:17 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/making-a-mobile-app-chapter-3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/7/drawingboard.jpg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>“He attacked everything in life with a mix of extraordinary genius and naive &gt;incompetence, and it was often difficult to tell which was which.”</p>
<p>Douglas Adams</p>
</blockquote>
<p>Setting up your React/Expo app is fairly straightforward but does require using the command line and some basic knowledge. You can find further detail <a href="https://expo.io/learn" target="_blank" rel="noopener noreffer">here</a> but I’ll summarise it now.</p>
<p>Firstly you will need to download and install <a href="https://nodejs.org/en/" target="_blank" rel="noopener noreffer">Node.js</a> This is quite self explanatory as it has an actual wizard thus not requiring any command line interaction. Node is necessary for almost anything running local javascript. Next you’ll need to open the command line (found on windows by typing ‘cmd’ into the start menu) and run this command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">npm install expo-cli --global
</code></pre></td></tr></table>
</div>
</div><p>You will then be asked to create an Expo account. Next you want no navigate to the directory where you want to store your app, this is done in windows by typing ‘cd’ followed by the directory. For example :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">cd C:\Users\&lt;Your Username&gt;\Documents\app
</code></pre></td></tr></table>
</div>
</div><p>Then run the commands:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">expo init my-new-project
cd my-new-project
expo start
</code></pre></td></tr></table>
</div>
</div><p>‘expo start’ will be the command you run in the directory whenever you want to run your Expo app. I would also recommend starting with the ‘tabs’ template as it places some very useful files and means you don’t need to set up your own navigation bars. After you have ran the start command your browser will open up with a QR code. Scan the QR code in the Expo app (<a href="https://play.google.com/store/apps/details?id=host.exp.exponent&amp;hl=en_GB" target="_blank" rel="noopener noreffer">Google Play</a> and <a href="https://itunes.apple.com/us/app/expo-client/id982107779?mt=8" target="_blank" rel="noopener noreffer">iOS</a>) and behold your first expo app. If you have experience in ReactJS, you can dive into the files with your text editor of choice (I prefer <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreffer">VS Code</a>) and follow the instructions both in the app and consulting the <a href="https://docs.expo.io/versions/v31.0.0/workflow/up-and-running" target="_blank" rel="noopener noreffer">documentation</a>.  If you don’t have experience, I would recommend using the <a href="https://www.codecademy.com/learn" target="_blank" rel="noopener noreffer">Codeacademy</a> course on ReactJS and Javascript. Also remember Google is your best friend, if you don’t know something don’t be afraid to google it.</p>
]]></description>
</item><item>
    <title>Making a Mobile App – Chapter 2: A Bad Worker Blames His Tools</title>
    <link>https://www.lukebriggs.dev/making-a-mobile-app-chapter-2/</link>
    <pubDate>Sun, 09 Dec 2018 20:07:21 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/making-a-mobile-app-chapter-2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/6/phone.jpg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>“Don’t Panic.”</p>
<p>Douglas Adams</p>
<p>Finding the right tool for the job might be the most important thing I’ve learned &gt;in my short time in the world of development. The classic conversation &gt;everyone who wants to get into development goes something like this:</p>
<p>New Guy: “What programming language is best.”</p>
<p>Pro: “There isn’t one.”</p>
<p>New Guy: “Ok. Well what programming language should I use for X.”</p>
<p>Pro: “It depends.”</p>
<p>New Guy: “Fine. Well what should I use if I want to use X for Y.”</p>
<p>Pro: “Whatever you are comfortable with.”</p>
<p>New Guy: “What do you mean comfortable. I’ve never programmed before,
anyway its not as if a language is some sort of sofa. Hey! Where are you going!
you can’t just leave me here!”</p>
<p>Google: “Hello.”</p>
<p>New Guy: “What.”</p>
<p>Google: “I’m your new best friend.”</p>
</blockquote>
<p>There are so many use cases and things you might want to develop that almost every instance of someone’s development is bespoke to what they want. This is something that you have to have experiences before you understand it which makes it more useful for a new developer to learn while doing rather than learning then doing.</p>
<p>I had to find the right tools for what I wanted. My requirements for this app were based off of the time constraints I had, the lack of experience I had and the needs I felt the app had:</p>
<ol>
<li>Needed to be easy to port to different platforms.</li>
<li>Had to be easy to integrate design and programming elements together.</li>
<li>Needed to be able to make a professional and modern look.
4.Didn’t require low level access</li>
</ol>
<p>I settled on <a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener noreffer">React Native</a> with the <a href="https://expo.io/" target="_blank" rel="noopener noreffer">Expo toolchain</a>. I felt React was by far the best option I had. The only other options were using C# to make a Xamarin.Forms app which felt a bit like using a jackhammer to do teeth surgery or learning to use Java and Objective-C/Swift to do native development and use a completely different codebase, not only would I have to learn two languages and systems at once but also would need to fork out an initial cost of $99 for an apple developer account and develop on an Mac which I neither have nor want.</p>
<p>I’m using Expo because it means the app will be fully cross platform and I don’t need to interact with any of the awkward SDK’s and system specific stuff. Expo also provides a neat app that you run on your Android or iOS which connects to a local server with the app files and allows you to run your app within their app, no compiling, no apple developer account, no Mac. This made testing incredibly easy. Expo also handles keystoring for Android and all that fancy stuff.</p>
]]></description>
</item><item>
    <title>Making a Mobile App – Chapter 1: A Few False Starts</title>
    <link>https://www.lukebriggs.dev/making-a-mobile-app-chapter-1/</link>
    <pubDate>Sun, 09 Dec 2018 19:57:21 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/making-a-mobile-app-chapter-1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/5/phone.jpg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>“I may not have gone where I intended to go, but I think I have ended up
where I needed to be.”</p>
<p>Douglas Adams</p>
</blockquote>
<p>Self-learning is often like trying to solve a maze, you follow the first path you see as far as you can. You reach a dead end. Then use what you learned in that path to give you an idea of where you could go next.</p>
<p>I’ve been trying to find a new small project for a while now. I lacked the enthusiasm to spend time making games as I generally find it is something you need to take a running jump at with a fresh idea and be able to maintain that flair through the tidal wave of texture drawing, physics calculations and gameplay design. At some point I will go back to game development but I wanted something new.</p>
<p>It was around this time that the opportunity came up to develop an app that may or may not be used for a local business. It had the vague deadline that let me experiment but gave me the pressure to finish it, it let me design something that was professional and would have to be used practically and it was something I’d never done before on a platform I had never developed for.</p>
]]></description>
</item></channel>
</rss>
