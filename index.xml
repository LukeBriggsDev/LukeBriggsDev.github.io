<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Luke Briggs</title>
        <link>https://www.lukebriggs.dev/</link>
        <description>I&#39;m Luke Briggs: a Computer Science student from the UK studying at Newcastle University.</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@lukebriggs.dev (Luke Briggs)</managingEditor>
            <webMaster>contact@lukebriggs.dev (Luke Briggs)</webMaster><lastBuildDate>Thu, 16 Sep 2021 15:07:04 &#43;0100</lastBuildDate>
            <atom:link href="https://www.lukebriggs.dev/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Inspection and Dissection: Sounds2Spotify</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-sounds2spotify/</link>
    <pubDate>Thu, 16 Sep 2021 15:07:04 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-sounds2spotify/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/projects/sounds2spotify_banner.png" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Available on <a href="https://github.com/LukeBriggsDev/Sounds2Spotify" target="_blank" rel="noopener noreffer">Github</a></p>
</blockquote>
<h1 id="brief-description">Brief Description</h1>
<p>Sounds2Spotify is a web extension for firefox and chrome that converts the tracklists that appear on <a href="https://bbc.co.uk/sounds" target="_blank" rel="noopener noreffer">BBC Sounds</a> programme pages to be converted into Spotify playlists.</p>
<p>Unlike <a href="/calmer-internet" rel="">Calmer-Internet</a> this extension can only be installed by following the instructions on <a href="https://github.com/LukeBriggsDev/Sounds2Spotify" target="_blank" rel="noopener noreffer">Github</a> due to its use of API keys.</p>
<h1 id="impetus">Impetus</h1>
<p>One of my pleasures in life is listening to Music.
My favourite tracks are stored locally and also in Spotify playlists for when I&rsquo;m using a device without my collection.
Most of the time, however, I&rsquo;m not listening to my favourite tracks, I&rsquo;m listening to the <a href="https://www.bbc.co.uk/sounds/play/live:bbc_6music" target="_blank" rel="noopener noreffer">BBC 6Music</a>.
More specifically, I&rsquo;m listening to the <a href="https://www.bbc.co.uk/programmes/b00c000j" target="_blank" rel="noopener noreffer">Lauren Laverne Breakfast Show</a>.</p>
<p>Due to licensing reasons the BBC can only have its music programming available on its own BBC Sounds app for a limited time.
This is fine when I&rsquo;m using my computer or phone, but quite often I want to listen to music in the background when using my PlayStation, which only allows music to be played through Spotify.</p>
<p>The goal: to convert the music played on BBC Sounds to Spotify playlists.</p>
<h1 id="code-walkthrough">Code Walkthrough</h1>
<h2 id="part-1-getting-the-music">Part 1: Getting the Music</h2>
<p></p>
<hr style="border: 1px solid black">
<p></p>
<p>Thankfully, underneath every music programme, the BBC provides a track list of all the music played throughout the programme as well as a popover menu providing links to external sources.</p>
<p>So the first job my extension had to do was to scrape this information.
There are no APIs or direct links to this information so the only way to get this information is by clicking on each button and grabbing the Spotify link.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// List of buttons that bring up track popover
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;[id^=&#34;track-&#34;]&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">tracklist</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">var</span> <span class="nx">episodeDate</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">&#34;sc-c-episode__metadata__data&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">lastChild</span><span class="p">.</span><span class="nx">data</span>
</code></pre></td></tr></table>
</div>
</div><p>Each menu button has the HTML ID of &ldquo;track-x&rdquo; where x is its position in the tracklist.
So a query for all these IDs will yield a list of button elements.</p>
<p>The date the episode aired is also quite useful when it comes to naming the eventual playlist, so I grab that as well.</p>
<p>I also initialise the tracklist here. Eventually I want a list of the Spotify links for the tracks.</p>
<p>The IDs and element classes were obtained by hand by scouring the HTML source of the page.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">scrollIntoView</span><span class="p">()</span>
    <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">click</span><span class="p">()</span>
    <span class="kr">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="c1">// t = 200ms
</span><span class="c1"></span>    <span class="k">try</span><span class="p">{</span>
        <span class="kd">var</span> <span class="nx">track</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;[href^=&#34;https://open.spotify.com/track/&#34;]&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="kd">var</span> <span class="nx">trackMetadata</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">track</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;data-bbc-metadata&#34;</span><span class="p">))</span>
        <span class="kd">var</span> <span class="nx">trackTitle</span> <span class="o">=</span> <span class="nx">trackMetadata</span><span class="p">.</span><span class="nx">TID</span>
        <span class="nx">tracklist</span><span class="p">[</span><span class="nx">trackTitle</span><span class="p">]</span> <span class="o">=</span> <span class="nx">track</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;href&#34;</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
        <span class="c1">// No links found
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>I loop through all the button elements, scroll to the element and click it. There is a 200ms delay between each track as render differences can lead to buttons not being clicked.</p>
<p>When a track is clicked, single popover appears containing a Spotify track link if it exists. As a result, by querying for a Spotify track URL on the page, I will get the link, if it exists.</p>
<p>The popover also includes some metadata for the track in the form of JSON. So I use the track title as the key in a dictionary of tracks, just to make debugging easier.
The value in the dictionary is the corresponding link.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">chrome</span><span class="p">.</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;tracklist&#34;</span> <span class="p">,</span> <span class="nx">track_list</span><span class="o">:</span> <span class="nx">tracklist</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">date</span><span class="o">:</span> <span class="nx">episodeDate</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">farewell</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>All this data is then wrapped up into a message and sent off to be picked up by a background script.</p>
<p>I mention background scripts in more detail on my <a href="/inspection-and-dissection-calmer-internet/" rel="">Inspection and Dissection on Calmer-Internet</a></p>
<h2 id="part-2-promises-async-apis">Part 2: Promises, Async, APIs</h2>
<p>Now for the complicated part.
Using the list of Spotify links I have to create a playlist.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// Base URL
</span><span class="c1"></span><span class="nx">get_url</span> <span class="o">=</span> <span class="s2">&#34;https://accounts.spotify.com/authorize?&#34;</span>
<span class="nx">get_url</span> <span class="o">+=</span> <span class="sb">`client_id=</span><span class="si">${</span><span class="nx">client_id</span><span class="si">}</span><span class="sb">&amp;`</span>
<span class="nx">get_url</span> <span class="o">+=</span> <span class="s2">&#34;response_type=code&amp;&#34;</span>
<span class="nx">get_url</span> <span class="o">+=</span> <span class="sb">`redirect_uri=</span><span class="si">${</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">chrome</span><span class="p">.</span><span class="nx">identity</span><span class="p">.</span><span class="nx">getRedirectURL</span><span class="p">())</span><span class="si">}</span><span class="sb">&amp;`</span>
<span class="nx">get_url</span> <span class="o">+=</span> <span class="s2">&#34;scope=playlist-modify-public&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>The first thing I need to do is get authorisation from the user to allow the extension to modify public playlists.
This is done by pointing a request to a specific url containing certain information.</p>
<ul>
<li>client_id: this is and id associated with a <a href="https://developer.spotify.com/dashboard/applications" target="_blank" rel="noopener noreffer">Spotify app</a>.</li>
<li>response_type: there are various ways to authenticate, the way I are doing it is through a &lsquo;code&rsquo; flow</li>
<li>redirect_uri: the url Spotify should redirect to when done.
Web extensions require this to be a single link unique to the extension which is obtained through the method above</li>
<li>scope: which permissions I require</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">chrome</span><span class="p">.</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">onMessage</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">sender</span><span class="p">,</span> <span class="nx">sendResponse</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s2">&#34;tracklist&#34;</span><span class="p">){</span>
            <span class="nx">sendResponse</span><span class="p">({</span><span class="nx">farewell</span><span class="o">:</span> <span class="s2">&#34;recieved tracklist&#34;</span><span class="p">});</span>

            <span class="nx">tracklist</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">track_list</span>
            <span class="nx">tracklist_name</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">name</span>
            <span class="nx">tracklist_date</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">date</span>

            <span class="c1">// Authenticate and make playlist
</span><span class="c1"></span>            <span class="nx">chrome</span><span class="p">.</span><span class="nx">identity</span><span class="p">.</span><span class="nx">launchWebAuthFlow</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="nx">url</span><span class="o">:</span> <span class="nx">get_url</span><span class="p">,</span>
                    <span class="nx">interactive</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="p">},</span> <span class="nx">authenticateSpotify</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>This is a listener that responds to my message containing a tracklist.
All the listener does is store the information in global variables (I know it can be bad practice but this is a small program with a specific purpose) and launch an authentication flow with my link.</p>
<p>Once this is done, I then call the <code>authenticateSpotify</code> method.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">authenticateSpotify</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
    <span class="c1">// Get parameters from response
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">urlParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URLSearchParams</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">chrome</span><span class="p">.</span><span class="nx">identity</span><span class="p">.</span><span class="nx">getRedirectURL</span><span class="p">(),</span> <span class="s1">&#39;&#39;</span><span class="p">))</span>
        <span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>My WebAuthFlow passes a response in the form of a URL containing a parameter with an authorisation code (or a rejection).
I isolate these parameters by stripping off My redirect url and calling <code>URLSearchParams</code> on it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// POST request for access token
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">authRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="s2">&#34;https://accounts.spotify.com/api/token&#34;</span><span class="p">,</span>
    <span class="p">{</span>
        <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
        <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
            <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/x-www-form-urlencoded;charset=UTF-8&#39;</span>
        <span class="p">},</span>
        <span class="nx">body</span><span class="o">:</span> <span class="k">new</span> <span class="nx">URLSearchParams</span><span class="p">(</span>
        <span class="p">{</span> 
        <span class="s1">&#39;grant_type&#39;</span><span class="o">:</span> <span class="s1">&#39;authorization_code&#39;</span><span class="p">,</span> 
        <span class="s1">&#39;code&#39;</span><span class="o">:</span> <span class="nx">urlParams</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;code&#34;</span><span class="p">),</span> 
        <span class="s1">&#39;redirect_uri&#39;</span><span class="o">:</span> <span class="nx">chrome</span><span class="p">.</span><span class="nx">identity</span><span class="p">.</span><span class="nx">getRedirectURL</span><span class="p">(),</span>
        <span class="s1">&#39;client_id&#39;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">client_id</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span>
        <span class="s1">&#39;client_secret&#39;</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">client_secret</span><span class="si">}</span><span class="sb">`</span>
        <span class="p">})</span> 
    <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>I then construct a POST request to Spotify by exchanging my authorisation code, and client details for an access token.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// Create playlist
</span><span class="c1"></span>    <span class="nx">fetch</span><span class="p">(</span><span class="nx">authRequest</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">){</span>
            <span class="nx">createPlaylist</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">access_token</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>I then send this POST request, receive a response, parse the JSON response and send the access token to the <code>createPlaylist</code> function.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">getSpotifyID</span><span class="p">(</span><span class="nx">access_token</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">userRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="s2">&#34;https://api.spotify.com/v1/me&#34;</span><span class="p">,</span>
    <span class="p">{</span>
        <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;GET&#34;</span><span class="p">,</span>
        <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">Authorization</span><span class="o">:</span> <span class="sb">`Bearer </span><span class="si">${</span><span class="nx">access_token</span><span class="si">}</span><span class="sb">`</span>
        <span class="p">}</span>
    <span class="p">})</span>
    <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">userRequest</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span>
    <span class="k">return</span> <span class="nx">json</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>To know which account I&rsquo;m working with I ask for the profile ID.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">createPlaylist</span><span class="p">(</span><span class="nx">access_token</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">trackURIS</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1">// Add create Spotify URIs from track links
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">track</span> <span class="k">of</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">tracklist</span><span class="p">)){</span>
        <span class="nx">trackURIS</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="sb">`&#34;</span><span class="si">${</span><span class="nx">track</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&#34;https://open.spotify.com/track/&#34;</span><span class="p">,</span> <span class="s2">&#34;spotify:track:&#34;</span><span class="p">)</span><span class="si">}</span><span class="sb">&#34;`</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The Spotify API does not want the tracks in the form of a link it wants a uri in the form <code>spotify:track:trackid</code>.
So for each link in our track list I replace the link part with <code>spotify:track:</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// Create new playlist
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="sb">`https://api.spotify.com/v1/users/</span><span class="si">${</span><span class="nx">id</span><span class="si">}</span><span class="sb">/playlists`</span><span class="p">,</span>
    <span class="p">{</span>
        <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
        <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
            <span class="s2">&#34;Authorization&#34;</span><span class="o">:</span> <span class="sb">`Bearer </span><span class="si">${</span><span class="nx">access_token</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span>
            <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/json&#34;</span>
        <span class="p">},</span>
        <span class="nx">body</span><span class="o">:</span> 
<span class="sb">`{
</span><span class="sb">    &#34;name&#34;: &#34;</span><span class="si">${</span><span class="nx">tracklist_name</span><span class="si">}</span><span class="sb"> | </span><span class="si">${</span><span class="nx">tracklist_date</span><span class="si">}</span><span class="sb">&#34;,
</span><span class="sb">    &#34;description&#34;: &#34;Made using Sounds2Spotify&#34;
</span><span class="sb">}`</span>
    <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>Before I can add to a playlist, I need to create one first, so I construct a request to do just that using the authorisation token, and the user ID.
I use the page name, and date from the BBC Sounds page as the title of the playlist.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// Add tracklist songs to newly created playlist
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="sb">`https://api.spotify.com/v1/playlists/</span><span class="si">${</span><span class="nx">playlistID</span><span class="si">}</span><span class="sb">/tracks`</span><span class="p">,</span>
    <span class="p">{</span>
        <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
        <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
            <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/json&#34;</span><span class="p">,</span>
            <span class="nx">Authorization</span><span class="o">:</span> <span class="sb">`Bearer </span><span class="si">${</span><span class="nx">access_token</span><span class="si">}</span><span class="sb">`</span>
        <span class="p">},</span>
        <span class="nx">body</span><span class="o">:</span> 
<span class="sb">`{
</span><span class="sb">    &#34;uris&#34;: [</span><span class="si">${</span><span class="nx">trackURIS</span><span class="si">}</span><span class="sb">]
</span><span class="sb">}`</span>
    <span class="p">})</span>

    <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>The response of my request contains the playlist ID which I then feed into our next request to add my list of tracks to the playlist.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// Open tab to new playlist
</span><span class="c1"></span>    <span class="nx">chrome</span><span class="p">.</span><span class="nx">tabs</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="sb">`https://open.spotify.com/playlist/</span><span class="si">${</span><span class="nx">playlistID</span><span class="si">}</span><span class="sb">`</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>Finally, I open up the playlist in a new tab.</p>
<h1 id="retrospective">Retrospective</h1>
<p>Overall, I am very pleased with what I managed to achieve.
I have very limited experience in using JavaScript to interact with REST APIs, but I managed to pick it up reasonably quickly.</p>
<p>The code I think is relatively clean for a first attempt.
Obviously if any of the request throw an error then there is not much in the way of handling a response, but JavaScript tends to be pretty robust with errors and this isn&rsquo;t a product that is going to be released on any web store or anything.</p>
<h1 id="reason-for-installation-procedure">Reason for Installation Procedure</h1>
<p>The reason why this project is not going to be released on a web store is for security reasons.
A part of the process requires sending Spotify secret API keys for the corresponding Spotify app.
This would mean that my secret keys would have to be in the client-side code, and therefore be freely accessible.</p>
<p>It would therefore be possible for someone to pose as my extension and start making requests as my app to users.</p>
<p>The installation process isn&rsquo;t so cumbersome to be impossible to install, but it isn&rsquo;t as plug and play as I would like it to be</p>
<h1 id="sources-of-information">Sources of Information</h1>
<ul>
<li>Spotify API Docs - <a href="https://developer.spotify.com/documentation/web-api/">https://developer.spotify.com/documentation/web-api/</a>
<ul>
<li><a href="https://developer.spotify.com/console/playlists/" target="_blank" rel="noopener noreffer">Playlists</a></li>
</ul>
</li>
<li>Chrome extension API Docs - <a href="https://developer.chrome.com/docs/extensions/reference/">https://developer.chrome.com/docs/extensions/reference/</a>
<ul>
<li><a href="https://developer.chrome.com/docs/extensions/reference/identity/#method-getRedirectURL" target="_blank" rel="noopener noreffer">identity</a></li>
<li><a href="https://developer.chrome.com/docs/extensions/mv2/messaging/" target="_blank" rel="noopener noreffer">Message Passing</a></li>
</ul>
</li>
<li>Mozilla Web API Docs - <a href="https://developer.mozilla.org/en-US/docs/Web/API">https://developer.mozilla.org/en-US/docs/Web/API</a>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch" target="_blank" rel="noopener noreffer">fetch()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" target="_blank" rel="noopener noreffer">Response</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreffer">Promise</a></li>
</ul>
</li>
</ul>
]]></description>
</item><item>
    <title>Inspection and Dissection: Calmer Internet - My First Web Extension</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-calmer-internet/</link>
    <pubDate>Wed, 18 Aug 2021 15:18:16 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-calmer-internet/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/calmer-internet/banner_1920x960.png" referrerpolicy="no-referrer">
            </div><blockquote>
<p>The product page is available <a href="/calmer-internet" rel="">here</a></p>
</blockquote>
<h1 id="brief-description">Brief Description</h1>
<p><em>Calmer Internet</em> is a web extension for Chrome, Firefox, and Edge that makes the internet a less infuriating place to be.
It removes comments, recommended content and various trending pages from Twitter, YouTube, and Instagram to try and relieve that doom-scrolling.</p>
<h1 id="rationale">Rationale</h1>
<p>Since I finished stage 1 of University in June, I had a considerable amount of time off.
A lot of that time was spent in a state of not quite working and not quite relaxing.
I was stuck in a cycle of following the YouTube sidebar of bland content before going to Twitter and scrolling down the trending hashtags and comments, getting annoyed at every step.</p>
<p>Many social media platforms just throw various things at you in an attempt to just keep scrolling and clicking and engaging, before you know it you&rsquo;ve spent an hour of your life on a soul-sucking site.</p>
<p>I didn&rsquo;t want to quit these sites entirely.
There are truly incredible and insightful people on there like <a href="https://www.youtube.com/user/enyay" target="_blank" rel="noopener noreffer">Tom Scott</a>, <a href="https://www.youtube.com/c/Exurb1a" target="_blank" rel="noopener noreffer">exurb1a</a>, and <a href="https://www.youtube.com/channel/UCE1jXbVAGJQEORz9nZqb5bQ" target="_blank" rel="noopener noreffer">Ahoy</a>.
Twitter is also good as a micro-blog feed for people I want to follow in the tech sector.
The conclusion I came to is that I need to take control of what I see.
I should only be consuming things I have actively sought out, because those are the things that I enjoy the most.
It also means that I can&rsquo;t just keep scrolling and watching forever, I will run out of content because I only see what I have subscribed to.
There is no &lsquo;one more click&rsquo;</p>
<p>My initial solution was to have everything go to an RSS reader but most social media platforms don&rsquo;t play nicely with rss feeds and feed readers don&rsquo;t really play nicely with conveying threads, retweets and video content.
As a result, I turned to editing the sites themselves to provide a more focused experience.</p>
<h1 id="how-its-made">How it&rsquo;s made</h1>
<p>This extension didn&rsquo;t start out as an extension. It started out as a set of rules for my ad-blocker.
I&rsquo;d use the eyedropper tool to select the <em>Trending</em> bar on Twitter just so I wouldn&rsquo;t be tempted to click it.
I did similar things with the trending tab on YouTube.
It then got to a point where I wanted to do more like remove the recommended sidebar and the video-wall end screens, so I decided I needed a web extension.</p>
<p>I have never made a web extension before, but I do have some experience in HTML and JavaScript so it wasn&rsquo;t too troublesome to get used to.
Most of what my extension does takes place in a &lsquo;content script&rsquo;.
This is a javascript file that just loaded alongside the current page at load time.
The file then looks at the current URL and checks the page for any elements I&rsquo;ve told it to remove.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">// Adding Twitter elements to a list of elements to remove
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span> <span class="o">===</span> <span class="s2">&#34;twitter.com&#34;</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span> <span class="o">===</span> <span class="s2">&#34;mobile.twitter.com&#34;</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterTrendingBar&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;trendingBar&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;div[aria-label=&#39;Timeline: Trending now&#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterExploreLinks&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;exploreLinks&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;a[href=&#39;https://www.lukebriggs.dev/explore&#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterWhoToFollow&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;miscStyling&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">&#34;css-1dbjc4n r-1867qdf r-1phboty r-rs99b7 r-1ifxtd0 r-1bro5k0 r-1udh08x&#34;</span><span class="p">)</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;whoToFollow&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;aside[aria-label=&#39;Who to follow&#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;TwitterTopics&#34;</span><span class="p">]){</span>
            <span class="nx">elementsToRemove</span><span class="p">[</span><span class="s2">&#34;topics&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;div[aria-label=&#39;Timeline: &#39;]&#34;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The script then attaches a listener that causes new checks every time the webpage is updated</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="kd">function</span> <span class="nx">observeBodyRemove</span><span class="p">(){</span>
        <span class="c1">// Select the node that will be observed for mutations
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">targetNode</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">);</span>

        <span class="c1">// Options for the observer (which mutations to observe)
</span><span class="c1"></span>        <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">attributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">childList</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">subtree</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>

        <span class="c1">// Callback function to execute when mutations are observed
</span><span class="c1"></span>        <span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mutationsList</span><span class="p">,</span> <span class="nx">observer</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">elementsToRemove</span> <span class="o">=</span> <span class="nx">getElementsToRemove</span><span class="p">();</span>
            <span class="k">for</span><span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">elementsToRemove</span><span class="p">){</span>
                <span class="k">for</span> <span class="p">(</span><span class="nx">element</span> <span class="k">of</span> <span class="nx">elementsToRemove</span><span class="p">[</span><span class="nx">key</span><span class="p">]){</span>
                    <span class="k">try</span> <span class="p">{</span>
                        <span class="nx">element</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
                    <span class="p">}</span>
                    <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">};</span>

        <span class="c1">// Create an observer instance linked to the callback function
</span><span class="c1"></span>        <span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>

        <span class="c1">// Start observing the target node for configured mutations
</span><span class="c1"></span>        <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">targetNode</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The only other JavaScript in the extension is in a &lsquo;background script&rsquo;.
Whereas &lsquo;content scripts&rsquo; are loaded alongside a webpage, background scripts are persistent and always run whenever the extension is loaded.
This means they are useful for doing things before a page is loaded.
One feature of the extension is you can redirect any links to YouTube.com to youtube.com/feed/subscriptions, so you aren&rsquo;t bombarded by useless recommendations.
I initially had the redirect in a content script but that required the whole page to be loaded before redirecting away from it.</p>
<p>My current solution uses the WebRequest API to intercept a page request and load a new one instead.
This is also done be setting up a listener, such as this one:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// YouTube
</span><span class="c1"></span>    <span class="nx">chrome</span><span class="p">.</span><span class="nx">webRequest</span><span class="p">.</span><span class="nx">onBeforeRequest</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span>
        <span class="kd">function</span> <span class="p">(</span><span class="nx">details</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">[</span><span class="s2">&#34;YTHomeRedirect&#34;</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span><span class="nx">redirectUrl</span><span class="o">:</span> <span class="s2">&#34;https://youtube.com/feed/subscriptions&#34;</span><span class="p">};</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">urls</span><span class="o">:</span> <span class="p">[</span>
                <span class="s2">&#34;*://*.youtube.com/&#34;</span>
            <span class="p">],</span>
            <span class="nx">types</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;main_frame&#34;</span><span class="p">,</span> <span class="s2">&#34;sub_frame&#34;</span><span class="p">,</span> <span class="s2">&#34;stylesheet&#34;</span><span class="p">,</span> <span class="s2">&#34;script&#34;</span><span class="p">,</span> <span class="s2">&#34;image&#34;</span><span class="p">,</span> <span class="s2">&#34;object&#34;</span><span class="p">,</span> <span class="s2">&#34;xmlhttprequest&#34;</span><span class="p">,</span> <span class="s2">&#34;other&#34;</span><span class="p">]</span>
        <span class="p">},</span>
        <span class="p">[</span><span class="s2">&#34;blocking&#34;</span><span class="p">]</span>
    <span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>Finally, all that was left was to create a manifest.
I have great experience with manifests since <a href="https://github.com/LukeBriggsDev/Pepys" target="_blank" rel="noopener noreffer">Pepys recently received builds for rpm, .deb, and PKGBUILD</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;manifest_version&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Calmer Internet&#34;</span><span class="p">,</span>
  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.1.0&#34;</span><span class="p">,</span>
  <span class="nt">&#34;browser_specific_settings&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;gecko&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;calmerinternet@lukebriggs.dev&#34;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nt">&#34;browser_action&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;default_icon&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;16&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/16.png&#34;</span><span class="p">,</span>
      <span class="nt">&#34;24&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/24.png&#34;</span><span class="p">,</span>
      <span class="nt">&#34;32&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/32.png&#34;</span>
    <span class="p">},</span>
    <span class="nt">&#34;default_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Calmer Internet&#34;</span>
  <span class="p">},</span>
  <span class="nt">&#34;icons&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;48&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/48.png&#34;</span><span class="p">,</span>
    <span class="nt">&#34;96&#34;</span><span class="p">:</span> <span class="s2">&#34;icons/96.png&#34;</span>
  <span class="p">},</span>
  <span class="nt">&#34;content_scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="nt">&#34;matches&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">&#34;*://*.youtube.com/*&#34;</span><span class="p">,</span>
      <span class="s2">&#34;*://*.twitter.com/*&#34;</span><span class="p">,</span> <span class="s2">&#34;*://twitter.com/*&#34;</span><span class="p">,</span>
      <span class="s2">&#34;*://*.instagram.com/*&#34;</span>
    <span class="p">],</span>
    <span class="nt">&#34;js&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;calmer.js&#34;</span><span class="p">]</span>
  <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;scripts&#34;</span><span class="p">:[</span><span class="s2">&#34;background.js&#34;</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&#34;*://*.youtube.com/*&#34;</span><span class="p">,</span>
    <span class="s2">&#34;*://*.twitter.com/*&#34;</span><span class="p">,</span> <span class="s2">&#34;*://twitter.com/*&#34;</span><span class="p">,</span>
    <span class="s2">&#34;*://*.instagram.com/*&#34;</span><span class="p">,</span>
    <span class="s2">&#34;storage&#34;</span><span class="p">,</span>
    <span class="s2">&#34;webRequest&#34;</span><span class="p">,</span>
    <span class="s2">&#34;webRequestBlocking&#34;</span>
  <span class="p">],</span>
  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Provides a calmer internet experience. Removes comments and various recommendation elements from Twitter, YouTube, Instagram.&#34;</span><span class="p">,</span>
  <span class="nt">&#34;options_ui&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;options.html&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="deployment">Deployment</h1>
<p>The extension is available on the Chrome Web Store, the Firefox Add-on Store, and the Microsoft Store.
WebExtensions are now pretty cross-compatible, so I use the exact same code-base across all browsers.
It would even support Safari as of Big Sur, but I do not have a Mac to upload it, nor do I want to fork out the $99 price of an Apple Developer account.</p>
<p>As ever, the project is also available in full on my <a href="https://github.com/LukeBriggsDev/calmer-internet" target="_blank" rel="noopener noreffer">GitHub</a></p>
]]></description>
</item><item>
    <title>Full Release: newcastle-bst - Harvard referencing style as recommended by Newcastle University</title>
    <link>https://www.lukebriggs.dev/full-release-newcastle-bst/</link>
    <pubDate>Sat, 10 Jul 2021 10:33:04 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/full-release-newcastle-bst/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/full-release-newcastle-bst/bibtex.png" referrerpolicy="no-referrer">
            </div><p>A couple of months ago I released <a href="/the-laypersons-guide-to-latex" rel="">a blog post about LateX</a>.
At the bottom of the post I made quick reference to a BibTeX style I had created for the referencing used by Newcastle University.
The style had a few bugs and was quite hard to find it but it was left dormant while I made some other software and focused on work.</p>
<p>I am now pleased to say that I have spent some work polishing it up, fixing some issues, and giving it a proper release.
It&rsquo;s even on <a href="https://ctan.org/pkg/newcastle-bst" target="_blank" rel="noopener noreffer">CTAN!</a>.
If you are a student and notice any issues, please report them on <a href="https://github.com/LukeBriggsDev/Newcastle-BibTeX/issues" target="_blank" rel="noopener noreffer">GitHub</a></p>
<h1 id="release-notes">Release Notes</h1>
<h2 id="newcastle-bst-harvard-referencing-style-as-recommended-by-newcastle-university">newcastle-bst: Harvard referencing style as recommended by Newcastle University</h2>
<p>This package provides a <a href="https://ctan.org/pkg/BibTeX" target="_blank" rel="noopener noreffer">BibTeX</a> style to format reference lists in the <a href="https://libguides.ncl.ac.uk/managing/harvard" target="_blank" rel="noopener noreffer">Harvard at Newcastle</a> style recommended by Newcastle University. It should be used alongside <a href="https://ctan.org/pkg/natbib" target="_blank" rel="noopener noreffer">natbib</a> for citations.</p>
<h3 id="installation">Installation</h3>
<p>The required style file is available from <a href="https://github.com/LukeBriggsDev/Newcastle-BibTeX" target="_blank" rel="noopener noreffer">GitHub</a> and <a href="https://ctan.org/pkg/newcastle-bst" target="_blank" rel="noopener noreffer">CTAN</a>. You can use the style by copying it into your working directory containing your <code>.tex</code> file. You can also add it to your bst directory in your tex path to use it without having to copy it over each time.</p>
<h3 id="using-the-style">Using the style</h3>
<p>To use the style include this in your preamble:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex"><span class="k">\usepackage</span><span class="nb">{</span>natbib<span class="nb">}</span>
<span class="k">\usepackage</span><span class="na">[UKenglish]</span><span class="nb">{</span>isodate<span class="nb">}</span>
<span class="k">\bibliographystyle</span><span class="nb">{</span>newcastle<span class="nb">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Also remember to specify your <code>.bib</code> file at the end of the document:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex"><span class="k">\bibliography</span><span class="nb">{</span>file<span class="nb">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The easiest way to create .bib files for this style is through exporting entries from a reference manager such as <a href="https://www.mendeley.com/" target="_blank" rel="noopener noreffer">Mendeley</a>.
However, some parts are not available through this (such as titleaddon for computer programs).
If you notice any discrepancies between generated references and the recommended styles then please raise this on <a href="https://github.com/LukeBriggsDev/Newcastle-BibTeX/issues" target="_blank" rel="noopener noreffer">GitHub</a></p>
<h3 id="license">License</h3>
<p>Copyright 2021 Luke Briggs
This work consists of the documented <code>newcastle.bst</code> file.</p>
<p>The text files contained in this work may be distributed and/or modified under the conditions of the LATEX Project Public License (LPPL), either version 1.3c of this license or (at your option) any later version.</p>
<p>This work has had no input from Newcastle University and is done entirely in order to help other students create bibliography quicker.</p>
<p>This work is ‘maintained’ (as per LPPL maintenance status) by Luke Briggs.</p>
]]></description>
</item><item>
    <title>Inspection and Dissection: Pepys - A Straightforward Markdown Editor</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-pepys/</link>
    <pubDate>Mon, 31 May 2021 16:47:38 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-pepys/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/inspection-and-dissection-pepys/BookLogoLargeWhite.svg" referrerpolicy="no-referrer">
            </div><blockquote>
<p>The product page is available <a href="/pepys" rel="">here</a></p>
</blockquote>
<h1 id="brief-description">Brief Description</h1>
<p>Pepys is a GUI journaling application built using Python bindings for the Qt framework.
It is available as an installer for Windows and a Flatpak on Linux.</p>
<h1 id="background">Background</h1>
<p>I started journaling around February last year, it was probably the most prescient thing I have ever done.
It wasn&rsquo;t long before we all went into self-imposed isolation and journaling provided a good way to express my thoughts.</p>
<p>My first posts were made in one big Word document.
Journals need to be as future-proof as possible, and I thought at the time that since entire governments are probably reliant on MS Word that it won&rsquo;t be going away any time soon.
It wasn&rsquo;t a good experience though.
Having to type the date each time was tiresome, and I thought it would be a formatting mess should I use an Operating System without MS Word (something which would later happen when I spent several months using Linux).</p>
<p>I next moved on to <a href="https://notion.so" target="_blank" rel="noopener noreffer">Notion</a>.
An excellent productivity application that can be used to do all sorts from notes to spreadsheets to databases.
It&rsquo;s template, tagging and calendar features made it a great prospect for writing my journal in.
The entries were made in Markdown so would be viewable on any computer for as long as we still used ASCII and Unicode, seems pretty future proof.
The trouble was, it made journal writing a chore.
To write an entry I&rsquo;d have to open up this electron application that took an <em>age</em> to open and slowly click through web links, waiting for pages to load, before I could get to writing entries.
I wanted a native application that would allow me to write journal entries in markdown, with a date-based file chooser.
I found no application that fitted all this criteria that worked on Linux and Windows, they all seemed Mac only (I am envious of the great ecosystem Apple cultivates among its development community).
So I took it upon myself to write my own.</p>
<h1 id="a-rocky-start">A Rocky Start</h1>
<p>The first idea for a Journal application first came to me in June 2020 but it would take nearly a year before I would find the time and the courage to actually start it.</p>
<p>My only experience with a GUI application that wasn&rsquo;t made in a dedicated game engine was <a href="/inspection-and-dissection-dice-jack" rel="">Dice-Jack</a> which was a version of blackjack that used Dice instead of cards and was made over a few days for an assignment as part of my Sixth Form Computing course.
I knew I couldn&rsquo;t use dotNet since I wanted it to be able to run on Linux as well as Windows.
My next thought was Java, since that was the language I was learning at University at the time and seemed to fit all my requirements.</p>
<p>I managed to get a very early text editor working in Java.
At that point, the idea was to have all the styling done in real time as you typed.
For example, if I typed a <code>#</code> then I would set the font size you type in to that of a title.</p>
<p>I was running into issues that were perfectly fixable but I was never truly comfortable in Java.
I will absolutely use Java in the future but it just didn&rsquo;t seem right with this project.
With Java I had the choice between the ancient swing and JavaFX.
I have never got to grasps with the whole split GUI framework where some bits are in code and some bits are in XML files.
All the GUI frameworks are going this way so I will have to get my head around it eventually but this was not the project for this.</p>
<h1 id="a-walk-in-the-dark">A Walk in the Dark</h1>
<p>After bouncing of Java frameworks I had to go with what I know, Python.
Python was the first language I learned and I&rsquo;ve been using it for coming up 4 years now.
The big players in the Python GUI game is Gtk, Qt, wxWidgets, and Tkinter.
Tkinter and wxWidgets are the more simple of the four with the majority of applications being built in either Gtk or Qt.
In the end I settled with Qt because it seemed to have better look and feel across different systems, and Gtk seemed to want me to use build systems that I was unfamiliar with.
I first broke ground with the first <a href="https://github.com/LukeBriggsDev/Pepys/commit/66f42549e53db7a43224d317be2191b2000e0d94" target="_blank" rel="noopener noreffer">git commit</a> being pushed at 20:29 BST on April 1st.
This was the first commit to the repo that would become the final release, this came at the end of several weeks of the aforementioned bouncing around.</p>
<h2 id="syntax-highlighting">Syntax Highlighting</h2>
<figure>

<figcaption>An early version of the edit pane</figcaption>
</figure>
My primary focus was in getting markdown source highlighting in the text window.
Things like bold, italic, and strike-through came rather quickly but became incredibly slow with large amounts of text.
My initial solution to the syntax highlighting was a naive one.
I would be performing regex searches and applying text character formatting across the document on each key press.
The approach was okay on small documents, but the larger the document the more text would be searched through and it would become impossible to type.
The first breakthrough came when I discovered a Qt widget called QSyntaxHighlighter which provided methods that would allow text to be broken up into 'blocks'.
I put all my regular expressions into a QSyntaxHighlighter and used its blocking mechanism to allow for typing to not be slowed down on large documents.
<h2 id="html-preview">HTML Preview</h2>
<figure>

<figcaption>An early version of the view pane</figcaption>
</figure>
Alot of the early work went into refining my markdown regular expressions, making sure they formatted the correct parts and matched the output reasonably.
It wasn't long before I had to turn my attention to the HTML preview.
The preview pane was initially just a QTextBrowser that supported a limited subset of HTML.
When the preview button was clicked the markdown would be converted to html using [mistune](https://mistune.readthedocs.io/en/latest/).
I had used mistune previously on the [first iteration of this website](/inspection-and-dissection-this-site) so a lot of that could be copied and pasted from my work there.
<p>The fact that only a subset of HTML was supported soon became an issue and I had to switch the preview to a full on web engine (the reason why the application is so large).
The web engine was such a double edged sword.
Without it: previews wouldn&rsquo;t match exports, math equations wouldn&rsquo;t be supported, many markdown elements couldn&rsquo;t be rendered properly (tables, inline html).
But with it, the application swells in size to over 100MB download and even larger when fully installed.
I wish I could resolve this alas I am too tired and too unskilled to be able to implement a solution.</p>
<h2 id="the-killer-feature">The Killer Feature</h2>
<p>It was around this time that I went into exploring <a href="https://pandoc.org/" target="_blank" rel="noopener noreffer">pandoc</a>.
I was amazed by its power and I will undoubtedly utilise it in many future projects.
Pandoc is a program written in haskell that uses its own flavour of markdown to provide a <em>huge</em> amount of outputs for document conversion.
I knew I had to implement this in some way to provide some way of providing a wide range of export option.
Then I will have truly realised my need of having entries been in a future proof format, why have 1 future proof format when you can have every format under the Sun?</p>
<h2 id="calendar-file-selector">Calendar File Selector</h2>
<p>I knew that my main method of interacting with files should be through a calendar.
Qt provides a reasonably good calendar widget that saved alot of time.
The way I keep track of the files in a user&rsquo;s journal is by having a very rigid folder structure which Pepys gets pointed to.
The journal directory has a structure of <code>YYYY\MM\DD\YYYY-MM-DD\YYYY-MM-DD.md</code> This makes it very easy to search for all the entries by date.</p>
<h2 id="release">Release</h2>
<figure>
<table>
<tr>
<th>

</th>
<th>

</th>
<th>

</th>
</tr>
</table>
<figcaption>A comparison of different logos I went through</figcaption>
</figure>
<p>I have went into my woes over releasing software <a href="/flatpak-instructions-not-included" rel="">here</a> but it is safe to say that this is an are where I learned an awful lot.
In the end Pepys was released on Linux via flatpak and on Windows via an NSIS installer <a href="https://github.com/LukeBriggsDev/Pepys/releases/" target="_blank" rel="noopener noreffer">available to download on GitHub</a>.
There was no Mac release because I do not own a Mac no have sufficient experience with Macs to be comfortable with creating installers and sufficiently testing them for correctness.</p>
<h1 id="a-retrospective">A Retrospective</h1>
<p>This whole process has been the longest I have ever spent on a project, it was probably the largest project I have ever made, and there were alot of firsts.
It was the first application I made that wasn&rsquo;t a game, it was the first proper GUI application I have made, and it was the first time I had to make installers by hand.
The process was arduous at times and I felt like giving up at some points.</p>
<p>I sit here now after releasing it and I think &ldquo;if I&rsquo;d only done this&rdquo; or &ldquo;it would be so much better if&hellip;&rdquo; but I can&rsquo;t think like that.
If I had spent as long as possible on each feature till it was perfect then the software would never be released.
I have learned that software development is an iterative process in 2 ways.
The first way is in relation to an individual piece of software.
You develop the software over time, slowly improving and adding until a finished product stumbles over the finish line.
The second way is at a macroscopic level.
Each huge project your begin, each journey you embark on, brings a new iteration on what went before.
The next GUI project I make <em>will</em> be better.
The next installer I make <em>will</em> be better.
And this excites me.</p>
<p>I suppose it has taken me until the end of my first year of University to understand what learning is really about.
Learning isn&rsquo;t about passing tests, although schools may tell you otherwise.
Learning isn&rsquo;t even about knowing stuff, that is just a by-product.
Learning is about being better, about knowing you <em>will</em> be better, and about being excited about that.
I am excited about what I will create next, how I will iterate on what I have learned, and how I can surprise myself.</p>
<h1 id="special-thanks">Special Thanks</h1>
<p>All of this took an awful lot of effort so I would like to give special thanks to the following people and projects for there valuable insights.</p>
<dl>
<dt><a href="https://gitlab.gnome.org/World/apostrophe" target="_blank" rel="noopener noreffer">Apostrophe</a></dt>
<dd>An excellent markdown editor that shows how to make a properly good writing experience and led me down the Pandoc path. Also inspired some of the regex used.</dd>
<dt><a href="https://github.com/hermitdemschoenenleben/linien" target="_blank" rel="noopener noreffer">Humboldt University Optical Metrology Group</a></dt>
<dd>Without whom I&rsquo;d still be wrestling with compilers in Flatpak</dd>
<dt><a href="https://akaru.me/" target="_blank" rel="noopener noreffer">Lucy Marsden</a> (<a href="https://github.com/noneuclideanmotion" target="_blank" rel="noopener noreffer">Github</a>)</dt>
<dd>Who provided a second set of eyes and motivated me to actually get stuff done.</dd>
<dt><a href="https://github.com/FedoraQt/adwaita-qt" target="_blank" rel="noopener noreffer">Jan Grulich</a></dt>
<dd>For showing how to implement Adwaita colours in Qt</dd>
</dl>
]]></description>
</item><item>
    <title>Flatpak: Instructions Not Included</title>
    <link>https://www.lukebriggs.dev/flatpak-instructions-not-included/</link>
    <pubDate>Sat, 22 May 2021 19:08:56 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/flatpak-instructions-not-included/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/flatpak-instructions-not-included/flatpak.svg" referrerpolicy="no-referrer">
            </div><p>There is a very peculiar thing I have found in software development, it is incredibly difficult to actually get software on other people&rsquo;s machines. Even compiled languages can have difficulty.</p>
<h2 id="context">Context</h2>
<p>I am elbow deep in a very large personal project at the moment (all will be revealed soon) that has so far taken a month. The project is getting to a stage now where deployment methods have to be evaluated. From the beginning I wanted the project to be fully cross platform across Windows, Linux, Mac with a singular codebase. Because of these specific requirements, I went with the <a href="https://www.qt.io/product/framework" target="_blank" rel="noopener noreffer">Qt GUI framework</a>, it is cross platform, runs natively on each platform, and has bindings for Python (my preferred language).</p>
<p>Because nothing is ever easy, there are actually two different python bindings for Qt. There is <a href="https://en.wikipedia.org/wiki/PySide" target="_blank" rel="noopener noreffer">PySide</a> which was created by the Qt Company themselves. It has a less restrictive license, but seems to have less of a community around it due to it being the newer of the two bindings. The other binding is called <a href="https://en.wikipedia.org/wiki/PyQt" target="_blank" rel="noopener noreffer">PyQt</a> and came first, even being called <code>python3-qt</code> in the fedora package manager. When it comes down to coding, there is pretty much no difference between them since they are all just pythonic fronts for the same C++ back-end. For the whole project up until recently I was using PySide since it is the same in every way except for a better license.</p>
<h2 id="python-deployment">Python Deployment</h2>
<p>Python, as it is shipped as CPython, does not (by default) compile to machine code. You&rsquo;ll notice a parenthetical and a subordinate clause in the previous sentence, that&rsquo;s how windy this road goes.</p>
<p>There are systems that will turn your python code into binary executables, I was using <a href="https://www.pyinstaller.org/" target="_blank" rel="noopener noreffer">PyInstaller</a> to get the job done for me. I&rsquo;d run it on Linux, Windows, MacOS and all my code would be packaged in to binary form; there was the issue of non-python dependencies I had but I could find ways around that. So there I was with all my binaries in a row and feeling confident about how I&rsquo;m going to deploy my application.</p>
<h2 id="linux-binary-woes">Linux Binary Woes</h2>
<p>My current main machine runs Fedora Linux, this is a distribution that is kept reasonably up to date and, at the time of writing, has a new desktop environment and newer kernel than other non-Arch distros. All of this meant that when I tried to run my Linux compiled program on Ubuntu (A major distro I want to support), I get thrown an error that Ubuntu doesn&rsquo;t have the correct version of glibc (the dynamically linked C libraries). Sticking with the standard glibc versions that come with each distro, GNU/Linux is backwards compatible but not forwards compatible. That is to say that a program compiled on an older distro will run on a newer distro but not vice-versa. The solution to this seems straightforward doesn&rsquo;t it? Compile the program on an older version. So I loaded up an Ubuntu LTS VM, compile the program, works like a charm. I try to run that same executable on my main Fedora machine and I get an error message:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cmd" data-lang="cmd">Settings schema &#39;org.gnome.settings-daemon.plugins.xsettings&#39;
does not contain a key named &#39;antialiasing&#39;
</code></pre></td></tr></table>
</div>
</div><p>The program does not run. This is without doubt a bug in Gnome 40. But it is a bug that happens 100% of the time, it may get fixed, it may not. My application is either incompatible with anything other than my own machine, or compatible with everything <em>except</em> my own machine. Of course I could have two separate binaries, but that would be a bit of a hassle to maintain. In comes what I thought would be my saviour, Flatpak.</p>
<h3 id="build-systems">Build Systems</h3>
<p>Linux has 3 main methods of deploying applications. Shipping binaries, making per distribution packages, and containers (of which flatpak is one). Binaries are, as we&rsquo;ve seen, version dependent, packages are distribution dependent, and containers run across all machines but have extra bulk since they package there own dependencies rather than relying on system libraries.</p>
<p>Throughout my exploration of deployment options, I have made all three. I have documented my results of binaries, and I also went on to make an RPM package (the packaging system that Fedora uses).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">Name:           Pepys
Version:        0.3.0
Release:        8%<span class="o">{</span>?dist<span class="o">}</span>
Summary:        A straightforward markdown journal

License:        GPLv3
URL:            https://www.lukebriggs.dev/pepys
Source0:        pepys.tar.gz

Requires:       python3, python3-wheel, python3-pip, pandoc, enchant, wkhtmltopdf, python3-qt5, python3-qt5-webengine, python3-regex, python3-num2words, python3-pypandoc, python3-enchant, python3-setproctitle, texlive-mdwtools
BuildRequires:  python3-pip
%description

%build
<span class="nv">MAIN_DIR</span><span class="o">=</span>%<span class="o">{</span>buildroot<span class="o">}</span>/usr/share/pepys
<span class="nv">APP_DIR</span><span class="o">=</span>%<span class="o">{</span>buildroot<span class="o">}</span>/usr/local/share/applications
mkdir -p <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp
mkdir -p <span class="si">${</span><span class="nv">APP_DIR</span><span class="si">}</span>

tar -xzvf %<span class="o">{</span>SOURCE0<span class="o">}</span> -C <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp
<span class="k">if</span> <span class="nb">test</span> -f <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp/src/resources/base/config.json<span class="p">;</span> <span class="k">then</span>
rm <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp/src/resources/base/config.json
<span class="k">fi</span>
<span class="k">if</span> <span class="nb">test</span> -f <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp/src/resources/base/wordlist.txt<span class="p">;</span> <span class="k">then</span>
rm <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp/src/resources/base/wordlist.txt<span class="p">;</span>
<span class="k">fi</span>

cp -r <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp/* <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>
rm -rf <span class="si">${</span><span class="nv">MAIN_DIR</span><span class="si">}</span>/temp


<span class="nb">printf</span> <span class="s2">&#34;[Desktop Entry]\n \
</span><span class="s2">Type=Application\n \
</span><span class="s2">Name=Pepys\n \
</span><span class="s2">Categories=Office;\n \
</span><span class="s2">X-GNOME-FullName=Pepys\n \
</span><span class="s2">Comment=A straightforward markdown journal\n \
</span><span class="s2">Icon=%s/src/main/resources/base/icons/appicons/icon.svg\n \
</span><span class="s2">NoDisplay=false\n \
</span><span class="s2">Exec= python3 %s/src/main/python/main.py\n \
</span><span class="s2">Path=\n \
</span><span class="s2">Terminal=false\n \
</span><span class="s2">X-GNOME-UsesNotifications=false\n \
</span><span class="s2">StartupWMClass=Pepys&#34;</span> <span class="s2">&#34;/usr/share/pepys&#34;</span> <span class="s2">&#34;/usr/share/pepys&#34;</span> &gt; <span class="nv">$APP_DIR</span>/Pepys.desktop
pip3 install PyPDF4


%files
/*

%post
chmod -R <span class="m">777</span> /usr/share/pepys

<span class="c1">#%license add-license-file-here</span>
<span class="c1">#%doc add-docs-here</span>



%changelog
* Sat May <span class="m">15</span> <span class="m">2021</span> Luke Briggs &lt;lukebriggs02@gmail.com&gt;
- 
</code></pre></td></tr></table>
</div>
</div><p><strong>NOTICE: The above is a script used for testing, it is mostly functional but don&rsquo;t use it as a guide for how to do things properly</strong></p>
<p>The above is a script you feed into <code>rpmbuild</code> and it will generate a .rpm file which Fedora users can use to install your software. You can see that all it really is is some metadata listing app information, dependencies (these dependencies are ones that are inside the fedora packaging system), and a shell script to say what gets installed and how. Because all the dependencies are listed, and are all from the the distros package manager, the file size of an rpm only consists of the files that you supply. In my case it was some python source files and some vector icons, totalling 1.2MB. Of course the full size of the app still needs to be downloaded but the other 150MB or so come in the form of system libraries that other apps can also use. This is the classic Linux method of software deployment, it is lean, and ensures compatibility with a particular distro. The problem comes when looking at other distributions. Some distributions also use RPM (CentOS, RHEL, OpenSUSE) but have different packages, and so need special cases in the file. Other distributions use a different package management system, Debian and derivatives use .deb files for instance.</p>
<h3 id="flatpak">Flatpak</h3>
<p><a href="https://en.wikipedia.org/wiki/Flatpak" target="_blank" rel="noopener noreffer">Flatpak</a> and it&rsquo;s rival <a href="https://en.wikipedia.org/wiki/Snap_%28package_manager%29" target="_blank" rel="noopener noreffer">Snap</a> aim to solve the dependency hell by shipping everything together in one big package. You avoid incompatibility at the cost of redundancy. The cover image of this post is my flatpak spec file that gets fed into <code>flatpak-builder</code>. And you may notice that it works in a similar way to a distribution&rsquo;s own package manager.</p>
<p>We have metadata along with base dependencies</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">app-id</span><span class="p">:</span><span class="w"> </span><span class="l">dev.lukebriggs.pepys</span><span class="w">
</span><span class="w"></span><span class="nt">runtime</span><span class="p">:</span><span class="w"> </span><span class="l">org.kde.Platform</span><span class="w">
</span><span class="w"></span><span class="nt">runtime-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;5.15&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">sdk</span><span class="p">:</span><span class="w"> </span><span class="l">org.kde.Sdk</span><span class="w">
</span><span class="w"></span><span class="nt">add-extensions</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">org.freedesktop.Sdk.Extension.texlive</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">directory</span><span class="p">:</span><span class="w"> </span><span class="l">texlive</span><span class="w">
</span><span class="w">    </span><span class="nt">subdirectories</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="nt">autodelete</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;20.08&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">runner.sh</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Because everything is in a sandbox, we have to declare what parts of the host system we have to use</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">finish-args</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- --<span class="l">share=ipc</span><span class="w">
</span><span class="w">  </span>- --<span class="l">socket=x11</span><span class="w">
</span><span class="w">  </span>- --<span class="l">socket=wayland</span><span class="w">
</span><span class="w">  </span>- --<span class="l">socket=pulseaudio</span><span class="w">
</span><span class="w">  </span>- --<span class="l">device=dri</span><span class="w">
</span><span class="w">  </span>- --<span class="l">filesystem=home</span><span class="w">
</span><span class="w">  </span>- --<span class="l">share=network</span><span class="w">
</span><span class="w">  </span>- --<span class="l">env=PATH=/usr/bin:/app/bin:/app/texlive/bin:/app/texlive/bin/x86_64-linux:/app/texlive/bin/aarch64-linux</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And then comes the rest of our dependencies which have to be files we supply, along with the build script we use to actually do what we want with the files.</p>
<h4 id="the-trouble-with-python-qt-and-flatpak">The Trouble with Python, Qt and Flatpak</h4>
<p>All was going swimmingly until I had to get my Qt app in flatpak.
2 of my app dependencies are installed by effectively copying the prebuild binaries into the flatpak sandbox.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pandoc</span><span class="w">
</span><span class="w">    </span><span class="nt">buildsystem</span><span class="p">:</span><span class="w"> </span><span class="l">simple</span><span class="w">
</span><span class="w">    </span><span class="nt">build-commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">ls</span><span class="w">
</span><span class="w">      </span>- <span class="l">install -D bin/pandoc /app/bin/pandoc</span><span class="w">
</span><span class="w">    </span><span class="nt">sources</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">archive</span><span class="w">
</span><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/jgm/pandoc/releases/download/2.13/pandoc-2.13-linux-amd64.tar.gz</span><span class="w">
</span><span class="w">        </span><span class="nt">sha256</span><span class="p">:</span><span class="w"> </span><span class="l">7404aa88a6eb9fbb99d9803b80170a3a546f51959230cc529c66a2ce6b950d4c</span><span class="w">
</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">wkhtmltopdf</span><span class="w">
</span><span class="w">    </span><span class="nt">buildsystem</span><span class="p">:</span><span class="w"> </span><span class="l">simple</span><span class="w">
</span><span class="w">    </span><span class="nt">build-commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">cp -r local/* /app/</span><span class="w">
</span><span class="w">      </span>- <span class="l">ls lib</span><span class="w">
</span><span class="w">    </span><span class="nt">sources</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">archive</span><span class="w">
</span><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox-0.12.6-1.centos8.x86_64.rpm</span><span class="w">
</span><span class="w">        </span><span class="nt">sha256</span><span class="p">:</span><span class="w"> </span><span class="l">5cc267d54fe3f144729f31432a165e028b689583c53cfee0a01d52644ab280d9</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>One of my dependencies is actually built and compiled within the flatpak container. (Given no <code>buildsystem</code> option on archives with makefiles in them, flatpak will automatically compile and install them)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">  - name: enchant
    sources:
      - type: archive
        url: https://github.com/AbiWord/enchant/releases/download/v2.2.15/enchant-2.2.15.tar.gz
        sha256: 3b0f2215578115f28e2a6aa549b35128600394304bd79d6f28b0d3b3d6f46c03
</code></pre></td></tr></table>
</div>
</div><p>So we are back to the dilemma of using source files or prebuilt binaries, you&rsquo;ll see later that the solution is a mix of both.</p>
<p>One option is just shipping a compiled version of my program in a flatpak. The issue is that flatpak&rsquo;s glibc is once again older than my main machine so <em>all</em> flatpak builds would have to be done in an Ubuntu VM, not ideal. Next up comes building from source in the flatpak. My plan for the process was this:</p>
<ol>
<li>Get python and resource files in the flatpak</li>
<li><code>pip install</code> all dependencies</li>
</ol>
<p>Sounds simple enough, but flatpak didn&rsquo;t like me communicating with the internet while installing (I tried <code>share=network</code> on individual modules and it didn&rsquo;t work)
So, each python library had to be down as it&rsquo;s own python module with a link to the tar balls on pypi. Flatpak has a tool for such an occasion called <a href="https://github.com/flatpak/flatpak-builder-tools/tree/master/pip" target="_blank" rel="noopener noreffer">flatpak-pip-generator</a>
so the line in the flatpak yml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="l">python3-requirements.json</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>is a pointer to a file actually containing all pip dependencies</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;python3-requirements&#34;</span><span class="p">,</span>
    <span class="nt">&#34;buildsystem&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span><span class="p">,</span>
    <span class="nt">&#34;build-commands&#34;</span><span class="p">:</span> <span class="p">[],</span>
    <span class="nt">&#34;modules&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;python3-regex&#34;</span><span class="p">,</span>
            <span class="nt">&#34;buildsystem&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span><span class="p">,</span>
            <span class="nt">&#34;build-commands&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&#34;pip3 install --verbose --exists-action=i --no-index --find-links=\&#34;file://${PWD}\&#34; --prefix=${FLATPAK_DEST} \&#34;regex\&#34; --no-build-isolation&#34;</span>
            <span class="p">],</span>
            <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/38/3f/4c42a98c9ad7d08c16e7d23b2194a0e4f3b2914662da8bc88986e4e6de1f/regex-2021.4.4.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;52ba3d3f9b942c49d7e4bc105bb28551c44065f139a65062ab7912bef10c9afb&#34;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;python3-num2words&#34;</span><span class="p">,</span>
            <span class="nt">&#34;buildsystem&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span><span class="p">,</span>
            <span class="nt">&#34;build-commands&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&#34;pip3 install --verbose --exists-action=i --no-index --find-links=\&#34;file://${PWD}\&#34; --prefix=${FLATPAK_DEST} \&#34;num2words\&#34; --no-build-isolation&#34;</span>
            <span class="p">],</span>
            <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/a2/55/8f8cab2afd404cf578136ef2cc5dfb50baa1761b68c9da1fb1e4eed343c9/docopt-0.6.2.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;49b3a825280bd66b3aa83585ef59c4a8c82f2c8a522dbe754a8bc8d08c85c491&#34;</span>
                <span class="p">},</span>
                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/33/db/76f1151a1b0cfad532d41021b77cd231495bf72c47618166f92dcdff2ebe/num2words-0.5.10.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;37cd4f60678f7e1045cdc3adf6acf93c8b41bf732da860f97d301f04e611cc57&#34;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;python3-pypandoc&#34;</span><span class="p">,</span>
            <span class="nt">&#34;buildsystem&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span><span class="p">,</span>
            <span class="nt">&#34;build-commands&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&#34;pip3 install --verbose --exists-action=i --no-index --find-links=\&#34;file://${PWD}\&#34; --prefix=${FLATPAK_DEST} \&#34;wheel\&#34; --no-build-isolation&#34;</span><span class="p">,</span>
                <span class="s2">&#34;pip3 install --verbose --exists-action=i --no-index --find-links=\&#34;file://${PWD}\&#34; --prefix=${FLATPAK_DEST} \&#34;pypandoc\&#34; --no-build-isolation&#34;</span>
            <span class="p">],</span>
            <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/ed/46/e298a50dde405e1c202e316fa6a3015ff9288423661d7ea5e8f22f589071/wheel-0.36.2.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;e11eefd162658ea59a60a0f6c7d493a7190ea4b9a85e335b33489d9f17e0245e&#34;</span>
                <span class="p">},</span>

                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/d6/b7/5050dc1769c8a93d3ec7c4bd55be161991c94b8b235f88bf7c764449e708/pypandoc-1.5.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;14a49977ab1fbc9b14ef3087dcb101f336851837fca55ca79cf33846cc4976ff&#34;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;python3-pyenchant&#34;</span><span class="p">,</span>
            <span class="nt">&#34;buildsystem&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span><span class="p">,</span>
            <span class="nt">&#34;build-commands&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&#34;pip3 install --verbose --exists-action=i --no-index --find-links=\&#34;file://${PWD}\&#34; --prefix=${FLATPAK_DEST} \&#34;pyenchant\&#34; --no-build-isolation&#34;</span>
            <span class="p">],</span>
            <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/1f/d4/52869fe4ed24e373694c116adc00c82e5d92c747be4cbc97b24af43807f6/pyenchant-3.2.0.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;6b97e9a9f132fa7c9029a6635d821ccad67d4980e68186d02c765b4256b6f152&#34;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;python3-PyPDF4&#34;</span><span class="p">,</span>
            <span class="nt">&#34;buildsystem&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span><span class="p">,</span>
            <span class="nt">&#34;build-commands&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&#34;pip3 install --verbose --exists-action=i --no-index --find-links=\&#34;file://${PWD}\&#34; --prefix=${FLATPAK_DEST} \&#34;PyPDF4\&#34; --no-build-isolation&#34;</span>
            <span class="p">],</span>
            <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/4f/1f/509b44850c475c101aa5b5c9b81755cedd363389d6fbb5c53be6fa915a61/PyPDF4-1.27.0.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;7c932441146d205572f96254d53c79ea2c30c9e11df55a5cf87e056c7b3d7f89&#34;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;python3-setproctitle&#34;</span><span class="p">,</span>
            <span class="nt">&#34;buildsystem&#34;</span><span class="p">:</span> <span class="s2">&#34;simple&#34;</span><span class="p">,</span>
            <span class="nt">&#34;build-commands&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">&#34;pip3 install --verbose --exists-action=i --no-index --find-links=\&#34;file://${PWD}\&#34; --prefix=${FLATPAK_DEST} \&#34;setproctitle\&#34; --no-build-isolation&#34;</span>
            <span class="p">],</span>
            <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;file&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://files.pythonhosted.org/packages/a1/7f/a1d4f4c7b66f0fc02f35dc5c85f45a8b4e4a7988357a29e61c14e725ef86/setproctitle-1.2.2.tar.gz&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;sha256&#34;</span><span class="p">:</span> <span class="s2">&#34;7dfb472c8852403d34007e01d6e3c68c57eb66433fb8a5c77b13b89a160d97df&#34;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>You&rsquo;ll notice that there is no mention of PySide or Qt. The <em>key</em> module that the app depends so heavily is not there, why? Well because both Qt python dependencies are not available as source files from pip. Pip hosts source files and wheels. All the above are source files. These are tar balls that pip will compile and build from source. Wheels are, once again, pre-built binaries. Flatpak doesn&rsquo;t include wheels by default since it wants everything to be as cross platform and cross architecture as possible.</p>
<p>I also wanted to be as platform agnostic as possible so I attempted to build my python bindings from source in the flatpak. Flatpak did not like this. Neither PySide nor PyQt would build and each threw different error during the compilation process. My best guess would by the sandbox does not contain some required system libraries but I am at a loss to know which ones. And C compilers are not the most helpful thing as your only point of reference for a system error.</p>
<h3 id="lasers-to-the-rescue">Lasers to the rescue</h3>
<p>At this stage, I didn&rsquo;t actually know what python wheels were, I just assumed everything had to be built from source. I was desperate for answers after 3 days of debugging and staring at config files. I did something I very rarely do, I used the GitHub search function. To my amazement I found a solution.</p>
<p>The <a href="https://www.physics.hu-berlin.de/en/qom" target="_blank" rel="noopener noreffer">Optical Metrology Group</a> in the Physics department of Humboldt University Berlin <a href="https://github.com/hermitdemschoenenleben/linien" target="_blank" rel="noopener noreffer">created a Linux application for locking onto spectroscopy lines</a>. Guess what, they made a flatpak!</p>
<p>I looked at there yaml, and I knew then and there that they had found a solution.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="w">  </span><span class="c"># we used to build pyqt on our own here, but this build caused trouble with the pyqtgraph widget being transparent on some systems.</span><span class="w">
</span><span class="w">  </span><span class="c"># Therefore, we just use the x86_64 wheel here...</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pyqt-x86_64</span><span class="w">
</span><span class="w">    </span><span class="nt">buildsystem</span><span class="p">:</span><span class="w"> </span><span class="l">simple</span><span class="w">
</span><span class="w">    </span><span class="nt">sources</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">file</span><span class="w">
</span><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://files.pythonhosted.org/packages/4c/bb/7fce18fbe0275d7a3e069a306d8f4662c77eda30ec6780634fd4a7ee50ce/PyQt5-5.15.1-5.15.1-cp35.cp36.cp37.cp38.cp39-abi3-manylinux2014_x86_64.whl</span><span class="w">
</span><span class="w">        </span><span class="nt">sha256</span><span class="p">:</span><span class="w"> </span><span class="l">b1ea7e82004dc7b311d1e29df2f276461016e2d180e10c73805ace4376125ed9</span><span class="w">
</span><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">file</span><span class="w">
</span><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://files.pythonhosted.org/packages/31/24/f887203677955ba4d5d4efe9176ac7ed2bf84efce8c243ab91e63183ad9e/PyQt5_sip-12.8.1-cp37-cp37m-manylinux1_x86_64.whl</span><span class="w">
</span><span class="w">        </span><span class="nt">sha256</span><span class="p">:</span><span class="w"> </span><span class="l">a1b8ef013086e224b8e86c93f880f776d01b59195bdfa2a8e0b23f0480678fec</span><span class="w">
</span><span class="w">    </span><span class="nt">build-commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">pip3 install PyQt*.whl --target=/app/lib/python3.7/site-packages</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>They had obviously also faced similar Qt-based problems. Their YAML led to me finding out about python wheels, how I could get PyQt in a flatpak, and how I could tell pip the right directory for a python installation (I had no idea what <code>--target</code> would do before this).</p>
<p>Thanks to some German physicists, my next project is back on track. Beady eyed people may notice some information in some of the config files I&rsquo;ve posted that hint to what it could be. I did try and use PySide using the same wheel method but I got into some strange cyclical versioning thing since it required PySide an Shiboken2 to be installed at the same time. All that means is that my application will be open source out of a legal obligation, as well as an civil one.</p>
<p><em>SIDE:</em> kerberos is also a requirement for PyQt to work in a flatpak, I have no idea why but it may have something to do with certain networking modules.</p>
<h2 id="further-reading">Further Reading</h2>
<p>Here are some useful sources of information I turned to while interacting with packaging systems on Linux</p>
<dl>
<dt><a href="https://www.loganasherjones.com/2018/05/using-flatpak-with-python/">https://www.loganasherjones.com/2018/05/using-flatpak-with-python/</a></dt>
<dd>An excellent and succinct guide that covers making non-qt python apps work in a flatpak</dd>
<dt><a href="https://docs.flatpak.org/en/latest/getting-started.html">https://docs.flatpak.org/en/latest/getting-started.html</a></dt>
<dd>Information on what a flatpak is and what its parts consist of.</dd>
<dt><a href="https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html">https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html</a></dt>
<dd>A good reference for what commands can be used in flatpak YAML</dd>
<dt><a href="https://github.com/flathub/io.github.hermitdemschoenenleben.linien/blob/8d89b1c7193602f0696f134e92ac1eba39986303/io.github.hermitdemschoenenleben.linien.yml#L18">https://github.com/flathub/io.github.hermitdemschoenenleben.linien/blob/8d89b1c7193602f0696f134e92ac1eba39986303/io.github.hermitdemschoenenleben.linien.yml#L18</a></dt>
<dd>The Humboldt University Berlin YAML</dd>
<dt><a href="https://opensource.com/article/18/9/how-build-rpm-packages">https://opensource.com/article/18/9/how-build-rpm-packages</a></dt>
<dd>A straightforward guide on how to make RPM packages</dd>
</dl>
]]></description>
</item><item>
    <title>Where Hugo I Go</title>
    <link>https://www.lukebriggs.dev/where-hugo-i-go/</link>
    <pubDate>Mon, 03 May 2021 20:06:07 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/where-hugo-i-go/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/where-hugo-i-go/banner.png" referrerpolicy="no-referrer">
            </div><p>As you are probably aware, I have redecorated. I said in a <a href="/inspection-and-dissection-this-site" rel="">previous post</a> that my reason for making my own site in the first place was as a central hub to point people to all the things that I do. Despite the fact that from the outside it looks like I haven&rsquo;t done a whole lot since, behind the scenes I have my biggest project yet in development (check out my <a href="https://github.com/lukebriggsdev" target="_blank" rel="noopener noreffer">GitHub</a> if you want a sneak preview of that). It was while working on my project that I realised that I shouldn&rsquo;t have a site that requires my to ssh into a VPS and pull a git repository every time I want to add a post.</p>
<h2 id="technology">Technology</h2>
<p>Behind the scenes, the site is hosted on GitHub Pages. The site is generated using a static site generator called <a href="https://gohugo.io/" target="_blank" rel="noopener noreffer">Hugo</a> with a <em>slightly</em> tweaked version of the <a href="https://themes.gohugo.io/loveit/" target="_blank" rel="noopener noreffer">LoveIt</a>.</p>
<p>With a static site I can remove server costs completely, have a better looking site, and make it easier to add new posts.</p>
<p>Because each post is now a document rather than a database field, you can also stick <code>index.md</code> at the end of any post to get the raw markdown for that post. You are also able to view the source for the site at <a href="https://github.com/lukebriggsdev/lukebriggsdev.github.io" target="_blank" rel="noopener noreffer">my GitHub</a></p>
<h2 id="new-logo">New Logo</h2>
<p></p>
<p>Along with the revamped site, I have created a new logo to go with it; it is probably the best looking thing I have ever drawn. The logo takes inspiration from the IBM PCJr with a few more rounded corners, thinner bezels, and a more minimalist feel.</p>
<p>It was made in <a href="https://inkscape.org" target="_blank" rel="noopener noreffer">Inkscape</a> with the basic shapes and the font is Roboto Mono.</p>
]]></description>
</item><item>
    <title>Inspection and Dissection: Type or Die</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-type-or-die/</link>
    <pubDate>Fri, 05 Mar 2021 12:11:40 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-type-or-die/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/21/cover.png" referrerpolicy="no-referrer">
            </div><blockquote>
<p><a href="https://lukebriggs.itch.io/type-or-die" target="_blank" rel="noopener noreffer">Itch.io Link</a></p>
</blockquote>
<p>For the past 5 days I have done what I have failed to do many times before,
complete the process of making a game.</p>
<p>The game was for the NUCATS Game Jam. NUCATS is the Newcastle University Computing
and Technology Society. It was made in Unity (with great help from <a href="https://www.youtube.com/channel/UCYbK_tjZ2OrIZFBvU6CCMiA" target="_blank" rel="noopener noreffer">Brackeys</a>),
and it was really the first reasonably sized game I&rsquo;ve made. The only other thing I&rsquo;ve ever made in Unity was <a href="/8" rel="">Ping</a>
which, as the name suggests, was a pong clone.</p>
<p>Type or Die is a top-down zombie shooter where it is not about how good
your aim is, but how fast you can type. Waves of zombies come at you in all directions, with the direction
they come from determining what key to press to shoot at them (e.g a zombie coming from the top right would be shot at
using the &lsquo;p&rsquo; key).</p>
<p></p>
<p>The game jam has come in a time between some pretty busy weeks so I have surprised myself by actually getting a
finished game out. I even contemplated not taking part at all after the first day because I felt I just wouldn&rsquo;t be able to do it.
I started off (as optimistic idiots often do) full of goals with zero plans. Every step of the way I was decreasing scope
to match my skill and enthusiasm, and its where those paths crossed that the game was made. I knew that the most complex
thing I could make in the time with limited skill was a 2d, single-screen game. Guns are an easy way to make the mundane exciting,
so the game became a shooter, and wanting to have the computer do all the work for you meant that it became a wave shooter for
replayability.</p>
<p>Every waking moment from Monday to Thursday was spent either watching <a href="https://www.imdb.com/title/tt1632701/?ref_=fn_al_tt_1" target="_blank" rel="noopener noreffer">Suits</a>
or making this game, and the sheer intensity of such an endeavour in the middle of some pretty hectic University team projects
made me realise one thing, I will probably not make another game for a very long time. If you have a gander at my <a href="/projects" rel="">projects</a> page
you will see that all of them are game, so you may think that I really enjoy game-making. But in retrospect I think I only made games as
an outlet for programming rather than an outlet for artistic ideas. Creation is a painful process, so you have to see the purpose in it.
As much as I am proud of what I achieved with each of the games I made, I can&rsquo;t see them as providing a service.</p>
<p>My perspective on games has completely changed in the past year, I place a huge value on the incredible narrative experiences offered by the likes of &lsquo;God of War&rsquo; or
&lsquo;The Beginners Guide&rsquo;, these are games made by people with something to say and the skill to say it. There is certainly a place for arcade
shooters, but if I don&rsquo;t feel passionate about the things I create then I will never see them as worth the time I put into them.</p>
<p>Type or Die marks the end of the 4-year-long adventure that started this whole blog off, I suppose it is fitting that it should end with another
top down arcade shooter. The game is pretty fun, the zombie death animations are my favourite part (also an original theme made by my musically inept hand).</p>
<p>More projects lie on the horizon, and the times they are a changin'.</p>
]]></description>
</item><item>
    <title>You Can Now Follow Me on RSS!</title>
    <link>https://www.lukebriggs.dev/you-can-now-follow-me-on-rss/</link>
    <pubDate>Thu, 18 Feb 2021 20:52:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/you-can-now-follow-me-on-rss/</guid>
    <description><![CDATA[<p>I had a bit of time today and I wanted to do something so here we are.
Thanks to the incredible <a href="https://feedgen.kiesow.be/" target="_blank" rel="noopener noreffer">FeedGen</a> python library, you can now point your RSS reader to <a href="/index.xml" rel="">here</a> and get updates on when I write a new post.</p>
]]></description>
</item><item>
    <title>Goodbye Windows, I Hardly GNU ya</title>
    <link>https://www.lukebriggs.dev/goodbye-windows-i-hardly-gnu-ya/</link>
    <pubDate>Sun, 07 Feb 2021 21:12:30 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/goodbye-windows-i-hardly-gnu-ya/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/13/desktop.png" referrerpolicy="no-referrer">
            </div><p><strong>Preface: I should state that this is not an evangelical sermon, Linux isn&rsquo;t for everyone but it is for me. This is merely a detailing of why I have chosen to switch Operating System</strong></p>
<p>I have, over the course of the past year, consumed pretty much every interpretation and adaptation of Sherlock Holmes out there, from the original works to tangentially linked shows such as the excellent House MD; one thing I have come to understand is that you can only deduce correctly if your initial assumptions are correct. Logic is useless if its underlying axioms are unstable.</p>
<p>So we turn to my current assumption when I use computers &ldquo;Everything must be done in Windows&rdquo;. I have used Windows all my life, all the software I need is on Windows, and all other operating systems are either anaemic in their UX and feature set or are incapable of running on my hardware. It just stands to reason, or does it?</p>
<p>Lets look at that first point, &lsquo;I have used Windows all my life&rsquo;. That is not a very good reason, and the weakest of all. It is indeed true but it shouldn&rsquo;t have any bearing on choice of Operating System, it is an unquestioned ideology rather than any valid argument.</p>
<p>The second axiom, &lsquo;all the software I need is on windows&rsquo;, was probably true for quite a long time. For instance, if I wanted to play any windows games I would have been bang out of luck in days gone by, but tools such as <a href="https://lutris.net/" target="_blank" rel="noopener noreffer">Lutris</a> and the strides made in <a href="https://www.winehq.org/" target="_blank" rel="noopener noreffer">WINE</a> have made that side of things perfectly capable for my needs. Needless to say Mac is straying further away at this point with their move to ARM so the assumption still holds true for them. Outside of gaming, all the apps I <em>need</em> are actually available on Linux. My academic work in Computer Science lends itself perfectly to Linux. All the IDEs I use (the JetBrains suite) are available and the terminal is actually more conducive to my studies compared to the limited Unix-like aliases in the Windows Powershell. The only notable exception on Linux is the lack of the Microsoft Office Suite, but I was quite staggered when I realised that I don&rsquo;t actually have any need for it. My long form writing is now done in LaTeX (<a href="https://www.lukebriggs.dev/17" target="_blank" rel="noopener noreffer">see my reasons for that here</a>), and I don&rsquo;t use Excel or PowerPoint. Should the need ever arise, there is the native <a href="https://www.libreoffice.org/" target="_blank" rel="noopener noreffer">LibreOffice</a> suite, and the cross platform <a href="https://docs.google.com" target="_blank" rel="noopener noreffer">Google Docs</a>. And if compatibility is a necessity then Microsoft also now offers a web app version of the suite.</p>
<p>The second point links to the third, that other operating systems have terrible UX. The king of UX is obviously MacOS, but that obviously doesn&rsquo;t support my hardware or the ability to run the occasional windows game. I had always perceived Linux as having terrible UX because I always just viewed through the lens of someone who has used Windows their whole life. I always just assumed (once again question your assumptions) that how a Linux distro shipped was how it was. I thought I would have to be stuck with the bland, Ubuntu default GNOME desktop and icons with their washed out colours and pre-iOS 6 style realism. I was completely wrong about this and now we are going to look at where Linux, my new Operating System, is actually better for my needs.</p>
<h1 id="the-linux-way-of-thinking">The Linux way of thinking</h1>
<p>Linux is about what Computers were built to do, and it is about the things that us Computer people love. GNU/Linux is a whole software ecosystem that is far greater than what Windows could ever hope for and only rivaled by what Apple has cultivated on its platforms. Unlike Apple, however, GNU/Linux also offers the user complete freedom in every aspect, and there are levels to this. Yes there are demigods that are compiling their own kernels but because there is such a community driven approach, other people have performed every possible layer of abstraction. Over the decades other people have been putting rungs at all levels of the ladder for other people to step on. Because Linux is built for the community by the community, it doesn&rsquo;t fight me.</p>
<p>If I wanted to change the interface on windows, I would need to install several third party apps, each using their own design language and frameworks all while eating up huge amounts of RAM as they do so. In Linux its as easy as choosing an overall desktop environment you like and customisation is welcomed with open arms as a basic human right. Surprisingly, Linux also has an incredibly consistent design language because of how its built. In Windows you have all sorts of frameworks from many decades that all conflict. You&rsquo;ll go from a UWP app with its tile based design ideas, and then open a WPF app that has a reasonable flat aesthetic and some okay ideas, before finally finding one of your applications uses WinForms with all of its tabs and ugly green loading bars. Almost everything on Linux using either the Gtk or Qt GUI libraries, and because of this everything looks consistent. Most Desktop Environments also let you either make or download your own themes for these graphics libraries. As a result you can make all the colours, buttons and menus in the ENTIRE Linux ecosystem look how you want.</p>
<p>The Linux way is for people who care about these things. If you care about things like the same apps using the same frameworks, or the fact that you can use package managers to allow apps to auto-update and avoid redundant dependencies, or how you have a whole community of people who&rsquo;s only incentive is to make good software.</p>
<h1 id="technical-details">Technical Details</h1>
<p><strong>Distribution</strong>: <a href="https://manjaro.org/" target="_blank" rel="noopener noreffer">Manjaro</a></p>
<p><strong>Desktop Environment</strong>: <a href="https://kde.org/plasma-desktop/" target="_blank" rel="noopener noreffer">KDE Plasma</a></p>
<p><strong>Theme</strong>: Breeze Dark</p>
<p><strong>Icon Set</strong>: <a href="https://github.com/yeyushengfan258/Reversal-icon-theme" target="_blank" rel="noopener noreffer">Reversal</a></p>
<p><strong>Background</strong>: (<a href="https://i.imgur.com/DUXXqM2.jpg" target="_blank" rel="noopener noreffer">Imgur</a>) (<a href="/static/postimages/13/themagichour.png" rel="">Mirror</a>)</p>
<h2 id="why-manjaro">Why Manjaro?</h2>
<p>I chose Manjaro, at first by design and then retroactively I realised that I would have had to go with something like it anyway. I wanted a distribution that didn&rsquo;t come with the usual GNOME look, something that either looked excellent at first glance or had extensive customisation capabilities, and something that was pretty light on what it came with. I ended up narrowing it down to <a href="https://manjaro.org/" target="_blank" rel="noopener noreffer">Manjaro</a> and <a href="https://elementary.io/" target="_blank" rel="noopener noreffer">Elementary OS</a>. In the end I chose Manjaro between the two because Elementary seemed slightly far behind in its update cycle compared to the Ubuntu it is based off and its never fun to start off with something knowing there is a major version incredibly close. It turned out in the end that Manjaro was really my best choice between the two anyway thanks to its easy switching between Kernels. I currently need to be running the latest experimental kernel for my touch pad to work.</p>
]]></description>
</item><item>
    <title>Inspection &amp; Dissection: This Site!</title>
    <link>https://www.lukebriggs.dev/inspection-and-dissection-this-site/</link>
    <pubDate>Wed, 03 Feb 2021 16:39:25 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://www.lukebriggs.dev/inspection-and-dissection-this-site/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/static/postimages/12/index.png" referrerpolicy="no-referrer">
            </div><p>Look at me with a fancy website. We&rsquo;re about to get meta as we discuss how this site you&rsquo;re exploring right now came to be.</p>
<h1 id="why-have-a-website">Why have a website?</h1>
<p>I want something to point to when someone asks &lsquo;so what have you done?&rsquo;. I also need it for when I ask myself the same thing. Sometimes I wonder how much I have actually done in my spare time, and a site like this helps me to remember that I haven&rsquo;t wasted <em>all</em> of my spare time on Minecraft.</p>
<h1 id="why-make-your-own-website">Why make your own website?</h1>
<p>Here in Computer Science land: men are real men, women are real women, and small furry creatures from Alpha Centauri are real small furry creatures from Alpha Centauri; thanks to these huge revelations in the field of existentialism we take it upon ourselves to walk the road already taken.</p>
<p>The real reason is I ought to have side-projects, more than I used to. I have more time, not just because of COVID but also because Computer Science is now the only academic subject I have to pay attention to, whereas most of my time in Sixth Form was spent on Maths and Further Maths. It made reasonable sense for the first project to be a platform for my other projects and this is that platform.</p>
<h1 id="where-did-you-start">Where did you start?</h1>
<p>I knew I wanted to make a website with a Flask back end for 2 reasons:</p>
<ol>
<li>
<p>I wanted a back-end that could enable things like logging in and writing blog posts all within the site.</p>
</li>
<li>
<p>I vehemently hate JavaScript and would prefer to do as much with python as possible. In fact this whole site doesn&rsquo;t have any JavaScript. You can inspect element and see that everything front end is done through CSS and HTML; this is certain to change but I will hold out for as long as I can.</p>
</li>
</ol>
<p>For the uninitiated, websites have 2 parts: A front end and a back end. In a simple form, the front end is everything you see (HTML, CSS, JS) and the backend is everything you don&rsquo;t (Databases, Form requests, etc). Flask is a python framework that allows the said language to be used to serve all your requests.</p>
<p>I had used Flask in the past whilst following the <a href="https://cs50.harvard.edu/x/2021/" target="_blank" rel="noopener noreffer">Harvard CS50x</a> course back in 2019 to make a fake stocks app (💎👐). This time round, to re-familiarise myself I followed <a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/" target="_blank" rel="noopener noreffer">this excellent tutorial</a>.</p>
<p>After you are let loose on your own (especially in web dev) I found you have to have goals and a purpose to what you are doing otherwise it&rsquo;ll never happened. I persevered through the trial-and-error process that is CSS</p>
<p>I used a couple of sites for reference when I was making the design for the sight. These were the sights of: my new friend <a href="https://gwood.dev" target="_blank" rel="noopener noreffer">George Wood</a>, the blog of <a href="https://www.caseyliss.com/" target="_blank" rel="noopener noreffer">Casey Liss</a>, the blog of <a href="https://marco.org" target="_blank" rel="noopener noreffer">Marco Arment</a>, and <a href="https://hypercritical.co" target="_blank" rel="noopener noreffer">Hypercritical</a> (No prizes for guessing which podcast I listen to).</p>
<h1 id="what-extra-things-have-you-done">What extra things have you done?</h1>
<p>I&rsquo;m honoured at your presumption that I go above and beyond in the call of duty. The main thing I have done is make all my posts in markdown. Yes, all my posts are entirely written in markdown which makes me able to write nicely structured documents quickly. The raw text of the markdown is stored as a regular text field in the sqlite database but at the stage when the backend grabs the field from the database, jinja parses it as html using the python module <a href="https://mistune.readthedocs.io/en/latest/intro.html" target="_blank" rel="noopener noreffer">mistune</a>. To spice the formatting up even further, since I will be probably be using code snippets, I added the syntax highlighter <a href="https://pygments.org/" target="_blank" rel="noopener noreffer">pygments</a>. In fact here is the code for the highlight renderer being rendered in it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">mistune</span>
<span class="kn">from</span> <span class="nn">pygments</span> <span class="kn">import</span> <span class="n">highlight</span>
<span class="kn">from</span> <span class="nn">pygments.lexers</span> <span class="kn">import</span> <span class="n">get_lexer_by_name</span>
<span class="kn">from</span> <span class="nn">pygments.formatters</span> <span class="kn">import</span> <span class="n">html</span>


<span class="k">class</span> <span class="nc">HighlightRenderer</span><span class="p">(</span><span class="n">mistune</span><span class="o">.</span><span class="n">Renderer</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">block_code</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">lang</span><span class="p">:</span>
            <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">lang</span><span class="p">,</span> <span class="n">stripall</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">formatter</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">HtmlFormatter</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="s1">&#39;monokai&#39;</span><span class="p">,</span> <span class="n">noclasses</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span>
        <span class="k">return</span> <span class="s1">&#39;&lt;pre&gt;&lt;code&gt;&#39;</span> <span class="o">+</span> <span class="n">mistune</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&lt;/code&gt;&lt;/pre&gt;&#39;</span>

</code></pre></td></tr></table>
</div>
</div><p>It goes without saying that this website will continue to be updated as I change my mind on a few things and wish to add more functionality. On my list of todos are:</p>
<ul>
<li>A switch between light mode and dark mode</li>
<li>A way for people to follow the blog (maybe through RSS)</li>
<li>A way to better list out blog posts (currently all are listed on one page which will probably become cumbersome when they grow in number)</li>
</ul>
<p>In the meantime I hope you come back and see if I can offer you any informative content.</p>
]]></description>
</item></channel>
</rss>
